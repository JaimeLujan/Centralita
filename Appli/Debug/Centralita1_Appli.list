
Centralita1_Appli.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002b0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ebb4  080002b0  080002b0  000012b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  0800ee64  0800ee64  0000fe64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ee98  0800ee98  000100e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ee98  0800ee98  0000fe98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eea0  0800eea0  000100e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eea0  0800eea0  0000fea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800eea4  0800eea4  0000fea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e8  24000000  0800eea8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d04  240000e8  0800ef90  000100e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000000  20000000  00011000  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000100e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e43a  00000000  00000000  00010116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005f26  00000000  00000000  0003e550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023a0  00000000  00000000  00044478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001b71  00000000  00000000  00046818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a9a8  00000000  00000000  00048389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000309f8  00000000  00000000  00082d31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00168689  00000000  00000000  000b3729  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0021bdb2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009b04  00000000  00000000  0021bdf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000098  00000000  00000000  002258fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240000e8 	.word	0x240000e8
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800ee4c 	.word	0x0800ee4c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240000ec 	.word	0x240000ec
 80002ec:	0800ee4c 	.word	0x0800ee4c

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <MX_ADC1_Init>:
DMA_QListTypeDef List_GPDMA1_Channel1;
DMA_HandleTypeDef handle_GPDMA1_Channel1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08c      	sub	sp, #48	@ 0x30
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	2220      	movs	r2, #32
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f00e fb99 	bl	800ed30 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005fe:	4b34      	ldr	r3, [pc, #208]	@ (80006d0 <MX_ADC1_Init+0xf0>)
 8000600:	4a34      	ldr	r2, [pc, #208]	@ (80006d4 <MX_ADC1_Init+0xf4>)
 8000602:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 8000604:	4b32      	ldr	r3, [pc, #200]	@ (80006d0 <MX_ADC1_Init+0xf0>)
 8000606:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 800060a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800060c:	4b30      	ldr	r3, [pc, #192]	@ (80006d0 <MX_ADC1_Init+0xf0>)
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000612:	4b2f      	ldr	r3, [pc, #188]	@ (80006d0 <MX_ADC1_Init+0xf0>)
 8000614:	2200      	movs	r2, #0
 8000616:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000618:	4b2d      	ldr	r3, [pc, #180]	@ (80006d0 <MX_ADC1_Init+0xf0>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800061e:	4b2c      	ldr	r3, [pc, #176]	@ (80006d0 <MX_ADC1_Init+0xf0>)
 8000620:	2208      	movs	r2, #8
 8000622:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000624:	4b2a      	ldr	r3, [pc, #168]	@ (80006d0 <MX_ADC1_Init+0xf0>)
 8000626:	2200      	movs	r2, #0
 8000628:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800062a:	4b29      	ldr	r3, [pc, #164]	@ (80006d0 <MX_ADC1_Init+0xf0>)
 800062c:	2201      	movs	r2, #1
 800062e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000630:	4b27      	ldr	r3, [pc, #156]	@ (80006d0 <MX_ADC1_Init+0xf0>)
 8000632:	2201      	movs	r2, #1
 8000634:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000636:	4b26      	ldr	r3, [pc, #152]	@ (80006d0 <MX_ADC1_Init+0xf0>)
 8000638:	2200      	movs	r2, #0
 800063a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800063e:	4b24      	ldr	r3, [pc, #144]	@ (80006d0 <MX_ADC1_Init+0xf0>)
 8000640:	2200      	movs	r2, #0
 8000642:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000644:	4b22      	ldr	r3, [pc, #136]	@ (80006d0 <MX_ADC1_Init+0xf0>)
 8000646:	2200      	movs	r2, #0
 8000648:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 800064a:	4b21      	ldr	r3, [pc, #132]	@ (80006d0 <MX_ADC1_Init+0xf0>)
 800064c:	2200      	movs	r2, #0
 800064e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000650:	4b1f      	ldr	r3, [pc, #124]	@ (80006d0 <MX_ADC1_Init+0xf0>)
 8000652:	2202      	movs	r2, #2
 8000654:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000656:	4b1e      	ldr	r3, [pc, #120]	@ (80006d0 <MX_ADC1_Init+0xf0>)
 8000658:	2200      	movs	r2, #0
 800065a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800065c:	4b1c      	ldr	r3, [pc, #112]	@ (80006d0 <MX_ADC1_Init+0xf0>)
 800065e:	2200      	movs	r2, #0
 8000660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000664:	481a      	ldr	r0, [pc, #104]	@ (80006d0 <MX_ADC1_Init+0xf0>)
 8000666:	f001 fe75 	bl	8002354 <HAL_ADC_Init>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000670:	f000 fb60 	bl	8000d34 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8000674:	2306      	movs	r3, #6
 8000676:	627b      	str	r3, [r7, #36]	@ 0x24
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_8_6_BITS;
 8000678:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800067c:	62bb      	str	r3, [r7, #40]	@ 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 800067e:	2300      	movs	r3, #0
 8000680:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000682:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000686:	4619      	mov	r1, r3
 8000688:	4811      	ldr	r0, [pc, #68]	@ (80006d0 <MX_ADC1_Init+0xf0>)
 800068a:	f002 ffd9 	bl	8003640 <HAL_ADCEx_MultiModeConfigChannel>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8000694:	f000 fb4e 	bl	8000d34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000698:	4b0f      	ldr	r3, [pc, #60]	@ (80006d8 <MX_ADC1_Init+0xf8>)
 800069a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800069c:	2306      	movs	r3, #6
 800069e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 80006a0:	2303      	movs	r3, #3
 80006a2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006a4:	237f      	movs	r3, #127	@ 0x7f
 80006a6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a8:	2304      	movs	r3, #4
 80006aa:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC_OFFSET_SIGN_NEGATIVE;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	4619      	mov	r1, r3
 80006b8:	4805      	ldr	r0, [pc, #20]	@ (80006d0 <MX_ADC1_Init+0xf0>)
 80006ba:	f002 f86b 	bl	8002794 <HAL_ADC_ConfigChannel>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 80006c4:	f000 fb36 	bl	8000d34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006c8:	bf00      	nop
 80006ca:	3730      	adds	r7, #48	@ 0x30
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	24000104 	.word	0x24000104
 80006d4:	40022000 	.word	0x40022000
 80006d8:	19200040 	.word	0x19200040

080006dc <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b088      	sub	sp, #32
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006e2:	463b      	mov	r3, r7
 80006e4:	2220      	movs	r2, #32
 80006e6:	2100      	movs	r1, #0
 80006e8:	4618      	mov	r0, r3
 80006ea:	f00e fb21 	bl	800ed30 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006ee:	4b28      	ldr	r3, [pc, #160]	@ (8000790 <MX_ADC2_Init+0xb4>)
 80006f0:	4a28      	ldr	r2, [pc, #160]	@ (8000794 <MX_ADC2_Init+0xb8>)
 80006f2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 80006f4:	4b26      	ldr	r3, [pc, #152]	@ (8000790 <MX_ADC2_Init+0xb4>)
 80006f6:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 80006fa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006fc:	4b24      	ldr	r3, [pc, #144]	@ (8000790 <MX_ADC2_Init+0xb4>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000702:	4b23      	ldr	r3, [pc, #140]	@ (8000790 <MX_ADC2_Init+0xb4>)
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000708:	4b21      	ldr	r3, [pc, #132]	@ (8000790 <MX_ADC2_Init+0xb4>)
 800070a:	2200      	movs	r2, #0
 800070c:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800070e:	4b20      	ldr	r3, [pc, #128]	@ (8000790 <MX_ADC2_Init+0xb4>)
 8000710:	2204      	movs	r2, #4
 8000712:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000714:	4b1e      	ldr	r3, [pc, #120]	@ (8000790 <MX_ADC2_Init+0xb4>)
 8000716:	2200      	movs	r2, #0
 8000718:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800071a:	4b1d      	ldr	r3, [pc, #116]	@ (8000790 <MX_ADC2_Init+0xb4>)
 800071c:	2201      	movs	r2, #1
 800071e:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000720:	4b1b      	ldr	r3, [pc, #108]	@ (8000790 <MX_ADC2_Init+0xb4>)
 8000722:	2201      	movs	r2, #1
 8000724:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000726:	4b1a      	ldr	r3, [pc, #104]	@ (8000790 <MX_ADC2_Init+0xb4>)
 8000728:	2200      	movs	r2, #0
 800072a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 800072e:	4b18      	ldr	r3, [pc, #96]	@ (8000790 <MX_ADC2_Init+0xb4>)
 8000730:	2200      	movs	r2, #0
 8000732:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000734:	4b16      	ldr	r3, [pc, #88]	@ (8000790 <MX_ADC2_Init+0xb4>)
 8000736:	2200      	movs	r2, #0
 8000738:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800073a:	4b15      	ldr	r3, [pc, #84]	@ (8000790 <MX_ADC2_Init+0xb4>)
 800073c:	2200      	movs	r2, #0
 800073e:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc2.Init.OversamplingMode = DISABLE;
 8000740:	4b13      	ldr	r3, [pc, #76]	@ (8000790 <MX_ADC2_Init+0xb4>)
 8000742:	2200      	movs	r2, #0
 8000744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000748:	4811      	ldr	r0, [pc, #68]	@ (8000790 <MX_ADC2_Init+0xb4>)
 800074a:	f001 fe03 	bl	8002354 <HAL_ADC_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_ADC2_Init+0x7c>
  {
    Error_Handler();
 8000754:	f000 faee 	bl	8000d34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000758:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <MX_ADC2_Init+0xbc>)
 800075a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800075c:	2306      	movs	r3, #6
 800075e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8000760:	2303      	movs	r3, #3
 8000762:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000764:	237f      	movs	r3, #127	@ 0x7f
 8000766:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000768:	2304      	movs	r3, #4
 800076a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSign = ADC_OFFSET_SIGN_NEGATIVE;
 8000770:	2300      	movs	r3, #0
 8000772:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000774:	463b      	mov	r3, r7
 8000776:	4619      	mov	r1, r3
 8000778:	4805      	ldr	r0, [pc, #20]	@ (8000790 <MX_ADC2_Init+0xb4>)
 800077a:	f002 f80b 	bl	8002794 <HAL_ADC_ConfigChannel>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8000784:	f000 fad6 	bl	8000d34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000788:	bf00      	nop
 800078a:	3720      	adds	r7, #32
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	2400016c 	.word	0x2400016c
 8000794:	40022100 	.word	0x40022100
 8000798:	08600004 	.word	0x08600004

0800079c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b0c8      	sub	sp, #288	@ 0x120
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80007a6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80007aa:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ac:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig= {0};
 80007bc:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80007c0:	226c      	movs	r2, #108	@ 0x6c
 80007c2:	2100      	movs	r1, #0
 80007c4:	4618      	mov	r0, r3
 80007c6:	f00e fab3 	bl	800ed30 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007ca:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80007ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80007d2:	4618      	mov	r0, r3
 80007d4:	2384      	movs	r3, #132	@ 0x84
 80007d6:	461a      	mov	r2, r3
 80007d8:	2100      	movs	r1, #0
 80007da:	f00e faa9 	bl	800ed30 <memset>
  if(adcHandle->Instance==ADC1)
 80007de:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80007e2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4a74      	ldr	r2, [pc, #464]	@ (80009bc <HAL_ADC_MspInit+0x220>)
 80007ec:	4293      	cmp	r3, r2
 80007ee:	f040 80f5 	bne.w	80009dc <HAL_ADC_MspInit+0x240>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80007f2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80007f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80007fa:	2210      	movs	r2, #16
 80007fc:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3R;
 80007fe:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000802:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000806:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800080a:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800080c:	f107 031c 	add.w	r3, r7, #28
 8000810:	4618      	mov	r0, r3
 8000812:	f008 f8af 	bl	8008974 <HAL_RCCEx_PeriphCLKConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <HAL_ADC_MspInit+0x84>
    {
      Error_Handler();
 800081c:	f000 fa8a 	bl	8000d34 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000820:	4b67      	ldr	r3, [pc, #412]	@ (80009c0 <HAL_ADC_MspInit+0x224>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	3301      	adds	r3, #1
 8000826:	4a66      	ldr	r2, [pc, #408]	@ (80009c0 <HAL_ADC_MspInit+0x224>)
 8000828:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800082a:	4b65      	ldr	r3, [pc, #404]	@ (80009c0 <HAL_ADC_MspInit+0x224>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	2b01      	cmp	r3, #1
 8000830:	d114      	bne.n	800085c <HAL_ADC_MspInit+0xc0>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000832:	4b64      	ldr	r3, [pc, #400]	@ (80009c4 <HAL_ADC_MspInit+0x228>)
 8000834:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000838:	4a62      	ldr	r2, [pc, #392]	@ (80009c4 <HAL_ADC_MspInit+0x228>)
 800083a:	f043 0320 	orr.w	r3, r3, #32
 800083e:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000842:	4b60      	ldr	r3, [pc, #384]	@ (80009c4 <HAL_ADC_MspInit+0x228>)
 8000844:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
 8000848:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800084c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000856:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800085a:	681b      	ldr	r3, [r3, #0]
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800085c:	4b59      	ldr	r3, [pc, #356]	@ (80009c4 <HAL_ADC_MspInit+0x228>)
 800085e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000862:	4a58      	ldr	r2, [pc, #352]	@ (80009c4 <HAL_ADC_MspInit+0x228>)
 8000864:	f043 0320 	orr.w	r3, r3, #32
 8000868:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800086c:	4b55      	ldr	r3, [pc, #340]	@ (80009c4 <HAL_ADC_MspInit+0x228>)
 800086e:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8000872:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000876:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000880:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000884:	681b      	ldr	r3, [r3, #0]
    /**ADC1 GPIO Configuration
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000886:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800088a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800088e:	2303      	movs	r3, #3
 8000890:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800089a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800089e:	4619      	mov	r1, r3
 80008a0:	4849      	ldr	r0, [pc, #292]	@ (80009c8 <HAL_ADC_MspInit+0x22c>)
 80008a2:	f004 fb57 	bl	8004f54 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* GPDMA1_REQUEST_ADC1 Init */
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 80008a6:	2321      	movs	r3, #33	@ 0x21
 80008a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    NodeConfig.Init.Request = GPDMA1_REQUEST_ADC1;
 80008ac:	2300      	movs	r3, #0
 80008ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80008b2:	2300      	movs	r3, #0
 80008b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008b8:	2300      	movs	r3, #0
 80008ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 80008be:	2300      	movs	r3, #0
 80008c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    NodeConfig.Init.DestInc = DMA_DINC_FIXED;
 80008c4:	2300      	movs	r3, #0
 80008c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 80008ca:	2301      	movs	r3, #1
 80008cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 80008d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008d4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    NodeConfig.Init.SrcBurstLength = 1;
 80008d8:	2301      	movs	r3, #1
 80008da:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    NodeConfig.Init.DestBurstLength = 1;
 80008de:	2301      	movs	r3, #1
 80008e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80008ea:	2300      	movs	r3, #0
 80008ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    NodeConfig.Init.Mode = DMA_NORMAL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 80008f6:	2300      	movs	r3, #0
 80008f8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80008fc:	2300      	movs	r3, #0
 80008fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8000902:	2300      	movs	r3, #0
 8000904:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel0) != HAL_OK)
 8000908:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800090c:	492f      	ldr	r1, [pc, #188]	@ (80009cc <HAL_ADC_MspInit+0x230>)
 800090e:	4618      	mov	r0, r3
 8000910:	f003 fc36 	bl	8004180 <HAL_DMAEx_List_BuildNode>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <HAL_ADC_MspInit+0x182>
    {
      Error_Handler();
 800091a:	f000 fa0b 	bl	8000d34 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 800091e:	4a2b      	ldr	r2, [pc, #172]	@ (80009cc <HAL_ADC_MspInit+0x230>)
 8000920:	2100      	movs	r1, #0
 8000922:	482b      	ldr	r0, [pc, #172]	@ (80009d0 <HAL_ADC_MspInit+0x234>)
 8000924:	f003 fc58 	bl	80041d8 <HAL_DMAEx_List_InsertNode>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <HAL_ADC_MspInit+0x196>
    {
      Error_Handler();
 800092e:	f000 fa01 	bl	8000d34 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 8000932:	4827      	ldr	r0, [pc, #156]	@ (80009d0 <HAL_ADC_MspInit+0x234>)
 8000934:	f003 fd19 	bl	800436a <HAL_DMAEx_List_SetCircularMode>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <HAL_ADC_MspInit+0x1a6>
    {
      Error_Handler();
 800093e:	f000 f9f9 	bl	8000d34 <Error_Handler>
    }

    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8000942:	4b24      	ldr	r3, [pc, #144]	@ (80009d4 <HAL_ADC_MspInit+0x238>)
 8000944:	4a24      	ldr	r2, [pc, #144]	@ (80009d8 <HAL_ADC_MspInit+0x23c>)
 8000946:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8000948:	4b22      	ldr	r3, [pc, #136]	@ (80009d4 <HAL_ADC_MspInit+0x238>)
 800094a:	2200      	movs	r2, #0
 800094c:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 800094e:	4b21      	ldr	r3, [pc, #132]	@ (80009d4 <HAL_ADC_MspInit+0x238>)
 8000950:	2200      	movs	r2, #0
 8000952:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8000954:	4b1f      	ldr	r3, [pc, #124]	@ (80009d4 <HAL_ADC_MspInit+0x238>)
 8000956:	2200      	movs	r2, #0
 8000958:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800095a:	4b1e      	ldr	r3, [pc, #120]	@ (80009d4 <HAL_ADC_MspInit+0x238>)
 800095c:	2200      	movs	r2, #0
 800095e:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8000960:	4b1c      	ldr	r3, [pc, #112]	@ (80009d4 <HAL_ADC_MspInit+0x238>)
 8000962:	2281      	movs	r2, #129	@ 0x81
 8000964:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8000966:	481b      	ldr	r0, [pc, #108]	@ (80009d4 <HAL_ADC_MspInit+0x238>)
 8000968:	f003 fa48 	bl	8003dfc <HAL_DMAEx_List_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <HAL_ADC_MspInit+0x1da>
    {
      Error_Handler();
 8000972:	f000 f9df 	bl	8000d34 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel0, &List_GPDMA1_Channel0) != HAL_OK)
 8000976:	4916      	ldr	r1, [pc, #88]	@ (80009d0 <HAL_ADC_MspInit+0x234>)
 8000978:	4816      	ldr	r0, [pc, #88]	@ (80009d4 <HAL_ADC_MspInit+0x238>)
 800097a:	f003 fd57 	bl	800442c <HAL_DMAEx_List_LinkQ>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <HAL_ADC_MspInit+0x1ec>
    {
      Error_Handler();
 8000984:	f000 f9d6 	bl	8000d34 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle, DMA_Handle, handle_GPDMA1_Channel0);
 8000988:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800098c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a10      	ldr	r2, [pc, #64]	@ (80009d4 <HAL_ADC_MspInit+0x238>)
 8000994:	651a      	str	r2, [r3, #80]	@ 0x50
 8000996:	4a0f      	ldr	r2, [pc, #60]	@ (80009d4 <HAL_ADC_MspInit+0x238>)
 8000998:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800099c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 80009a4:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 80009a8:	480a      	ldr	r0, [pc, #40]	@ (80009d4 <HAL_ADC_MspInit+0x238>)
 80009aa:	f003 f9bf 	bl	8003d2c <HAL_DMA_ConfigChannelAttributes>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	f000 8100 	beq.w	8000bb6 <HAL_ADC_MspInit+0x41a>
    {
      Error_Handler();
 80009b6:	f000 f9bd 	bl	8000d34 <Error_Handler>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80009ba:	e0fc      	b.n	8000bb6 <HAL_ADC_MspInit+0x41a>
 80009bc:	40022000 	.word	0x40022000
 80009c0:	2400033c 	.word	0x2400033c
 80009c4:	58024400 	.word	0x58024400
 80009c8:	58021400 	.word	0x58021400
 80009cc:	240001d4 	.word	0x240001d4
 80009d0:	240001f8 	.word	0x240001f8
 80009d4:	24000210 	.word	0x24000210
 80009d8:	40021050 	.word	0x40021050
  else if(adcHandle->Instance==ADC2)
 80009dc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80009e0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a75      	ldr	r2, [pc, #468]	@ (8000bc0 <HAL_ADC_MspInit+0x424>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	f040 80e3 	bne.w	8000bb6 <HAL_ADC_MspInit+0x41a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80009f0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80009f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80009f8:	2210      	movs	r2, #16
 80009fa:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3R;
 80009fc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000a00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000a04:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000a08:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a0a:	f107 031c 	add.w	r3, r7, #28
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f007 ffb0 	bl	8008974 <HAL_RCCEx_PeriphCLKConfig>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <HAL_ADC_MspInit+0x282>
      Error_Handler();
 8000a1a:	f000 f98b 	bl	8000d34 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000a1e:	4b69      	ldr	r3, [pc, #420]	@ (8000bc4 <HAL_ADC_MspInit+0x428>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	3301      	adds	r3, #1
 8000a24:	4a67      	ldr	r2, [pc, #412]	@ (8000bc4 <HAL_ADC_MspInit+0x428>)
 8000a26:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000a28:	4b66      	ldr	r3, [pc, #408]	@ (8000bc4 <HAL_ADC_MspInit+0x428>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d114      	bne.n	8000a5a <HAL_ADC_MspInit+0x2be>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000a30:	4b65      	ldr	r3, [pc, #404]	@ (8000bc8 <HAL_ADC_MspInit+0x42c>)
 8000a32:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000a36:	4a64      	ldr	r2, [pc, #400]	@ (8000bc8 <HAL_ADC_MspInit+0x42c>)
 8000a38:	f043 0320 	orr.w	r3, r3, #32
 8000a3c:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000a40:	4b61      	ldr	r3, [pc, #388]	@ (8000bc8 <HAL_ADC_MspInit+0x42c>)
 8000a42:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
 8000a46:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000a4a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000a54:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000a58:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a5a:	4b5b      	ldr	r3, [pc, #364]	@ (8000bc8 <HAL_ADC_MspInit+0x42c>)
 8000a5c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a60:	4a59      	ldr	r2, [pc, #356]	@ (8000bc8 <HAL_ADC_MspInit+0x42c>)
 8000a62:	f043 0320 	orr.w	r3, r3, #32
 8000a66:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000a6a:	4b57      	ldr	r3, [pc, #348]	@ (8000bc8 <HAL_ADC_MspInit+0x42c>)
 8000a6c:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8000a70:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000a74:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000a7e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000a82:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a84:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a88:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a98:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	484b      	ldr	r0, [pc, #300]	@ (8000bcc <HAL_ADC_MspInit+0x430>)
 8000aa0:	f004 fa58 	bl	8004f54 <HAL_GPIO_Init>
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8000aa4:	2321      	movs	r3, #33	@ 0x21
 8000aa6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    NodeConfig.Init.Request = GPDMA1_REQUEST_ADC2;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8000abc:	2300      	movs	r3, #0
 8000abe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    NodeConfig.Init.DestInc = DMA_DINC_FIXED;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8000ace:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ad2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    NodeConfig.Init.SrcBurstLength = 1;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    NodeConfig.Init.DestBurstLength = 1;
 8000adc:	2301      	movs	r3, #1
 8000ade:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    NodeConfig.Init.Mode = DMA_NORMAL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8000af4:	2300      	movs	r3, #0
 8000af6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8000afa:	2300      	movs	r3, #0
 8000afc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8000b00:	2300      	movs	r3, #0
 8000b02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel1) != HAL_OK)
 8000b06:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000b0a:	4931      	ldr	r1, [pc, #196]	@ (8000bd0 <HAL_ADC_MspInit+0x434>)
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f003 fb37 	bl	8004180 <HAL_DMAEx_List_BuildNode>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <HAL_ADC_MspInit+0x380>
      Error_Handler();
 8000b18:	f000 f90c 	bl	8000d34 <Error_Handler>
    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel1, NULL, &Node_GPDMA1_Channel1) != HAL_OK)
 8000b1c:	4a2c      	ldr	r2, [pc, #176]	@ (8000bd0 <HAL_ADC_MspInit+0x434>)
 8000b1e:	2100      	movs	r1, #0
 8000b20:	482c      	ldr	r0, [pc, #176]	@ (8000bd4 <HAL_ADC_MspInit+0x438>)
 8000b22:	f003 fb59 	bl	80041d8 <HAL_DMAEx_List_InsertNode>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <HAL_ADC_MspInit+0x394>
      Error_Handler();
 8000b2c:	f000 f902 	bl	8000d34 <Error_Handler>
    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel1) != HAL_OK)
 8000b30:	4828      	ldr	r0, [pc, #160]	@ (8000bd4 <HAL_ADC_MspInit+0x438>)
 8000b32:	f003 fc1a 	bl	800436a <HAL_DMAEx_List_SetCircularMode>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <HAL_ADC_MspInit+0x3a4>
      Error_Handler();
 8000b3c:	f000 f8fa 	bl	8000d34 <Error_Handler>
    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 8000b40:	4b25      	ldr	r3, [pc, #148]	@ (8000bd8 <HAL_ADC_MspInit+0x43c>)
 8000b42:	4a26      	ldr	r2, [pc, #152]	@ (8000bdc <HAL_ADC_MspInit+0x440>)
 8000b44:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8000b46:	4b24      	ldr	r3, [pc, #144]	@ (8000bd8 <HAL_ADC_MspInit+0x43c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel1.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8000b4c:	4b22      	ldr	r3, [pc, #136]	@ (8000bd8 <HAL_ADC_MspInit+0x43c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel1.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8000b52:	4b21      	ldr	r3, [pc, #132]	@ (8000bd8 <HAL_ADC_MspInit+0x43c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel1.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8000b58:	4b1f      	ldr	r3, [pc, #124]	@ (8000bd8 <HAL_ADC_MspInit+0x43c>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel1.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8000b5e:	4b1e      	ldr	r3, [pc, #120]	@ (8000bd8 <HAL_ADC_MspInit+0x43c>)
 8000b60:	2281      	movs	r2, #129	@ 0x81
 8000b62:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 8000b64:	481c      	ldr	r0, [pc, #112]	@ (8000bd8 <HAL_ADC_MspInit+0x43c>)
 8000b66:	f003 f949 	bl	8003dfc <HAL_DMAEx_List_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <HAL_ADC_MspInit+0x3d8>
      Error_Handler();
 8000b70:	f000 f8e0 	bl	8000d34 <Error_Handler>
    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel1, &List_GPDMA1_Channel1) != HAL_OK)
 8000b74:	4917      	ldr	r1, [pc, #92]	@ (8000bd4 <HAL_ADC_MspInit+0x438>)
 8000b76:	4818      	ldr	r0, [pc, #96]	@ (8000bd8 <HAL_ADC_MspInit+0x43c>)
 8000b78:	f003 fc58 	bl	800442c <HAL_DMAEx_List_LinkQ>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <HAL_ADC_MspInit+0x3ea>
      Error_Handler();
 8000b82:	f000 f8d7 	bl	8000d34 <Error_Handler>
    __HAL_LINKDMA(adcHandle, DMA_Handle, handle_GPDMA1_Channel1);
 8000b86:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000b8a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a11      	ldr	r2, [pc, #68]	@ (8000bd8 <HAL_ADC_MspInit+0x43c>)
 8000b92:	651a      	str	r2, [r3, #80]	@ 0x50
 8000b94:	4a10      	ldr	r2, [pc, #64]	@ (8000bd8 <HAL_ADC_MspInit+0x43c>)
 8000b96:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000b9a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000ba2:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8000ba6:	480c      	ldr	r0, [pc, #48]	@ (8000bd8 <HAL_ADC_MspInit+0x43c>)
 8000ba8:	f003 f8c0 	bl	8003d2c <HAL_DMA_ConfigChannelAttributes>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <HAL_ADC_MspInit+0x41a>
      Error_Handler();
 8000bb2:	f000 f8bf 	bl	8000d34 <Error_Handler>
}
 8000bb6:	bf00      	nop
 8000bb8:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40022100 	.word	0x40022100
 8000bc4:	2400033c 	.word	0x2400033c
 8000bc8:	58024400 	.word	0x58024400
 8000bcc:	58021400 	.word	0x58021400
 8000bd0:	24000288 	.word	0x24000288
 8000bd4:	240002ac 	.word	0x240002ac
 8000bd8:	240002c4 	.word	0x240002c4
 8000bdc:	400210d0 	.word	0x400210d0

08000be0 <MX_GPDMA1_Init>:

/* USER CODE END 0 */

/* GPDMA1 init function */
void MX_GPDMA1_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8000be6:	4b10      	ldr	r3, [pc, #64]	@ (8000c28 <MX_GPDMA1_Init+0x48>)
 8000be8:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000bec:	4a0e      	ldr	r2, [pc, #56]	@ (8000c28 <MX_GPDMA1_Init+0x48>)
 8000bee:	f043 0310 	orr.w	r3, r3, #16
 8000bf2:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000bf6:	4b0c      	ldr	r3, [pc, #48]	@ (8000c28 <MX_GPDMA1_Init+0x48>)
 8000bf8:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8000c00:	2200      	movs	r2, #0
 8000c02:	2100      	movs	r1, #0
 8000c04:	2027      	movs	r0, #39	@ 0x27
 8000c06:	f002 fe9a 	bl	800393e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8000c0a:	2027      	movs	r0, #39	@ 0x27
 8000c0c:	f002 feb1 	bl	8003972 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 0, 0);
 8000c10:	2200      	movs	r2, #0
 8000c12:	2100      	movs	r1, #0
 8000c14:	2028      	movs	r0, #40	@ 0x28
 8000c16:	f002 fe92 	bl	800393e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 8000c1a:	2028      	movs	r0, #40	@ 0x28
 8000c1c:	f002 fea9 	bl	8003972 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8000c20:	bf00      	nop
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	58024400 	.word	0x58024400

08000c2c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08a      	sub	sp, #40	@ 0x28
 8000c30:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
 8000c3c:	609a      	str	r2, [r3, #8]
 8000c3e:	60da      	str	r2, [r3, #12]
 8000c40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOM_CLK_ENABLE();
 8000c42:	4b2d      	ldr	r3, [pc, #180]	@ (8000cf8 <MX_GPIO_Init+0xcc>)
 8000c44:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c48:	4a2b      	ldr	r2, [pc, #172]	@ (8000cf8 <MX_GPIO_Init+0xcc>)
 8000c4a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c4e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c52:	4b29      	ldr	r3, [pc, #164]	@ (8000cf8 <MX_GPIO_Init+0xcc>)
 8000c54:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5c:	4b26      	ldr	r3, [pc, #152]	@ (8000cf8 <MX_GPIO_Init+0xcc>)
 8000c5e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c62:	4a25      	ldr	r2, [pc, #148]	@ (8000cf8 <MX_GPIO_Init+0xcc>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c6c:	4b22      	ldr	r3, [pc, #136]	@ (8000cf8 <MX_GPIO_Init+0xcc>)
 8000c6e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c76:	4b20      	ldr	r3, [pc, #128]	@ (8000cf8 <MX_GPIO_Init+0xcc>)
 8000c78:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c7c:	4a1e      	ldr	r2, [pc, #120]	@ (8000cf8 <MX_GPIO_Init+0xcc>)
 8000c7e:	f043 0308 	orr.w	r3, r3, #8
 8000c82:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c86:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf8 <MX_GPIO_Init+0xcc>)
 8000c88:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c8c:	60bb      	str	r3, [r7, #8]
 8000c8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c90:	4b19      	ldr	r3, [pc, #100]	@ (8000cf8 <MX_GPIO_Init+0xcc>)
 8000c92:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c96:	4a18      	ldr	r2, [pc, #96]	@ (8000cf8 <MX_GPIO_Init+0xcc>)
 8000c98:	f043 0320 	orr.w	r3, r3, #32
 8000c9c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000ca0:	4b15      	ldr	r3, [pc, #84]	@ (8000cf8 <MX_GPIO_Init+0xcc>)
 8000ca2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(activar_VBUS_GPIO_Port, activar_VBUS_Pin, GPIO_PIN_RESET);
 8000caa:	2200      	movs	r2, #0
 8000cac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000cb0:	4812      	ldr	r0, [pc, #72]	@ (8000cfc <MX_GPIO_Init+0xd0>)
 8000cb2:	f004 fb69 	bl	8005388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = activar_VBUS_Pin;
 8000cb6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(activar_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	4619      	mov	r1, r3
 8000cce:	480b      	ldr	r0, [pc, #44]	@ (8000cfc <MX_GPIO_Init+0xd0>)
 8000cd0:	f004 f940 	bl	8004f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PM8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000cd4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cda:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000cde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOM, &GPIO_InitStruct);
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4804      	ldr	r0, [pc, #16]	@ (8000cfc <MX_GPIO_Init+0xd0>)
 8000cec:	f004 f932 	bl	8004f54 <HAL_GPIO_Init>

}
 8000cf0:	bf00      	nop
 8000cf2:	3728      	adds	r7, #40	@ 0x28
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	58024400 	.word	0x58024400
 8000cfc:	58023000 	.word	0x58023000

08000d00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Update SystemCoreClock variable according to RCC registers values. */
  SystemCoreClockUpdate();
 8000d04:	f000 fa3e 	bl	8001184 <SystemCoreClockUpdate>

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d08:	f001 f833 	bl	8001d72 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d0c:	f7ff ff8e 	bl	8000c2c <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8000d10:	f7ff ff66 	bl	8000be0 <MX_GPDMA1_Init>
  MX_ADC1_Init();
 8000d14:	f7ff fc64 	bl	80005e0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000d18:	f7ff fce0 	bl	80006dc <MX_ADC2_Init>
  MX_USART3_UART_Init();
 8000d1c:	f000 fb6a 	bl	80013f4 <MX_USART3_UART_Init>

  /* USER CODE BEGIN 2 */

    MX_TCPP_Init();
 8000d20:	f00c fede 	bl	800dae0 <MX_TCPP_Init>
    MX_USB_HOST_Init();
 8000d24:	f00d fc6e 	bl	800e604 <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000d28:	f00d fc92 	bl	800e650 <MX_USB_HOST_Process>

  MX_TCPP_Process();
 8000d2c:	f00c fefa 	bl	800db24 <MX_TCPP_Process>
    MX_USB_HOST_Process();
 8000d30:	bf00      	nop
 8000d32:	e7f9      	b.n	8000d28 <main+0x28>

08000d34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d38:	b672      	cpsid	i
}
 8000d3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d3c:	bf00      	nop
 8000d3e:	e7fd      	b.n	8000d3c <Error_Handler+0x8>

08000d40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d52:	bf00      	nop
 8000d54:	e7fd      	b.n	8000d52 <NMI_Handler+0x4>

08000d56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d5a:	bf00      	nop
 8000d5c:	e7fd      	b.n	8000d5a <HardFault_Handler+0x4>

08000d5e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d62:	bf00      	nop
 8000d64:	e7fd      	b.n	8000d62 <MemManage_Handler+0x4>

08000d66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d6a:	bf00      	nop
 8000d6c:	e7fd      	b.n	8000d6a <BusFault_Handler+0x4>

08000d6e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d72:	bf00      	nop
 8000d74:	e7fd      	b.n	8000d72 <UsageFault_Handler+0x4>

08000d76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000da4:	f001 f83a 	bl	8001e1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	bd80      	pop	{r7, pc}

08000dac <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8000db0:	4802      	ldr	r0, [pc, #8]	@ (8000dbc <GPDMA1_Channel0_IRQHandler+0x10>)
 8000db2:	f002 fe59 	bl	8003a68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	24000210 	.word	0x24000210

08000dc0 <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 8000dc4:	4802      	ldr	r0, [pc, #8]	@ (8000dd0 <GPDMA1_Channel1_IRQHandler+0x10>)
 8000dc6:	f002 fe4f 	bl	8003a68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	240002c4 	.word	0x240002c4

08000dd4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB OTG HS interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8000dd8:	4802      	ldr	r0, [pc, #8]	@ (8000de4 <OTG_HS_IRQHandler+0x10>)
 8000dda:	f004 fdd1 	bl	8005980 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	240008c4 	.word	0x240008c4

08000de8 <BSP_I2C3_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C3_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000dee:	2300      	movs	r3, #0
 8000df0:	607b      	str	r3, [r7, #4]

  hi2c3.Instance  = I2C3;
 8000df2:	4b19      	ldr	r3, [pc, #100]	@ (8000e58 <BSP_I2C3_Init+0x70>)
 8000df4:	4a19      	ldr	r2, [pc, #100]	@ (8000e5c <BSP_I2C3_Init+0x74>)
 8000df6:	601a      	str	r2, [r3, #0]

  if(I2C3InitCounter++ == 0)
 8000df8:	4b19      	ldr	r3, [pc, #100]	@ (8000e60 <BSP_I2C3_Init+0x78>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	1c5a      	adds	r2, r3, #1
 8000dfe:	4918      	ldr	r1, [pc, #96]	@ (8000e60 <BSP_I2C3_Init+0x78>)
 8000e00:	600a      	str	r2, [r1, #0]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d122      	bne.n	8000e4c <BSP_I2C3_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c3) == HAL_I2C_STATE_RESET)
 8000e06:	4814      	ldr	r0, [pc, #80]	@ (8000e58 <BSP_I2C3_Init+0x70>)
 8000e08:	f006 ff02 	bl	8007c10 <HAL_I2C_GetState>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d11c      	bne.n	8000e4c <BSP_I2C3_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C3_MspInit(&hi2c3);
 8000e12:	4811      	ldr	r0, [pc, #68]	@ (8000e58 <BSP_I2C3_Init+0x70>)
 8000e14:	f000 f8fe 	bl	8001014 <I2C3_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d116      	bne.n	8000e4c <BSP_I2C3_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C3_Init(&hi2c3) != HAL_OK)
 8000e1e:	480e      	ldr	r0, [pc, #56]	@ (8000e58 <BSP_I2C3_Init+0x70>)
 8000e20:	f000 f8b4 	bl	8000f8c <MX_I2C3_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d003      	beq.n	8000e32 <BSP_I2C3_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000e2a:	f06f 0307 	mvn.w	r3, #7
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	e00c      	b.n	8000e4c <BSP_I2C3_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e32:	2100      	movs	r1, #0
 8000e34:	4808      	ldr	r0, [pc, #32]	@ (8000e58 <BSP_I2C3_Init+0x70>)
 8000e36:	f007 f9c7 	bl	80081c8 <HAL_I2CEx_ConfigAnalogFilter>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d003      	beq.n	8000e48 <BSP_I2C3_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000e40:	f06f 0307 	mvn.w	r3, #7
 8000e44:	607b      	str	r3, [r7, #4]
 8000e46:	e001      	b.n	8000e4c <BSP_I2C3_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000e4c:	687b      	ldr	r3, [r7, #4]
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	24000340 	.word	0x24000340
 8000e5c:	40005c00 	.word	0x40005c00
 8000e60:	24000394 	.word	0x24000394

08000e64 <BSP_I2C3_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C3_DeInit(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	607b      	str	r3, [r7, #4]

  if (I2C3InitCounter > 0)
 8000e6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000eac <BSP_I2C3_DeInit+0x48>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d014      	beq.n	8000ea0 <BSP_I2C3_DeInit+0x3c>
  {
    if (--I2C3InitCounter == 0)
 8000e76:	4b0d      	ldr	r3, [pc, #52]	@ (8000eac <BSP_I2C3_DeInit+0x48>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	4a0b      	ldr	r2, [pc, #44]	@ (8000eac <BSP_I2C3_DeInit+0x48>)
 8000e7e:	6013      	str	r3, [r2, #0]
 8000e80:	4b0a      	ldr	r3, [pc, #40]	@ (8000eac <BSP_I2C3_DeInit+0x48>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d10b      	bne.n	8000ea0 <BSP_I2C3_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C3_MspDeInit(&hi2c3);
 8000e88:	4809      	ldr	r0, [pc, #36]	@ (8000eb0 <BSP_I2C3_DeInit+0x4c>)
 8000e8a:	f000 f911 	bl	80010b0 <I2C3_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c3) != HAL_OK)
 8000e8e:	4808      	ldr	r0, [pc, #32]	@ (8000eb0 <BSP_I2C3_DeInit+0x4c>)
 8000e90:	f006 fc4c 	bl	800772c <HAL_I2C_DeInit>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d002      	beq.n	8000ea0 <BSP_I2C3_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8000e9a:	f06f 0307 	mvn.w	r3, #7
 8000e9e:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000ea0:	687b      	ldr	r3, [r7, #4]
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	24000394 	.word	0x24000394
 8000eb0:	24000340 	.word	0x24000340

08000eb4 <BSP_I2C3_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C3_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08a      	sub	sp, #40	@ 0x28
 8000eb8:	af04      	add	r7, sp, #16
 8000eba:	60ba      	str	r2, [r7, #8]
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	81fb      	strh	r3, [r7, #14]
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	81bb      	strh	r3, [r7, #12]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c3, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C3_POLL_TIMEOUT) != HAL_OK)
 8000ece:	89ba      	ldrh	r2, [r7, #12]
 8000ed0:	89f9      	ldrh	r1, [r7, #14]
 8000ed2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ed6:	9302      	str	r3, [sp, #8]
 8000ed8:	88fb      	ldrh	r3, [r7, #6]
 8000eda:	9301      	str	r3, [sp, #4]
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	480c      	ldr	r0, [pc, #48]	@ (8000f14 <BSP_I2C3_WriteReg+0x60>)
 8000ee4:	f006 fc66 	bl	80077b4 <HAL_I2C_Mem_Write>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d00c      	beq.n	8000f08 <BSP_I2C3_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c3) == HAL_I2C_ERROR_AF)
 8000eee:	4809      	ldr	r0, [pc, #36]	@ (8000f14 <BSP_I2C3_WriteReg+0x60>)
 8000ef0:	f006 fe9c 	bl	8007c2c <HAL_I2C_GetError>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b04      	cmp	r3, #4
 8000ef8:	d103      	bne.n	8000f02 <BSP_I2C3_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000efa:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8000efe:	617b      	str	r3, [r7, #20]
 8000f00:	e002      	b.n	8000f08 <BSP_I2C3_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000f02:	f06f 0303 	mvn.w	r3, #3
 8000f06:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000f08:	697b      	ldr	r3, [r7, #20]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3718      	adds	r7, #24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	24000340 	.word	0x24000340

08000f18 <BSP_I2C3_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C3_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08a      	sub	sp, #40	@ 0x28
 8000f1c:	af04      	add	r7, sp, #16
 8000f1e:	60ba      	str	r2, [r7, #8]
 8000f20:	461a      	mov	r2, r3
 8000f22:	4603      	mov	r3, r0
 8000f24:	81fb      	strh	r3, [r7, #14]
 8000f26:	460b      	mov	r3, r1
 8000f28:	81bb      	strh	r3, [r7, #12]
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c3, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C3_POLL_TIMEOUT) != HAL_OK)
 8000f32:	89ba      	ldrh	r2, [r7, #12]
 8000f34:	89f9      	ldrh	r1, [r7, #14]
 8000f36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f3a:	9302      	str	r3, [sp, #8]
 8000f3c:	88fb      	ldrh	r3, [r7, #6]
 8000f3e:	9301      	str	r3, [sp, #4]
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	9300      	str	r3, [sp, #0]
 8000f44:	2301      	movs	r3, #1
 8000f46:	480c      	ldr	r0, [pc, #48]	@ (8000f78 <BSP_I2C3_ReadReg+0x60>)
 8000f48:	f006 fd48 	bl	80079dc <HAL_I2C_Mem_Read>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d00c      	beq.n	8000f6c <BSP_I2C3_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c3) == HAL_I2C_ERROR_AF)
 8000f52:	4809      	ldr	r0, [pc, #36]	@ (8000f78 <BSP_I2C3_ReadReg+0x60>)
 8000f54:	f006 fe6a 	bl	8007c2c <HAL_I2C_GetError>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b04      	cmp	r3, #4
 8000f5c:	d103      	bne.n	8000f66 <BSP_I2C3_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000f5e:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8000f62:	617b      	str	r3, [r7, #20]
 8000f64:	e002      	b.n	8000f6c <BSP_I2C3_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000f66:	f06f 0303 	mvn.w	r3, #3
 8000f6a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000f6c:	697b      	ldr	r3, [r7, #20]
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3718      	adds	r7, #24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	24000340 	.word	0x24000340

08000f7c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000f80:	f000 ff60 	bl	8001e44 <HAL_GetTick>
 8000f84:	4603      	mov	r3, r0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	bd80      	pop	{r7, pc}
	...

08000f8c <MX_I2C3_Init>:

/* I2C3 init function */

__weak HAL_StatusTypeDef MX_I2C3_Init(I2C_HandleTypeDef* hi2c)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000f94:	2300      	movs	r3, #0
 8000f96:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C3;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a1c      	ldr	r2, [pc, #112]	@ (800100c <MX_I2C3_Init+0x80>)
 8000f9c:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00E063FF;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a1b      	ldr	r2, [pc, #108]	@ (8001010 <MX_I2C3_Init+0x84>)
 8000fa2:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2201      	movs	r2, #1
 8000fae:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f006 fb10 	bl	80075f4 <HAL_I2C_Init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_I2C3_Init+0x52>
  {
    ret = HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fde:	2100      	movs	r1, #0
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f007 f8f1 	bl	80081c8 <HAL_I2CEx_ConfigAnalogFilter>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_I2C3_Init+0x64>
  {
    ret = HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f007 f933 	bl	800825e <HAL_I2CEx_ConfigDigitalFilter>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_I2C3_Init+0x76>
  {
    ret = HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001002:	7bfb      	ldrb	r3, [r7, #15]
}
 8001004:	4618      	mov	r0, r3
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40005c00 	.word	0x40005c00
 8001010:	00e063ff 	.word	0x00e063ff

08001014 <I2C3_MspInit>:

static void I2C3_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b0aa      	sub	sp, #168	@ 0xa8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800101c:	f107 0310 	add.w	r3, r7, #16
 8001020:	2284      	movs	r2, #132	@ 0x84
 8001022:	2100      	movs	r1, #0
 8001024:	4618      	mov	r0, r3
 8001026:	f00d fe83 	bl	800ed30 <memset>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C23;
 800102a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800102e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c23ClockSelection = RCC_I2C23CLKSOURCE_PCLK1;
 8001030:	2300      	movs	r3, #0
 8001032:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8001034:	f107 0310 	add.w	r3, r7, #16
 8001038:	4618      	mov	r0, r3
 800103a:	f007 fc9b 	bl	8008974 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103e:	4b1a      	ldr	r3, [pc, #104]	@ (80010a8 <I2C3_MspInit+0x94>)
 8001040:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001044:	4a18      	ldr	r2, [pc, #96]	@ (80010a8 <I2C3_MspInit+0x94>)
 8001046:	f043 0301 	orr.w	r3, r3, #1
 800104a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800104e:	4b16      	ldr	r3, [pc, #88]	@ (80010a8 <I2C3_MspInit+0x94>)
 8001050:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8001058:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800105c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001060:	2312      	movs	r3, #18
 8001062:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	2300      	movs	r3, #0
 800106e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001072:	2304      	movs	r3, #4
 8001074:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001078:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800107c:	4619      	mov	r1, r3
 800107e:	480b      	ldr	r0, [pc, #44]	@ (80010ac <I2C3_MspInit+0x98>)
 8001080:	f003 ff68 	bl	8004f54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001084:	4b08      	ldr	r3, [pc, #32]	@ (80010a8 <I2C3_MspInit+0x94>)
 8001086:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800108a:	4a07      	ldr	r2, [pc, #28]	@ (80010a8 <I2C3_MspInit+0x94>)
 800108c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001090:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001094:	4b04      	ldr	r3, [pc, #16]	@ (80010a8 <I2C3_MspInit+0x94>)
 8001096:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800109a:	60bb      	str	r3, [r7, #8]
 800109c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
}
 800109e:	bf00      	nop
 80010a0:	37a8      	adds	r7, #168	@ 0xa8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	58024400 	.word	0x58024400
 80010ac:	58020000 	.word	0x58020000

080010b0 <I2C3_MspDeInit>:

static void I2C3_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 80010b8:	4b0a      	ldr	r3, [pc, #40]	@ (80010e4 <I2C3_MspDeInit+0x34>)
 80010ba:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80010be:	4a09      	ldr	r2, [pc, #36]	@ (80010e4 <I2C3_MspDeInit+0x34>)
 80010c0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80010c4:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148

    /**I2C3 GPIO Configuration
    PA9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9);
 80010c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010cc:	4806      	ldr	r0, [pc, #24]	@ (80010e8 <I2C3_MspDeInit+0x38>)
 80010ce:	f004 f897 	bl	8005200 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 80010d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010d6:	4804      	ldr	r0, [pc, #16]	@ (80010e8 <I2C3_MspDeInit+0x38>)
 80010d8:	f004 f892 	bl	8005200 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	58024400 	.word	0x58024400
 80010e8:	58020000 	.word	0x58020000

080010ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010f4:	4a14      	ldr	r2, [pc, #80]	@ (8001148 <_sbrk+0x5c>)
 80010f6:	4b15      	ldr	r3, [pc, #84]	@ (800114c <_sbrk+0x60>)
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001100:	4b13      	ldr	r3, [pc, #76]	@ (8001150 <_sbrk+0x64>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d102      	bne.n	800110e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001108:	4b11      	ldr	r3, [pc, #68]	@ (8001150 <_sbrk+0x64>)
 800110a:	4a12      	ldr	r2, [pc, #72]	@ (8001154 <_sbrk+0x68>)
 800110c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800110e:	4b10      	ldr	r3, [pc, #64]	@ (8001150 <_sbrk+0x64>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4413      	add	r3, r2
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	429a      	cmp	r2, r3
 800111a:	d207      	bcs.n	800112c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800111c:	f00d fe20 	bl	800ed60 <__errno>
 8001120:	4603      	mov	r3, r0
 8001122:	220c      	movs	r2, #12
 8001124:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001126:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800112a:	e009      	b.n	8001140 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800112c:	4b08      	ldr	r3, [pc, #32]	@ (8001150 <_sbrk+0x64>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001132:	4b07      	ldr	r3, [pc, #28]	@ (8001150 <_sbrk+0x64>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4413      	add	r3, r2
 800113a:	4a05      	ldr	r2, [pc, #20]	@ (8001150 <_sbrk+0x64>)
 800113c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800113e:	68fb      	ldr	r3, [r7, #12]
}
 8001140:	4618      	mov	r0, r3
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20010000 	.word	0x20010000
 800114c:	00000400 	.word	0x00000400
 8001150:	24000398 	.word	0x24000398
 8001154:	20000000 	.word	0x20000000

08001158 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = INTVECT_START;
 800115c:	4b07      	ldr	r3, [pc, #28]	@ (800117c <SystemInit+0x24>)
 800115e:	4a08      	ldr	r2, [pc, #32]	@ (8001180 <SystemInit+0x28>)
 8001160:	609a      	str	r2, [r3, #8]

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001162:	4b06      	ldr	r3, [pc, #24]	@ (800117c <SystemInit+0x24>)
 8001164:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001168:	4a04      	ldr	r2, [pc, #16]	@ (800117c <SystemInit+0x24>)
 800116a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800116e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001172:	bf00      	nop
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000ed00 	.word	0xe000ed00
 8001180:	08000000 	.word	0x08000000

08001184 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001184:	b480      	push	{r7}
 8001186:	b089      	sub	sp, #36	@ 0x24
 8001188:	af00      	add	r7, sp, #0
  uint32_t sysclk, hsivalue, pllsource, pllm, pllp, core_presc;
  float_t pllfracn, pllvco;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800118a:	4b92      	ldr	r3, [pc, #584]	@ (80013d4 <SystemCoreClockUpdate+0x250>)
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001192:	2b18      	cmp	r3, #24
 8001194:	f200 80fb 	bhi.w	800138e <SystemCoreClockUpdate+0x20a>
 8001198:	a201      	add	r2, pc, #4	@ (adr r2, 80011a0 <SystemCoreClockUpdate+0x1c>)
 800119a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800119e:	bf00      	nop
 80011a0:	08001205 	.word	0x08001205
 80011a4:	0800138f 	.word	0x0800138f
 80011a8:	0800138f 	.word	0x0800138f
 80011ac:	0800138f 	.word	0x0800138f
 80011b0:	0800138f 	.word	0x0800138f
 80011b4:	0800138f 	.word	0x0800138f
 80011b8:	0800138f 	.word	0x0800138f
 80011bc:	0800138f 	.word	0x0800138f
 80011c0:	08001219 	.word	0x08001219
 80011c4:	0800138f 	.word	0x0800138f
 80011c8:	0800138f 	.word	0x0800138f
 80011cc:	0800138f 	.word	0x0800138f
 80011d0:	0800138f 	.word	0x0800138f
 80011d4:	0800138f 	.word	0x0800138f
 80011d8:	0800138f 	.word	0x0800138f
 80011dc:	0800138f 	.word	0x0800138f
 80011e0:	0800121f 	.word	0x0800121f
 80011e4:	0800138f 	.word	0x0800138f
 80011e8:	0800138f 	.word	0x0800138f
 80011ec:	0800138f 	.word	0x0800138f
 80011f0:	0800138f 	.word	0x0800138f
 80011f4:	0800138f 	.word	0x0800138f
 80011f8:	0800138f 	.word	0x0800138f
 80011fc:	0800138f 	.word	0x0800138f
 8001200:	08001225 	.word	0x08001225
  {
  case 0x00:  /* HSI used as system clock source (default after reset) */
    sysclk = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV) >> RCC_CR_HSIDIV_Pos));
 8001204:	4b73      	ldr	r3, [pc, #460]	@ (80013d4 <SystemCoreClockUpdate+0x250>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	08db      	lsrs	r3, r3, #3
 800120a:	f003 0303 	and.w	r3, r3, #3
 800120e:	4a72      	ldr	r2, [pc, #456]	@ (80013d8 <SystemCoreClockUpdate+0x254>)
 8001210:	fa22 f303 	lsr.w	r3, r2, r3
 8001214:	61fb      	str	r3, [r7, #28]
    break;
 8001216:	e0c4      	b.n	80013a2 <SystemCoreClockUpdate+0x21e>

  case 0x08:  /* CSI used as system clock source */
    sysclk = CSI_VALUE;
 8001218:	4b70      	ldr	r3, [pc, #448]	@ (80013dc <SystemCoreClockUpdate+0x258>)
 800121a:	61fb      	str	r3, [r7, #28]
    break;
 800121c:	e0c1      	b.n	80013a2 <SystemCoreClockUpdate+0x21e>

  case 0x10:  /* HSE used as system clock source */
    sysclk = HSE_VALUE;
 800121e:	4b70      	ldr	r3, [pc, #448]	@ (80013e0 <SystemCoreClockUpdate+0x25c>)
 8001220:	61fb      	str	r3, [r7, #28]
    break;
 8001222:	e0be      	b.n	80013a2 <SystemCoreClockUpdate+0x21e>

  case 0x18:  /* PLL1 used as system clock  source */
    /* PLL1_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL1_VCO / PLL1R
       */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001224:	4b6b      	ldr	r3, [pc, #428]	@ (80013d4 <SystemCoreClockUpdate+0x250>)
 8001226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001228:	f003 0303 	and.w	r3, r3, #3
 800122c:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos)  ;
 800122e:	4b69      	ldr	r3, [pc, #420]	@ (80013d4 <SystemCoreClockUpdate+0x250>)
 8001230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001232:	091b      	lsrs	r3, r3, #4
 8001234:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001238:	60fb      	str	r3, [r7, #12]
    if ((RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) != 0U)
 800123a:	4b66      	ldr	r3, [pc, #408]	@ (80013d4 <SystemCoreClockUpdate+0x250>)
 800123c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	2b00      	cmp	r3, #0
 8001244:	d00b      	beq.n	800125e <SystemCoreClockUpdate+0xda>
    {
      pllfracn = (float_t)(uint32_t)(((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN)>> RCC_PLL1FRACR_FRACN_Pos));
 8001246:	4b63      	ldr	r3, [pc, #396]	@ (80013d4 <SystemCoreClockUpdate+0x250>)
 8001248:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800124a:	08db      	lsrs	r3, r3, #3
 800124c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001250:	ee07 3a90 	vmov	s15, r3
 8001254:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001258:	edc7 7a06 	vstr	s15, [r7, #24]
 800125c:	e002      	b.n	8001264 <SystemCoreClockUpdate+0xe0>
    }
    else
    {
      pllfracn = (float_t)0U;
 800125e:	f04f 0300 	mov.w	r3, #0
 8001262:	61bb      	str	r3, [r7, #24]
    }

    if (pllm != 0U)
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	2b00      	cmp	r3, #0
 8001268:	f000 808e 	beq.w	8001388 <SystemCoreClockUpdate+0x204>
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d024      	beq.n	80012bc <SystemCoreClockUpdate+0x138>
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	2b02      	cmp	r3, #2
 8001276:	d143      	bne.n	8001300 <SystemCoreClockUpdate+0x17c>
    {
      switch (pllsource)
      {
      case 0x02:  /* HSE used as PLL1 clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (pllfracn/(float_t)0x2000) +(float_t)1 );
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	ee07 3a90 	vmov	s15, r3
 800127e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001282:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80013e4 <SystemCoreClockUpdate+0x260>
 8001286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800128a:	4b52      	ldr	r3, [pc, #328]	@ (80013d4 <SystemCoreClockUpdate+0x250>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001292:	ee07 3a90 	vmov	s15, r3
 8001296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800129a:	ed97 6a06 	vldr	s12, [r7, #24]
 800129e:	eddf 5a52 	vldr	s11, [pc, #328]	@ 80013e8 <SystemCoreClockUpdate+0x264>
 80012a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80012a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80012aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80012ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80012b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012b6:	edc7 7a05 	vstr	s15, [r7, #20]
        break;
 80012ba:	e04f      	b.n	800135c <SystemCoreClockUpdate+0x1d8>

      case 0x01:  /* CSI used as PLL1 clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (pllfracn/(float_t)0x2000) +(float_t)1 );
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	ee07 3a90 	vmov	s15, r3
 80012c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012c6:	eddf 6a49 	vldr	s13, [pc, #292]	@ 80013ec <SystemCoreClockUpdate+0x268>
 80012ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80012ce:	4b41      	ldr	r3, [pc, #260]	@ (80013d4 <SystemCoreClockUpdate+0x250>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012d6:	ee07 3a90 	vmov	s15, r3
 80012da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80012de:	ed97 6a06 	vldr	s12, [r7, #24]
 80012e2:	eddf 5a41 	vldr	s11, [pc, #260]	@ 80013e8 <SystemCoreClockUpdate+0x264>
 80012e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80012ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80012ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80012f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80012f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012fa:	edc7 7a05 	vstr	s15, [r7, #20]
        break;
 80012fe:	e02d      	b.n	800135c <SystemCoreClockUpdate+0x1d8>

      case 0x00:  /* HSI used as PLL1 clock source */
      default:
        hsivalue = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV) >> RCC_CR_HSIDIV_Pos));
 8001300:	4b34      	ldr	r3, [pc, #208]	@ (80013d4 <SystemCoreClockUpdate+0x250>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	08db      	lsrs	r3, r3, #3
 8001306:	f003 0303 	and.w	r3, r3, #3
 800130a:	4a33      	ldr	r2, [pc, #204]	@ (80013d8 <SystemCoreClockUpdate+0x254>)
 800130c:	fa22 f303 	lsr.w	r3, r2, r3
 8001310:	60bb      	str	r3, [r7, #8]
        pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (pllfracn/(float_t)0x2000) +(float_t)1 );
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	ee07 3a90 	vmov	s15, r3
 8001318:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	ee07 3a90 	vmov	s15, r3
 8001322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800132a:	4b2a      	ldr	r3, [pc, #168]	@ (80013d4 <SystemCoreClockUpdate+0x250>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001332:	ee07 3a90 	vmov	s15, r3
 8001336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800133a:	ed97 6a06 	vldr	s12, [r7, #24]
 800133e:	eddf 5a2a 	vldr	s11, [pc, #168]	@ 80013e8 <SystemCoreClockUpdate+0x264>
 8001342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800134a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800134e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001356:	edc7 7a05 	vstr	s15, [r7, #20]
        break;
 800135a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVP) >> RCC_PLL1DIVR1_DIVP_Pos) + 1U ) ;
 800135c:	4b1d      	ldr	r3, [pc, #116]	@ (80013d4 <SystemCoreClockUpdate+0x250>)
 800135e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001360:	0a5b      	lsrs	r3, r3, #9
 8001362:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001366:	3301      	adds	r3, #1
 8001368:	607b      	str	r3, [r7, #4]
      sysclk =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	ee07 3a90 	vmov	s15, r3
 8001370:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001374:	edd7 6a05 	vldr	s13, [r7, #20]
 8001378:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800137c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001380:	ee17 3a90 	vmov	r3, s15
 8001384:	61fb      	str	r3, [r7, #28]
    }
    else
    {
      sysclk = 0U;
    }
    break;
 8001386:	e00c      	b.n	80013a2 <SystemCoreClockUpdate+0x21e>
      sysclk = 0U;
 8001388:	2300      	movs	r3, #0
 800138a:	61fb      	str	r3, [r7, #28]
    break;
 800138c:	e009      	b.n	80013a2 <SystemCoreClockUpdate+0x21e>

  default:  /* Unexpected, default to HSI used as system clock source (default after reset) */
    sysclk = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV) >> RCC_CR_HSIDIV_Pos));
 800138e:	4b11      	ldr	r3, [pc, #68]	@ (80013d4 <SystemCoreClockUpdate+0x250>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	08db      	lsrs	r3, r3, #3
 8001394:	f003 0303 	and.w	r3, r3, #3
 8001398:	4a0f      	ldr	r2, [pc, #60]	@ (80013d8 <SystemCoreClockUpdate+0x254>)
 800139a:	fa22 f303 	lsr.w	r3, r2, r3
 800139e:	61fb      	str	r3, [r7, #28]
    break;
 80013a0:	bf00      	nop
  }

  /* system clock frequency : CM7 CPU frequency  */
  core_presc = (RCC->CDCFGR & RCC_CDCFGR_CPRE);
 80013a2:	4b0c      	ldr	r3, [pc, #48]	@ (80013d4 <SystemCoreClockUpdate+0x250>)
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	f003 030f 	and.w	r3, r3, #15
 80013aa:	603b      	str	r3, [r7, #0]
  if (core_presc >= 8U)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	2b07      	cmp	r3, #7
 80013b0:	d907      	bls.n	80013c2 <SystemCoreClockUpdate+0x23e>
  {
    SystemCoreClock = (sysclk >> (core_presc - RCC_CDCFGR_CPRE_3 + 1U));
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	3b07      	subs	r3, #7
 80013b6:	69fa      	ldr	r2, [r7, #28]
 80013b8:	fa22 f303 	lsr.w	r3, r2, r3
 80013bc:	4a0c      	ldr	r2, [pc, #48]	@ (80013f0 <SystemCoreClockUpdate+0x26c>)
 80013be:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SystemCoreClock = sysclk;
  }
}
 80013c0:	e002      	b.n	80013c8 <SystemCoreClockUpdate+0x244>
    SystemCoreClock = sysclk;
 80013c2:	4a0b      	ldr	r2, [pc, #44]	@ (80013f0 <SystemCoreClockUpdate+0x26c>)
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	6013      	str	r3, [r2, #0]
}
 80013c8:	bf00      	nop
 80013ca:	3724      	adds	r7, #36	@ 0x24
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	58024400 	.word	0x58024400
 80013d8:	03d09000 	.word	0x03d09000
 80013dc:	003d0900 	.word	0x003d0900
 80013e0:	016e3600 	.word	0x016e3600
 80013e4:	4bb71b00 	.word	0x4bb71b00
 80013e8:	46000000 	.word	0x46000000
 80013ec:	4a742400 	.word	0x4a742400
 80013f0:	24000000 	.word	0x24000000

080013f4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013f8:	4b22      	ldr	r3, [pc, #136]	@ (8001484 <MX_USART3_UART_Init+0x90>)
 80013fa:	4a23      	ldr	r2, [pc, #140]	@ (8001488 <MX_USART3_UART_Init+0x94>)
 80013fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 80013fe:	4b21      	ldr	r3, [pc, #132]	@ (8001484 <MX_USART3_UART_Init+0x90>)
 8001400:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8001404:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001406:	4b1f      	ldr	r3, [pc, #124]	@ (8001484 <MX_USART3_UART_Init+0x90>)
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800140c:	4b1d      	ldr	r3, [pc, #116]	@ (8001484 <MX_USART3_UART_Init+0x90>)
 800140e:	2200      	movs	r2, #0
 8001410:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001412:	4b1c      	ldr	r3, [pc, #112]	@ (8001484 <MX_USART3_UART_Init+0x90>)
 8001414:	2200      	movs	r2, #0
 8001416:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001418:	4b1a      	ldr	r3, [pc, #104]	@ (8001484 <MX_USART3_UART_Init+0x90>)
 800141a:	220c      	movs	r2, #12
 800141c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800141e:	4b19      	ldr	r3, [pc, #100]	@ (8001484 <MX_USART3_UART_Init+0x90>)
 8001420:	2200      	movs	r2, #0
 8001422:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001424:	4b17      	ldr	r3, [pc, #92]	@ (8001484 <MX_USART3_UART_Init+0x90>)
 8001426:	2200      	movs	r2, #0
 8001428:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800142a:	4b16      	ldr	r3, [pc, #88]	@ (8001484 <MX_USART3_UART_Init+0x90>)
 800142c:	2200      	movs	r2, #0
 800142e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001430:	4b14      	ldr	r3, [pc, #80]	@ (8001484 <MX_USART3_UART_Init+0x90>)
 8001432:	2200      	movs	r2, #0
 8001434:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001436:	4b13      	ldr	r3, [pc, #76]	@ (8001484 <MX_USART3_UART_Init+0x90>)
 8001438:	2200      	movs	r2, #0
 800143a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800143c:	4811      	ldr	r0, [pc, #68]	@ (8001484 <MX_USART3_UART_Init+0x90>)
 800143e:	f008 fa42 	bl	80098c6 <HAL_UART_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001448:	f7ff fc74 	bl	8000d34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800144c:	2100      	movs	r1, #0
 800144e:	480d      	ldr	r0, [pc, #52]	@ (8001484 <MX_USART3_UART_Init+0x90>)
 8001450:	f009 f879 	bl	800a546 <HAL_UARTEx_SetTxFifoThreshold>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800145a:	f7ff fc6b 	bl	8000d34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800145e:	2100      	movs	r1, #0
 8001460:	4808      	ldr	r0, [pc, #32]	@ (8001484 <MX_USART3_UART_Init+0x90>)
 8001462:	f009 f8ae 	bl	800a5c2 <HAL_UARTEx_SetRxFifoThreshold>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800146c:	f7ff fc62 	bl	8000d34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001470:	4804      	ldr	r0, [pc, #16]	@ (8001484 <MX_USART3_UART_Init+0x90>)
 8001472:	f009 f82f 	bl	800a4d4 <HAL_UARTEx_DisableFifoMode>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800147c:	f7ff fc5a 	bl	8000d34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}
 8001484:	240003e8 	.word	0x240003e8
 8001488:	40004800 	.word	0x40004800

0800148c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b0aa      	sub	sp, #168	@ 0xa8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001494:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014a4:	f107 0310 	add.w	r3, r7, #16
 80014a8:	2284      	movs	r2, #132	@ 0x84
 80014aa:	2100      	movs	r1, #0
 80014ac:	4618      	mov	r0, r3
 80014ae:	f00d fc3f 	bl	800ed30 <memset>
  if(uartHandle->Instance==USART3)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a23      	ldr	r2, [pc, #140]	@ (8001544 <HAL_UART_MspInit+0xb8>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d13f      	bne.n	800153c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART234578;
 80014bc:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80014c0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PCLK1;
 80014c2:	2300      	movs	r3, #0
 80014c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014c8:	f107 0310 	add.w	r3, r7, #16
 80014cc:	4618      	mov	r0, r3
 80014ce:	f007 fa51 	bl	8008974 <HAL_RCCEx_PeriphCLKConfig>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80014d8:	f7ff fc2c 	bl	8000d34 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80014dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001548 <HAL_UART_MspInit+0xbc>)
 80014de:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80014e2:	4a19      	ldr	r2, [pc, #100]	@ (8001548 <HAL_UART_MspInit+0xbc>)
 80014e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014e8:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80014ec:	4b16      	ldr	r3, [pc, #88]	@ (8001548 <HAL_UART_MspInit+0xbc>)
 80014ee:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014f6:	4b14      	ldr	r3, [pc, #80]	@ (8001548 <HAL_UART_MspInit+0xbc>)
 80014f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80014fc:	4a12      	ldr	r2, [pc, #72]	@ (8001548 <HAL_UART_MspInit+0xbc>)
 80014fe:	f043 0308 	orr.w	r3, r3, #8
 8001502:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001506:	4b10      	ldr	r3, [pc, #64]	@ (8001548 <HAL_UART_MspInit+0xbc>)
 8001508:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001510:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001514:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001518:	2302      	movs	r3, #2
 800151a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001524:	2300      	movs	r3, #0
 8001526:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800152a:	2307      	movs	r3, #7
 800152c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001530:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001534:	4619      	mov	r1, r3
 8001536:	4805      	ldr	r0, [pc, #20]	@ (800154c <HAL_UART_MspInit+0xc0>)
 8001538:	f003 fd0c 	bl	8004f54 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800153c:	bf00      	nop
 800153e:	37a8      	adds	r7, #168	@ 0xa8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40004800 	.word	0x40004800
 8001548:	58024400 	.word	0x58024400
 800154c:	58020c00 	.word	0x58020c00

08001550 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001550:	480d      	ldr	r0, [pc, #52]	@ (8001588 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001552:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001554:	f7ff fe00 	bl	8001158 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001558:	480c      	ldr	r0, [pc, #48]	@ (800158c <LoopForever+0x6>)
  ldr r1, =_edata
 800155a:	490d      	ldr	r1, [pc, #52]	@ (8001590 <LoopForever+0xa>)
  ldr r2, =_sidata
 800155c:	4a0d      	ldr	r2, [pc, #52]	@ (8001594 <LoopForever+0xe>)
  movs r3, #0
 800155e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001560:	e002      	b.n	8001568 <LoopCopyDataInit>

08001562 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001562:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001564:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001566:	3304      	adds	r3, #4

08001568 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001568:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800156a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800156c:	d3f9      	bcc.n	8001562 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800156e:	4a0a      	ldr	r2, [pc, #40]	@ (8001598 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001570:	4c0a      	ldr	r4, [pc, #40]	@ (800159c <LoopForever+0x16>)
  movs r3, #0
 8001572:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001574:	e001      	b.n	800157a <LoopFillZerobss>

08001576 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001576:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001578:	3204      	adds	r2, #4

0800157a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800157a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800157c:	d3fb      	bcc.n	8001576 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800157e:	f00d fbf5 	bl	800ed6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001582:	f7ff fbbd 	bl	8000d00 <main>

08001586 <LoopForever>:

LoopForever:
  b LoopForever
 8001586:	e7fe      	b.n	8001586 <LoopForever>
  ldr   r0, =_estack
 8001588:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800158c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001590:	240000e8 	.word	0x240000e8
  ldr r2, =_sidata
 8001594:	0800eea8 	.word	0x0800eea8
  ldr r2, =_sbss
 8001598:	240000e8 	.word	0x240000e8
  ldr r4, =_ebss
 800159c:	24000dec 	.word	0x24000dec

080015a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015a0:	e7fe      	b.n	80015a0 <ADC1_2_IRQHandler>
	...

080015a4 <TCPP0203_RegisterBusIO>:
  * @brief  Register Bus Io to component
  * @param  Component object pointer
  * @retval Status of execution
  */
int32_t TCPP0203_RegisterBusIO(TCPP0203_Object_t *pObj, TCPP0203_IO_t *pIO)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d103      	bne.n	80015bc <TCPP0203_RegisterBusIO+0x18>
  {
    ret = TCPP0203_ERROR;
 80015b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	e02c      	b.n	8001616 <TCPP0203_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685a      	ldr	r2, [r3, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	891a      	ldrh	r2, [r3, #8]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	68da      	ldr	r2, [r3, #12]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	691a      	ldr	r2, [r3, #16]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	695a      	ldr	r2, [r3, #20]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = TCPP0203_ReadRegWrap;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a0c      	ldr	r2, [pc, #48]	@ (8001620 <TCPP0203_RegisterBusIO+0x7c>)
 80015f0:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = TCPP0203_WriteRegWrap;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001624 <TCPP0203_RegisterBusIO+0x80>)
 80015f6:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	621a      	str	r2, [r3, #32]

    if (pObj->IO.Init != NULL)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d004      	beq.n	8001610 <TCPP0203_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4798      	blx	r3
 800160c:	60f8      	str	r0, [r7, #12]
 800160e:	e002      	b.n	8001616 <TCPP0203_RegisterBusIO+0x72>
    }
    else
    {
      ret = TCPP0203_ERROR;
 8001610:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001614:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001616:	68fb      	ldr	r3, [r7, #12]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	08001c3f 	.word	0x08001c3f
 8001624:	08001c75 	.word	0x08001c75

08001628 <TCPP0203_Init>:
  * @brief  Initializes the TCPP0203 interface
  * @param  pObj Pointer to component object
  * @retval Component status (TCPP0203_OK / TCPP0203_ERROR)
  */
int32_t TCPP0203_Init(TCPP0203_Object_t *pObj)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  int32_t ret = 0;
 8001630:	2300      	movs	r3, #0
 8001632:	60fb      	str	r3, [r7, #12]
  uint8_t tmp;

  if (pObj->IsInitialized == 0U)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800163a:	2b00      	cmp	r3, #0
 800163c:	d11d      	bne.n	800167a <TCPP0203_Init+0x52>
  {
    /* Read TCPP Device type */
    ret += tcpp0203_read_reg(&pObj->Ctx, TCPP0203_READ_REG2, &tmp, 1);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f103 0018 	add.w	r0, r3, #24
 8001644:	f107 020b 	add.w	r2, r7, #11
 8001648:	2301      	movs	r3, #1
 800164a:	2102      	movs	r1, #2
 800164c:	f000 fb63 	bl	8001d16 <tcpp0203_read_reg>
 8001650:	4602      	mov	r2, r0
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	4413      	add	r3, r2
 8001656:	60fb      	str	r3, [r7, #12]

    if (ret == TCPP0203_OK)
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d106      	bne.n	800166c <TCPP0203_Init+0x44>
    {
      TCPP0203_DeviceType = (tmp & TCPP0203_DEVICE_TYPE_MSK);
 800165e:	7afb      	ldrb	r3, [r7, #11]
 8001660:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001664:	b2da      	uxtb	r2, r3
 8001666:	4b0a      	ldr	r3, [pc, #40]	@ (8001690 <TCPP0203_Init+0x68>)
 8001668:	701a      	strb	r2, [r3, #0]
 800166a:	e002      	b.n	8001672 <TCPP0203_Init+0x4a>
    }
    else
    {
      TCPP0203_DeviceType = TCPP0203_DEVICE_TYPE_02;
 800166c:	4b08      	ldr	r3, [pc, #32]	@ (8001690 <TCPP0203_Init+0x68>)
 800166e:	2280      	movs	r2, #128	@ 0x80
 8001670:	701a      	strb	r2, [r3, #0]
    }
    pObj->IsInitialized = 1U;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2201      	movs	r2, #1
 8001676:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  if (ret != TCPP0203_OK)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d002      	beq.n	8001686 <TCPP0203_Init+0x5e>
  {
    ret = TCPP0203_ERROR;
 8001680:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001684:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001686:	68fb      	ldr	r3, [r7, #12]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	2400047c 	.word	0x2400047c

08001694 <TCPP0203_DeInit>:
  * @brief  Deinitializes the TCPP0203 interface
  * @param  pObj Pointer to component object
  * @retval Component status (TCPP0203_OK / TCPP0203_ERROR)
  */
int32_t TCPP0203_DeInit(TCPP0203_Object_t *pObj)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  if (pObj->IsInitialized == 1U)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d106      	bne.n	80016b4 <TCPP0203_DeInit+0x20>
  {
    /* De-Initialize IO BUS layer */
    pObj->IO.DeInit();
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	4798      	blx	r3

    pObj->IsInitialized = 0U;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return TCPP0203_OK;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <TCPP0203_Reset>:
  * @brief  Resets TCPP0203 register (Reg0)
  * @param  pObj Pointer to component object
  * @retval Component status (TCPP0203_OK / TCPP0203_ERROR)
  */
int32_t TCPP0203_Reset(TCPP0203_Object_t *pObj)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b084      	sub	sp, #16
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
  int32_t ret = TCPP0203_OK;
 80016c6:	2300      	movs	r3, #0
 80016c8:	60fb      	str	r3, [r7, #12]
  uint8_t tmp = TCPP0203_REG0_RST_VALUE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	72fb      	strb	r3, [r7, #11]

  /* Write reset values in Reg0 register */
  if (tcpp0203_write_reg(&pObj->Ctx, TCPP0203_PROG_CTRL, &tmp, 1) != TCPP0203_OK)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f103 0018 	add.w	r0, r3, #24
 80016d4:	f107 020b 	add.w	r2, r7, #11
 80016d8:	2301      	movs	r3, #1
 80016da:	2100      	movs	r1, #0
 80016dc:	f000 fb32 	bl	8001d44 <tcpp0203_write_reg>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d002      	beq.n	80016ec <TCPP0203_Reset+0x2e>
  {
    ret = TCPP0203_ERROR;
 80016e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016ea:	60fb      	str	r3, [r7, #12]
#if defined(TCPP0203_REGISTER_CONSISTENCY_CHECK)
  Reg0_Expected_Value = TCPP0203_REG0_RST_VALUE;
  Reg1_LastRead_Value = TCPP0203_REG0_RST_VALUE;
#endif /* TCPP0203_REGISTER_CONSISTENCY_CHECK */

  return ret;
 80016ec:	68fb      	ldr	r3, [r7, #12]
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <TCPP0203_SetVConnSwitch>:
  *          @arg TCPP0203_VCONN_SWITCH_CC1  VConn closed on CC1
  *          @arg TCPP0203_VCONN_SWITCH_CC2  VConn closed on CC2
  * @retval Component status
  */
int32_t TCPP0203_SetVConnSwitch(TCPP0203_Object_t *pObj, uint8_t VConnSwitch)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b084      	sub	sp, #16
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
 80016fe:	460b      	mov	r3, r1
 8001700:	70fb      	strb	r3, [r7, #3]
  int32_t ret = TCPP0203_OK;
 8001702:	2300      	movs	r3, #0
 8001704:	60fb      	str	r3, [r7, #12]

  if ((VConnSwitch != TCPP0203_VCONN_SWITCH_OPEN)
 8001706:	78fb      	ldrb	r3, [r7, #3]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d009      	beq.n	8001720 <TCPP0203_SetVConnSwitch+0x2a>
      && (VConnSwitch != TCPP0203_VCONN_SWITCH_CC1)
 800170c:	78fb      	ldrb	r3, [r7, #3]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d006      	beq.n	8001720 <TCPP0203_SetVConnSwitch+0x2a>
      && (VConnSwitch != TCPP0203_VCONN_SWITCH_CC2))
 8001712:	78fb      	ldrb	r3, [r7, #3]
 8001714:	2b02      	cmp	r3, #2
 8001716:	d003      	beq.n	8001720 <TCPP0203_SetVConnSwitch+0x2a>
  {
    ret = TCPP0203_ERROR;
 8001718:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	e009      	b.n	8001734 <TCPP0203_SetVConnSwitch+0x3e>
  }
  else
  {
    /* Update VConn switch setting in Writing register Reg0 */
    ret += TCPP0203_ModifyReg0(pObj, VConnSwitch, TCPP0203_VCONN_SWITCH_MSK);
 8001720:	78fb      	ldrb	r3, [r7, #3]
 8001722:	2203      	movs	r2, #3
 8001724:	4619      	mov	r1, r3
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f000 fabf 	bl	8001caa <TCPP0203_ModifyReg0>
 800172c:	4602      	mov	r2, r0
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	4413      	add	r3, r2
 8001732:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001734:	68fb      	ldr	r3, [r7, #12]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <TCPP0203_SetGateDriverProvider>:
  *          @arg TCPP0203_GD_PROVIDER_SWITCH_OPEN    GDP Switch Load Open
  *          @arg TCPP0203_GD_PROVIDER_SWITCH_CLOSED  GDP Switch Load closed
  * @retval Component status
  */
int32_t TCPP0203_SetGateDriverProvider(TCPP0203_Object_t *pObj, uint8_t GateDriverProvider)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b084      	sub	sp, #16
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
 8001746:	460b      	mov	r3, r1
 8001748:	70fb      	strb	r3, [r7, #3]
  int32_t ret = TCPP0203_OK;
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]

  if ((GateDriverProvider != TCPP0203_GD_PROVIDER_SWITCH_OPEN)
 800174e:	78fb      	ldrb	r3, [r7, #3]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d006      	beq.n	8001762 <TCPP0203_SetGateDriverProvider+0x24>
      && (GateDriverProvider != TCPP0203_GD_PROVIDER_SWITCH_CLOSED))
 8001754:	78fb      	ldrb	r3, [r7, #3]
 8001756:	2b04      	cmp	r3, #4
 8001758:	d003      	beq.n	8001762 <TCPP0203_SetGateDriverProvider+0x24>
  {
    ret = TCPP0203_ERROR;
 800175a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	e01a      	b.n	8001798 <TCPP0203_SetGateDriverProvider+0x5a>
  }
  else
  {
    /* Update GDP Switch Load setting in Writing register Reg0 */
    if (GateDriverProvider == TCPP0203_GD_PROVIDER_SWITCH_CLOSED)
 8001762:	78fb      	ldrb	r3, [r7, #3]
 8001764:	2b04      	cmp	r3, #4
 8001766:	d10d      	bne.n	8001784 <TCPP0203_SetGateDriverProvider+0x46>
    {
      /* If Gate Driver Provider is to be closed, Gate Driver Consumer should be open */
      ret += TCPP0203_ModifyReg0(pObj, (GateDriverProvider | TCPP0203_GD_CONSUMER_SWITCH_OPEN),
 8001768:	78fb      	ldrb	r3, [r7, #3]
 800176a:	f043 0308 	orr.w	r3, r3, #8
 800176e:	b2db      	uxtb	r3, r3
 8001770:	220c      	movs	r2, #12
 8001772:	4619      	mov	r1, r3
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f000 fa98 	bl	8001caa <TCPP0203_ModifyReg0>
 800177a:	4602      	mov	r2, r0
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4413      	add	r3, r2
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	e009      	b.n	8001798 <TCPP0203_SetGateDriverProvider+0x5a>
                                 (TCPP0203_GD_PROVIDER_SWITCH_MSK | TCPP0203_GD_CONSUMER_SWITCH_MSK));
    }
    else
    {
      ret += TCPP0203_ModifyReg0(pObj, GateDriverProvider, TCPP0203_GD_PROVIDER_SWITCH_MSK);
 8001784:	78fb      	ldrb	r3, [r7, #3]
 8001786:	2204      	movs	r2, #4
 8001788:	4619      	mov	r1, r3
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 fa8d 	bl	8001caa <TCPP0203_ModifyReg0>
 8001790:	4602      	mov	r2, r0
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	4413      	add	r3, r2
 8001796:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001798:	68fb      	ldr	r3, [r7, #12]
}
 800179a:	4618      	mov	r0, r3
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
	...

080017a4 <TCPP0203_SetGateDriverConsumer>:
  *          @arg TCPP0203_GD_CONSUMER_SWITCH_OPEN    GDC Switch Load Open
  *          @arg TCPP0203_GD_CONSUMER_SWITCH_CLOSED  GDC Switch Load closed
  * @retval Component status
  */
int32_t TCPP0203_SetGateDriverConsumer(TCPP0203_Object_t *pObj, uint8_t GateDriverConsumer)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	460b      	mov	r3, r1
 80017ae:	70fb      	strb	r3, [r7, #3]
  int32_t ret = TCPP0203_OK;
 80017b0:	2300      	movs	r3, #0
 80017b2:	60fb      	str	r3, [r7, #12]

  /* Check if TCPP type is TCPP03. Otherwise, return error */
  if (TCPP0203_DeviceType != TCPP0203_DEVICE_TYPE_03)
 80017b4:	4b16      	ldr	r3, [pc, #88]	@ (8001810 <TCPP0203_SetGateDriverConsumer+0x6c>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d002      	beq.n	80017c2 <TCPP0203_SetGateDriverConsumer+0x1e>
  {
    return (TCPP0203_ERROR);
 80017bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017c0:	e022      	b.n	8001808 <TCPP0203_SetGateDriverConsumer+0x64>
  }

  if ((GateDriverConsumer != TCPP0203_GD_CONSUMER_SWITCH_OPEN)
 80017c2:	78fb      	ldrb	r3, [r7, #3]
 80017c4:	2b08      	cmp	r3, #8
 80017c6:	d006      	beq.n	80017d6 <TCPP0203_SetGateDriverConsumer+0x32>
      && (GateDriverConsumer != TCPP0203_GD_CONSUMER_SWITCH_CLOSED))
 80017c8:	78fb      	ldrb	r3, [r7, #3]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d003      	beq.n	80017d6 <TCPP0203_SetGateDriverConsumer+0x32>
  {
    ret = TCPP0203_ERROR;
 80017ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	e017      	b.n	8001806 <TCPP0203_SetGateDriverConsumer+0x62>
  }
  else
  {
    /* Update GDC Switch Load setting in Writing register Reg0 */
    if (GateDriverConsumer == TCPP0203_GD_CONSUMER_SWITCH_CLOSED)
 80017d6:	78fb      	ldrb	r3, [r7, #3]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d10a      	bne.n	80017f2 <TCPP0203_SetGateDriverConsumer+0x4e>
    {
      /* If Gate Driver Consumer is to be closed, Gate Driver Provider should be open */
      ret += TCPP0203_ModifyReg0(pObj, (GateDriverConsumer | TCPP0203_GD_PROVIDER_SWITCH_OPEN),
 80017dc:	78fb      	ldrb	r3, [r7, #3]
 80017de:	220c      	movs	r2, #12
 80017e0:	4619      	mov	r1, r3
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f000 fa61 	bl	8001caa <TCPP0203_ModifyReg0>
 80017e8:	4602      	mov	r2, r0
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	4413      	add	r3, r2
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	e009      	b.n	8001806 <TCPP0203_SetGateDriverConsumer+0x62>
                                 (TCPP0203_GD_PROVIDER_SWITCH_MSK | TCPP0203_GD_CONSUMER_SWITCH_MSK));
    }
    else
    {
      ret += TCPP0203_ModifyReg0(pObj, GateDriverConsumer, TCPP0203_GD_CONSUMER_SWITCH_MSK);
 80017f2:	78fb      	ldrb	r3, [r7, #3]
 80017f4:	2208      	movs	r2, #8
 80017f6:	4619      	mov	r1, r3
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f000 fa56 	bl	8001caa <TCPP0203_ModifyReg0>
 80017fe:	4602      	mov	r2, r0
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	4413      	add	r3, r2
 8001804:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001806:	68fb      	ldr	r3, [r7, #12]
}
 8001808:	4618      	mov	r0, r3
 800180a:	3710      	adds	r7, #16
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	2400047c 	.word	0x2400047c

08001814 <TCPP0203_SetPowerMode>:
  *          @arg TCPP0203_POWER_MODE_LOWPOWER     Low Power
  *          @arg TCPP0203_POWER_MODE_NORMAL       Normal
  * @retval Component status
  */
int32_t TCPP0203_SetPowerMode(TCPP0203_Object_t *pObj, uint8_t PowerMode)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	460b      	mov	r3, r1
 800181e:	70fb      	strb	r3, [r7, #3]
  int32_t ret = TCPP0203_OK;
 8001820:	2300      	movs	r3, #0
 8001822:	60fb      	str	r3, [r7, #12]

  if ((PowerMode != TCPP0203_POWER_MODE_HIBERNATE)
 8001824:	78fb      	ldrb	r3, [r7, #3]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d009      	beq.n	800183e <TCPP0203_SetPowerMode+0x2a>
      && (PowerMode != TCPP0203_POWER_MODE_LOWPOWER)
 800182a:	78fb      	ldrb	r3, [r7, #3]
 800182c:	2b20      	cmp	r3, #32
 800182e:	d006      	beq.n	800183e <TCPP0203_SetPowerMode+0x2a>
      && (PowerMode != TCPP0203_POWER_MODE_NORMAL))
 8001830:	78fb      	ldrb	r3, [r7, #3]
 8001832:	2b10      	cmp	r3, #16
 8001834:	d003      	beq.n	800183e <TCPP0203_SetPowerMode+0x2a>
  {
    ret = TCPP0203_ERROR;
 8001836:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	e009      	b.n	8001852 <TCPP0203_SetPowerMode+0x3e>
  }
  else
  {
    /* Update Power Mode setting in Writing register Reg0 */
    ret += TCPP0203_ModifyReg0(pObj, PowerMode, TCPP0203_POWER_MODE_MSK);
 800183e:	78fb      	ldrb	r3, [r7, #3]
 8001840:	2230      	movs	r2, #48	@ 0x30
 8001842:	4619      	mov	r1, r3
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f000 fa30 	bl	8001caa <TCPP0203_ModifyReg0>
 800184a:	4602      	mov	r2, r0
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	4413      	add	r3, r2
 8001850:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001852:	68fb      	ldr	r3, [r7, #12]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <TCPP0203_SetVBusDischarge>:
  *          @arg TCPP0203_VBUS_DISCHARGE_OFF    VBUS Discharge Off
  *          @arg TCPP0203_VBUS_DISCHARGE_ON     VBUS Discharge On
  * @retval Component status
  */
int32_t TCPP0203_SetVBusDischarge(TCPP0203_Object_t *pObj, uint8_t VBusDischarge)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	70fb      	strb	r3, [r7, #3]
  int32_t ret = TCPP0203_OK;
 8001868:	2300      	movs	r3, #0
 800186a:	60fb      	str	r3, [r7, #12]

  if ((VBusDischarge != TCPP0203_VBUS_DISCHARGE_OFF)
 800186c:	78fb      	ldrb	r3, [r7, #3]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d006      	beq.n	8001880 <TCPP0203_SetVBusDischarge+0x24>
      && (VBusDischarge != TCPP0203_VBUS_DISCHARGE_ON))
 8001872:	78fb      	ldrb	r3, [r7, #3]
 8001874:	2b40      	cmp	r3, #64	@ 0x40
 8001876:	d003      	beq.n	8001880 <TCPP0203_SetVBusDischarge+0x24>
  {
    ret = TCPP0203_ERROR;
 8001878:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	e009      	b.n	8001894 <TCPP0203_SetVBusDischarge+0x38>
  }
  else
  {
    /* Update VBUS Discharge setting in Writing register Reg0 */
    ret += TCPP0203_ModifyReg0(pObj, VBusDischarge, TCPP0203_VBUS_DISCHARGE_MSK);
 8001880:	78fb      	ldrb	r3, [r7, #3]
 8001882:	2240      	movs	r2, #64	@ 0x40
 8001884:	4619      	mov	r1, r3
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f000 fa0f 	bl	8001caa <TCPP0203_ModifyReg0>
 800188c:	4602      	mov	r2, r0
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	4413      	add	r3, r2
 8001892:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001894:	68fb      	ldr	r3, [r7, #12]
}
 8001896:	4618      	mov	r0, r3
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <TCPP0203_SetVConnDischarge>:
  *          @arg TCPP0203_VCONN_DISCHARGE_OFF    VConn Discharge Off
  *          @arg TCPP0203_VCONN_DISCHARGE_ON     VConn Discharge On
  * @retval Component status
  */
int32_t TCPP0203_SetVConnDischarge(TCPP0203_Object_t *pObj, uint8_t VConnDischarge)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b084      	sub	sp, #16
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
 80018a6:	460b      	mov	r3, r1
 80018a8:	70fb      	strb	r3, [r7, #3]
  int32_t ret = TCPP0203_OK;
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]

  if ((VConnDischarge != TCPP0203_VCONN_DISCHARGE_OFF)
 80018ae:	78fb      	ldrb	r3, [r7, #3]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d006      	beq.n	80018c2 <TCPP0203_SetVConnDischarge+0x24>
      && (VConnDischarge != TCPP0203_VCONN_DISCHARGE_ON))
 80018b4:	78fb      	ldrb	r3, [r7, #3]
 80018b6:	2b80      	cmp	r3, #128	@ 0x80
 80018b8:	d003      	beq.n	80018c2 <TCPP0203_SetVConnDischarge+0x24>
  {
    ret = TCPP0203_ERROR;
 80018ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	e009      	b.n	80018d6 <TCPP0203_SetVConnDischarge+0x38>
  }
  else
  {
    /* Update VConn Discharge setting in Writing register Reg0 */
    ret += TCPP0203_ModifyReg0(pObj, VConnDischarge, TCPP0203_VCONN_DISCHARGE_MSK);
 80018c2:	78fb      	ldrb	r3, [r7, #3]
 80018c4:	2280      	movs	r2, #128	@ 0x80
 80018c6:	4619      	mov	r1, r3
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f000 f9ee 	bl	8001caa <TCPP0203_ModifyReg0>
 80018ce:	4602      	mov	r2, r0
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	4413      	add	r3, r2
 80018d4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80018d6:	68fb      	ldr	r3, [r7, #12]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <TCPP0203_GetVConnSwitchAck>:
  *          @arg TCPP0203_VCONN_SWITCH_CC1  VConn closed on CC1 Ack
  *          @arg TCPP0203_VCONN_SWITCH_CC2  VConn closed on CC2 Ack
  * @retval Component status
  */
int32_t TCPP0203_GetVConnSwitchAck(TCPP0203_Object_t *pObj, uint8_t *pVConnSwitchAck)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_ACK_REG, &tmp, 1);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f103 0018 	add.w	r0, r3, #24
 80018f0:	f107 020b 	add.w	r2, r7, #11
 80018f4:	2301      	movs	r3, #1
 80018f6:	2101      	movs	r1, #1
 80018f8:	f000 fa0d 	bl	8001d16 <tcpp0203_read_reg>
 80018fc:	60f8      	str	r0, [r7, #12]
  *pVConnSwitchAck = (tmp & TCPP0203_VCONN_SWITCH_ACK_MSK);
 80018fe:	7afb      	ldrb	r3, [r7, #11]
 8001900:	f003 0303 	and.w	r3, r3, #3
 8001904:	b2da      	uxtb	r2, r3
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	701a      	strb	r2, [r3, #0]

  return ret;
 800190a:	68fb      	ldr	r3, [r7, #12]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3710      	adds	r7, #16
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <TCPP0203_GetGateDriverProviderAck>:
  *          @arg TCPP0203_GD_PROVIDER_SWITCH_ACK_OPEN    Gate Driver Provider Open Ack
  *          @arg TCPP0203_GD_PROVIDER_SWITCH_ACK_CLOSED  Gate Driver Provider Closed Ack
  * @retval Component status
  */
int32_t TCPP0203_GetGateDriverProviderAck(TCPP0203_Object_t *pObj, uint8_t *pGateDriverProviderAck)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_ACK_REG, &tmp, 1);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f103 0018 	add.w	r0, r3, #24
 8001924:	f107 020b 	add.w	r2, r7, #11
 8001928:	2301      	movs	r3, #1
 800192a:	2101      	movs	r1, #1
 800192c:	f000 f9f3 	bl	8001d16 <tcpp0203_read_reg>
 8001930:	60f8      	str	r0, [r7, #12]
  *pGateDriverProviderAck = (tmp & TCPP0203_GD_PROVIDER_SWITCH_ACK_MSK);
 8001932:	7afb      	ldrb	r3, [r7, #11]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	b2da      	uxtb	r2, r3
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	701a      	strb	r2, [r3, #0]

  return ret;
 800193e:	68fb      	ldr	r3, [r7, #12]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <TCPP0203_GetGateDriverConsumerAck>:
  *          @arg TCPP0203_GD_CONSUMER_SWITCH_ACK_OPEN    Gate Driver Consumer Open Ack
  *          @arg TCPP0203_GD_CONSUMER_SWITCH_ACK_CLOSED  Gate Driver Consumer Closed Ack
  * @retval Component status
  */
int32_t TCPP0203_GetGateDriverConsumerAck(TCPP0203_Object_t *pObj, uint8_t *pGateDriverConsumerAck)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  /* Check if TCPP type is TCPP03. Otherwise, return error */
  if (TCPP0203_DeviceType != TCPP0203_DEVICE_TYPE_03)
 8001952:	4b0e      	ldr	r3, [pc, #56]	@ (800198c <TCPP0203_GetGateDriverConsumerAck+0x44>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d002      	beq.n	8001960 <TCPP0203_GetGateDriverConsumerAck+0x18>
  {
    return (TCPP0203_ERROR);
 800195a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800195e:	e010      	b.n	8001982 <TCPP0203_GetGateDriverConsumerAck+0x3a>
  }

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_ACK_REG, &tmp, 1);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f103 0018 	add.w	r0, r3, #24
 8001966:	f107 020b 	add.w	r2, r7, #11
 800196a:	2301      	movs	r3, #1
 800196c:	2101      	movs	r1, #1
 800196e:	f000 f9d2 	bl	8001d16 <tcpp0203_read_reg>
 8001972:	60f8      	str	r0, [r7, #12]
  *pGateDriverConsumerAck = (tmp & TCPP0203_GD_CONSUMER_SWITCH_ACK_MSK);
 8001974:	7afb      	ldrb	r3, [r7, #11]
 8001976:	f003 0308 	and.w	r3, r3, #8
 800197a:	b2da      	uxtb	r2, r3
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	701a      	strb	r2, [r3, #0]

  return ret;
 8001980:	68fb      	ldr	r3, [r7, #12]
}
 8001982:	4618      	mov	r0, r3
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	2400047c 	.word	0x2400047c

08001990 <TCPP0203_GetPowerModeAck>:
  *          @arg TCPP0203_POWER_MODE_ACK_LOWPOWER   Power Mode Low Power Ack
  *          @arg TCPP0203_POWER_MODE_ACK_NORMAL     Power Mode Normal Ack
  * @retval Component status
  */
int32_t TCPP0203_GetPowerModeAck(TCPP0203_Object_t *pObj, uint8_t *pPowerModeAck)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_ACK_REG, &tmp, 1);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f103 0018 	add.w	r0, r3, #24
 80019a0:	f107 020b 	add.w	r2, r7, #11
 80019a4:	2301      	movs	r3, #1
 80019a6:	2101      	movs	r1, #1
 80019a8:	f000 f9b5 	bl	8001d16 <tcpp0203_read_reg>
 80019ac:	60f8      	str	r0, [r7, #12]
  *pPowerModeAck = (tmp & TCPP0203_POWER_MODE_ACK_MSK);
 80019ae:	7afb      	ldrb	r3, [r7, #11]
 80019b0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	701a      	strb	r2, [r3, #0]

  return ret;
 80019ba:	68fb      	ldr	r3, [r7, #12]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3710      	adds	r7, #16
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <TCPP0203_GetVBusDischargeAck>:
  *          @arg TCPP0203_VBUS_DISCHARGE_ACK_OFF   VBUS Discharge Off Ack
  *          @arg TCPP0203_VBUS_DISCHARGE_ACK_ON    VBUS Discharge On Ack
  * @retval Component status
  */
int32_t TCPP0203_GetVBusDischargeAck(TCPP0203_Object_t *pObj, uint8_t *pVBusDischargeAck)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_ACK_REG, &tmp, 1);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f103 0018 	add.w	r0, r3, #24
 80019d4:	f107 020b 	add.w	r2, r7, #11
 80019d8:	2301      	movs	r3, #1
 80019da:	2101      	movs	r1, #1
 80019dc:	f000 f99b 	bl	8001d16 <tcpp0203_read_reg>
 80019e0:	60f8      	str	r0, [r7, #12]
  *pVBusDischargeAck = (tmp & TCPP0203_VBUS_DISCHARGE_ACK_MSK);
 80019e2:	7afb      	ldrb	r3, [r7, #11]
 80019e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	701a      	strb	r2, [r3, #0]

  return ret;
 80019ee:	68fb      	ldr	r3, [r7, #12]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <TCPP0203_GetVConnDischargeAck>:
  *          @arg TCPP0203_VCONN_DISCHARGE_ACK_OFF   VConn Discharge Off Ack
  *          @arg TCPP0203_VCONN_DISCHARGE_ACK_ON    VConn Discharge On Ack
  * @retval Component status
  */
int32_t TCPP0203_GetVConnDischargeAck(TCPP0203_Object_t *pObj, uint8_t *pVConnDischargeAck)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_ACK_REG, &tmp, 1);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f103 0018 	add.w	r0, r3, #24
 8001a08:	f107 020b 	add.w	r2, r7, #11
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	2101      	movs	r1, #1
 8001a10:	f000 f981 	bl	8001d16 <tcpp0203_read_reg>
 8001a14:	60f8      	str	r0, [r7, #12]
  *pVConnDischargeAck = (tmp & TCPP0203_VCONN_DISCHARGE_ACK_MSK);
 8001a16:	7afb      	ldrb	r3, [r7, #11]
 8001a18:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001a1c:	b2da      	uxtb	r2, r3
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	701a      	strb	r2, [r3, #0]

  return ret;
 8001a22:	68fb      	ldr	r3, [r7, #12]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <TCPP0203_GetOCPVConnFlag>:
  *          @arg TCPP0203_FLAG_OCP_VCONN_RESET   OCP VConn flag not set
  *          @arg TCPP0203_FLAG_OCP_VCONN_SET     OCP VConn flag set
  * @retval Component status
  */
int32_t TCPP0203_GetOCPVConnFlag(TCPP0203_Object_t *pObj, uint8_t *pOCPVConnFlag)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_FLAG_REG, &tmp, 1);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f103 0018 	add.w	r0, r3, #24
 8001a3c:	f107 020b 	add.w	r2, r7, #11
 8001a40:	2301      	movs	r3, #1
 8001a42:	2102      	movs	r1, #2
 8001a44:	f000 f967 	bl	8001d16 <tcpp0203_read_reg>
 8001a48:	60f8      	str	r0, [r7, #12]
  *pOCPVConnFlag = (tmp & TCPP0203_FLAG_OCP_VCONN_MSK);
 8001a4a:	7afb      	ldrb	r3, [r7, #11]
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	701a      	strb	r2, [r3, #0]

  return ret;
 8001a56:	68fb      	ldr	r3, [r7, #12]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <TCPP0203_GetOCPVBusFlag>:
  *          @arg TCPP0203_FLAG_OCP_VBUS_RESET   OCP VBUS flag not set
  *          @arg TCPP0203_FLAG_OCP_VBUS_SET     OCP VBUS flag set
  * @retval Component status
  */
int32_t TCPP0203_GetOCPVBusFlag(TCPP0203_Object_t *pObj, uint8_t *pGetOCPVBusFlag)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_FLAG_REG, &tmp, 1);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f103 0018 	add.w	r0, r3, #24
 8001a70:	f107 020b 	add.w	r2, r7, #11
 8001a74:	2301      	movs	r3, #1
 8001a76:	2102      	movs	r1, #2
 8001a78:	f000 f94d 	bl	8001d16 <tcpp0203_read_reg>
 8001a7c:	60f8      	str	r0, [r7, #12]
  *pGetOCPVBusFlag = (tmp & TCPP0203_FLAG_OCP_VBUS_MSK);
 8001a7e:	7afb      	ldrb	r3, [r7, #11]
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	b2da      	uxtb	r2, r3
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	701a      	strb	r2, [r3, #0]

  return ret;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <TCPP0203_GetOVPVBusFlag>:
  *          @arg TCPP0203_FLAG_OVP_VBUS_RESET   OVP VBUS flag not set
  *          @arg TCPP0203_FLAG_OVP_VBUS_SET     OVP VBUS flag set
  * @retval Component status
  */
int32_t TCPP0203_GetOVPVBusFlag(TCPP0203_Object_t *pObj, uint8_t *pOVPVBusFlag)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_FLAG_REG, &tmp, 1);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f103 0018 	add.w	r0, r3, #24
 8001aa4:	f107 020b 	add.w	r2, r7, #11
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	2102      	movs	r1, #2
 8001aac:	f000 f933 	bl	8001d16 <tcpp0203_read_reg>
 8001ab0:	60f8      	str	r0, [r7, #12]
  *pOVPVBusFlag = (tmp & TCPP0203_FLAG_OVP_VBUS_MSK);
 8001ab2:	7afb      	ldrb	r3, [r7, #11]
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	b2da      	uxtb	r2, r3
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	701a      	strb	r2, [r3, #0]

  return ret;
 8001abe:	68fb      	ldr	r3, [r7, #12]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3710      	adds	r7, #16
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <TCPP0203_GetOVPCCFlag>:
  *          @arg TCPP0203_FLAG_OVP_CC_RESET   OVP CC flag not set
  *          @arg TCPP0203_FLAG_OVP_CC_SET     OVP CC flag set
  * @retval Component status
  */
int32_t TCPP0203_GetOVPCCFlag(TCPP0203_Object_t *pObj, uint8_t *pOVPCCFlag)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_FLAG_REG, &tmp, 1);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f103 0018 	add.w	r0, r3, #24
 8001ad8:	f107 020b 	add.w	r2, r7, #11
 8001adc:	2301      	movs	r3, #1
 8001ade:	2102      	movs	r1, #2
 8001ae0:	f000 f919 	bl	8001d16 <tcpp0203_read_reg>
 8001ae4:	60f8      	str	r0, [r7, #12]
  *pOVPCCFlag = (tmp & TCPP0203_FLAG_OVP_CC_MSK);
 8001ae6:	7afb      	ldrb	r3, [r7, #11]
 8001ae8:	f003 0308 	and.w	r3, r3, #8
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	701a      	strb	r2, [r3, #0]

  return ret;
 8001af2:	68fb      	ldr	r3, [r7, #12]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <TCPP0203_GetOTPFlag>:
  *          @arg TCPP0203_FLAG_OTP_RESET   Over Temperature flag not set
  *          @arg TCPP0203_FLAG_OTP_SET     Over Temperature flag set
  * @retval Component status
  */
int32_t TCPP0203_GetOTPFlag(TCPP0203_Object_t *pObj, uint8_t *pOTPFlag)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_FLAG_REG, &tmp, 1);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f103 0018 	add.w	r0, r3, #24
 8001b0c:	f107 020b 	add.w	r2, r7, #11
 8001b10:	2301      	movs	r3, #1
 8001b12:	2102      	movs	r1, #2
 8001b14:	f000 f8ff 	bl	8001d16 <tcpp0203_read_reg>
 8001b18:	60f8      	str	r0, [r7, #12]
  *pOTPFlag = (tmp & TCPP0203_FLAG_OTP_MSK);
 8001b1a:	7afb      	ldrb	r3, [r7, #11]
 8001b1c:	f003 0310 	and.w	r3, r3, #16
 8001b20:	b2da      	uxtb	r2, r3
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	701a      	strb	r2, [r3, #0]

  return ret;
 8001b26:	68fb      	ldr	r3, [r7, #12]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <TCPP0203_GetVBusOkFlag>:
  *          @arg TCPP0203_FLAG_VBUS_OK_RESET   VBUS OK flag not set
  *          @arg TCPP0203_FLAG_VBUS_OK_SET     VBUS OK flag set
  * @retval Component status
  */
int32_t TCPP0203_GetVBusOkFlag(TCPP0203_Object_t *pObj, uint8_t *pVBusOkFlag)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_FLAG_REG, &tmp, 1);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f103 0018 	add.w	r0, r3, #24
 8001b40:	f107 020b 	add.w	r2, r7, #11
 8001b44:	2301      	movs	r3, #1
 8001b46:	2102      	movs	r1, #2
 8001b48:	f000 f8e5 	bl	8001d16 <tcpp0203_read_reg>
 8001b4c:	60f8      	str	r0, [r7, #12]
  *pVBusOkFlag = (tmp & TCPP0203_FLAG_VBUS_OK_MSK);
 8001b4e:	7afb      	ldrb	r3, [r7, #11]
 8001b50:	f003 0320 	and.w	r3, r3, #32
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	701a      	strb	r2, [r3, #0]

  return ret;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <TCPP0203_ReadTCPPType>:
  *          @arg TCPP0203_DEVICE_TYPE_02   TCPP02 Type
  *          @arg TCPP0203_DEVICE_TYPE_03   TCPP03 Type
  * @retval Component status
  */
int32_t TCPP0203_ReadTCPPType(TCPP0203_Object_t *pObj, uint8_t *pTCPPType)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_FLAG_REG, &tmp, 1);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f103 0018 	add.w	r0, r3, #24
 8001b74:	f107 020b 	add.w	r2, r7, #11
 8001b78:	2301      	movs	r3, #1
 8001b7a:	2102      	movs	r1, #2
 8001b7c:	f000 f8cb 	bl	8001d16 <tcpp0203_read_reg>
 8001b80:	60f8      	str	r0, [r7, #12]
  *pTCPPType = (tmp & TCPP0203_DEVICE_TYPE_MSK);
 8001b82:	7afb      	ldrb	r3, [r7, #11]
 8001b84:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	701a      	strb	r2, [r3, #0]

  return ret;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <TCPP0203_ReadVCONNPower>:
  *          @arg TCPP0203_FLAG_VCONN_PWR_1W       OCP VConn flag not set
  *          @arg TCPP0203_FLAG_VCONN_PWR_0_1W     OCP VConn flag set
  * @retval Component status
  */
int32_t TCPP0203_ReadVCONNPower(TCPP0203_Object_t *pObj, uint8_t *pVCONNPower)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_FLAG_REG, &tmp, 1);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f103 0018 	add.w	r0, r3, #24
 8001ba8:	f107 020b 	add.w	r2, r7, #11
 8001bac:	2301      	movs	r3, #1
 8001bae:	2102      	movs	r1, #2
 8001bb0:	f000 f8b1 	bl	8001d16 <tcpp0203_read_reg>
 8001bb4:	60f8      	str	r0, [r7, #12]
  *pVCONNPower = (tmp & TCPP0203_FLAG_VCONN_PWR_MSK);
 8001bb6:	7afb      	ldrb	r3, [r7, #11]
 8001bb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	701a      	strb	r2, [r3, #0]

  return ret;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <TCPP0203_WriteCtrlRegister>:
  * @param  pObj Pointer to component object
  * @param  pCtrlRegister Pointer on Ctrl register value
  * @retval Component status
  */
int32_t TCPP0203_WriteCtrlRegister(TCPP0203_Object_t *pObj, uint8_t *pCtrlRegister)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  /* Update value in writing register (reg0) */
  ret = tcpp0203_write_reg(&pObj->Ctx, TCPP0203_PROG_CTRL, pCtrlRegister, 1);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f103 0018 	add.w	r0, r3, #24
 8001bdc:	2301      	movs	r3, #1
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	2100      	movs	r1, #0
 8001be2:	f000 f8af 	bl	8001d44 <tcpp0203_write_reg>
 8001be6:	60f8      	str	r0, [r7, #12]

#if defined(TCPP0203_REGISTER_CONSISTENCY_CHECK)
  Reg0_Expected_Value = *pCtrlRegister;
#endif /* TCPP0203_REGISTER_CONSISTENCY_CHECK */

  return ret;
 8001be8:	68fb      	ldr	r3, [r7, #12]
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <TCPP0203_ReadAckRegister>:
  * @param  pObj Pointer to component object
  * @param  pAckRegister Pointer on Ack register value
  * @retval Component status
  */
int32_t TCPP0203_ReadAckRegister(TCPP0203_Object_t *pObj, uint8_t *pAckRegister)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b084      	sub	sp, #16
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
 8001bfa:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_ACK_REG, pAckRegister, 1);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f103 0018 	add.w	r0, r3, #24
 8001c02:	2301      	movs	r3, #1
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	2101      	movs	r1, #1
 8001c08:	f000 f885 	bl	8001d16 <tcpp0203_read_reg>
 8001c0c:	60f8      	str	r0, [r7, #12]

  return ret;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3710      	adds	r7, #16
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <TCPP0203_ReadFlagRegister>:
  * @param  pObj Pointer to component object
  * @param  pFlagRegister Pointer on Flag register value
  * @retval Component status
  */
int32_t TCPP0203_ReadFlagRegister(TCPP0203_Object_t *pObj, uint8_t *pFlagRegister)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_FLAG_REG, pFlagRegister, 1);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f103 0018 	add.w	r0, r3, #24
 8001c28:	2301      	movs	r3, #1
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	2102      	movs	r1, #2
 8001c2e:	f000 f872 	bl	8001d16 <tcpp0203_read_reg>
 8001c32:	60f8      	str	r0, [r7, #12]

  return ret;
 8001c34:	68fb      	ldr	r3, [r7, #12]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <TCPP0203_ReadRegWrap>:
  * @param  pData   Buffer where Target register value should be stored
  * @param  Length  buffer size to be read
  * @retval error status
  */
static int32_t TCPP0203_ReadRegWrap(const void *handle, uint8_t Reg, uint8_t *pData, uint8_t Length)
{
 8001c3e:	b590      	push	{r4, r7, lr}
 8001c40:	b087      	sub	sp, #28
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	60f8      	str	r0, [r7, #12]
 8001c46:	607a      	str	r2, [r7, #4]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	72fb      	strb	r3, [r7, #11]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	72bb      	strb	r3, [r7, #10]
  const TCPP0203_Object_t *pObj = (const TCPP0203_Object_t *)handle;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	691c      	ldr	r4, [r3, #16]
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	8918      	ldrh	r0, [r3, #8]
 8001c5e:	7afb      	ldrb	r3, [r7, #11]
 8001c60:	b299      	uxth	r1, r3
 8001c62:	7abb      	ldrb	r3, [r7, #10]
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	47a0      	blx	r4
 8001c6a:	4603      	mov	r3, r0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	371c      	adds	r7, #28
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd90      	pop	{r4, r7, pc}

08001c74 <TCPP0203_WriteRegWrap>:
  * @param  pData  Target register value to be written
  * @param  Length Buffer size to be written
  * @retval error status
  */
static int32_t TCPP0203_WriteRegWrap(const void *handle, uint8_t Reg, uint8_t *pData, uint8_t Length)
{
 8001c74:	b590      	push	{r4, r7, lr}
 8001c76:	b087      	sub	sp, #28
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	607a      	str	r2, [r7, #4]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	460b      	mov	r3, r1
 8001c82:	72fb      	strb	r3, [r7, #11]
 8001c84:	4613      	mov	r3, r2
 8001c86:	72bb      	strb	r3, [r7, #10]
  const TCPP0203_Object_t *pObj = (const TCPP0203_Object_t *)handle;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	617b      	str	r3, [r7, #20]

#if defined(TCPP0203_REGISTER_CONSISTENCY_CHECK)
  Reg0_Expected_Value = *pData;
#endif /* TCPP0203_REGISTER_CONSISTENCY_CHECK */

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	68dc      	ldr	r4, [r3, #12]
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	8918      	ldrh	r0, [r3, #8]
 8001c94:	7afb      	ldrb	r3, [r7, #11]
 8001c96:	b299      	uxth	r1, r3
 8001c98:	7abb      	ldrb	r3, [r7, #10]
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	47a0      	blx	r4
 8001ca0:	4603      	mov	r3, r0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	371c      	adds	r7, #28
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd90      	pop	{r4, r7, pc}

08001caa <TCPP0203_ModifyReg0>:
  * @param  pData  Target register value to be written
  * @param  Length Buffer size to be written
  * @retval error status
  */
static int32_t TCPP0203_ModifyReg0(TCPP0203_Object_t *pObj, uint8_t Value, uint8_t Mask)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b084      	sub	sp, #16
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	70fb      	strb	r3, [r7, #3]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	70bb      	strb	r3, [r7, #2]
  int32_t ret;
  uint8_t tmp;

  /* Read current content of ACK register (reflects content of bits set to 1 in Writing register Reg0) */
  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_ACK_REG, &tmp, 1);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f103 0018 	add.w	r0, r3, #24
 8001cc0:	f107 020b 	add.w	r2, r7, #11
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	f000 f825 	bl	8001d16 <tcpp0203_read_reg>
 8001ccc:	60f8      	str	r0, [r7, #12]

  /* Update only the area dedicated to Mask */
  tmp &= ~(Mask);
 8001cce:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	b25a      	sxtb	r2, r3
 8001cd6:	7afb      	ldrb	r3, [r7, #11]
 8001cd8:	b25b      	sxtb	r3, r3
 8001cda:	4013      	ands	r3, r2
 8001cdc:	b25b      	sxtb	r3, r3
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	72fb      	strb	r3, [r7, #11]
  tmp |= (Value & Mask);
 8001ce2:	78fa      	ldrb	r2, [r7, #3]
 8001ce4:	78bb      	ldrb	r3, [r7, #2]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	7afb      	ldrb	r3, [r7, #11]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	72fb      	strb	r3, [r7, #11]
#if defined(TCPP0203_REGISTER_CONSISTENCY_CHECK)
  Reg0_Expected_Value = tmp;
#endif /* TCPP0203_REGISTER_CONSISTENCY_CHECK */

  /* Update value in writing register (reg0) */
  ret += tcpp0203_write_reg(&pObj->Ctx, TCPP0203_PROG_CTRL, &tmp, 1);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f103 0018 	add.w	r0, r3, #24
 8001cf8:	f107 020b 	add.w	r2, r7, #11
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	2100      	movs	r1, #0
 8001d00:	f000 f820 	bl	8001d44 <tcpp0203_write_reg>
 8001d04:	4602      	mov	r2, r0
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	4413      	add	r3, r2
 8001d0a:	60fb      	str	r3, [r7, #12]

#if defined(TCPP0203_REGISTER_CONSISTENCY_CHECK)
  ret += TCPP0203_CheckReg0Reg1(pObj, Reg0_Expected_Value);
#endif /* TCPP0203_REGISTER_CONSISTENCY_CHECK */

  return ret;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <tcpp0203_read_reg>:
  *                 I2C or SPI reading functions
  * Input         : Register Address, length of buffer
  * Output        : data Read
  *******************************************************************************/
int32_t tcpp0203_read_reg(const TCPP0203_ctx_t *ctx, uint8_t reg, uint8_t *data, uint8_t length)
{
 8001d16:	b590      	push	{r4, r7, lr}
 8001d18:	b085      	sub	sp, #20
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	60f8      	str	r0, [r7, #12]
 8001d1e:	607a      	str	r2, [r7, #4]
 8001d20:	461a      	mov	r2, r3
 8001d22:	460b      	mov	r3, r1
 8001d24:	72fb      	strb	r3, [r7, #11]
 8001d26:	4613      	mov	r3, r2
 8001d28:	72bb      	strb	r3, [r7, #10]
  return ctx->ReadReg(ctx->handle, reg, data, length);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	685c      	ldr	r4, [r3, #4]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6898      	ldr	r0, [r3, #8]
 8001d32:	7abb      	ldrb	r3, [r7, #10]
 8001d34:	7af9      	ldrb	r1, [r7, #11]
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	47a0      	blx	r4
 8001d3a:	4603      	mov	r3, r0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3714      	adds	r7, #20
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd90      	pop	{r4, r7, pc}

08001d44 <tcpp0203_write_reg>:
  *                 I2C or SPI writing function
  * Input         : Register Address, data to be written, length of buffer
  * Output        : None
  *******************************************************************************/
int32_t tcpp0203_write_reg(const TCPP0203_ctx_t *ctx, uint8_t reg, uint8_t *data, uint8_t length)
{
 8001d44:	b590      	push	{r4, r7, lr}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	607a      	str	r2, [r7, #4]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	460b      	mov	r3, r1
 8001d52:	72fb      	strb	r3, [r7, #11]
 8001d54:	4613      	mov	r3, r2
 8001d56:	72bb      	strb	r3, [r7, #10]
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681c      	ldr	r4, [r3, #0]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6898      	ldr	r0, [r3, #8]
 8001d60:	7abb      	ldrb	r3, [r7, #10]
 8001d62:	7af9      	ldrb	r1, [r7, #11]
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	47a0      	blx	r4
 8001d68:	4603      	mov	r3, r0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3714      	adds	r7, #20
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd90      	pop	{r4, r7, pc}

08001d72 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b082      	sub	sp, #8
 8001d76:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d7c:	2003      	movs	r0, #3
 8001d7e:	f001 fdd3 	bl	8003928 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d82:	200f      	movs	r0, #15
 8001d84:	f000 f80e 	bl	8001da4 <HAL_InitTick>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d002      	beq.n	8001d94 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	71fb      	strb	r3, [r7, #7]
 8001d92:	e001      	b.n	8001d98 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d94:	f7fe ffd4 	bl	8000d40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d98:	79fb      	ldrb	r3, [r7, #7]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
	...

08001da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001dac:	2300      	movs	r3, #0
 8001dae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001db0:	4b17      	ldr	r3, [pc, #92]	@ (8001e10 <HAL_InitTick+0x6c>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d023      	beq.n	8001e00 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001db8:	4b16      	ldr	r3, [pc, #88]	@ (8001e14 <HAL_InitTick+0x70>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	4b14      	ldr	r3, [pc, #80]	@ (8001e10 <HAL_InitTick+0x6c>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f001 fddd 	bl	800398e <HAL_SYSTICK_Config>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d10f      	bne.n	8001dfa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b0f      	cmp	r3, #15
 8001dde:	d809      	bhi.n	8001df4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001de0:	2200      	movs	r2, #0
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001de8:	f001 fda9 	bl	800393e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dec:	4a0a      	ldr	r2, [pc, #40]	@ (8001e18 <HAL_InitTick+0x74>)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6013      	str	r3, [r2, #0]
 8001df2:	e007      	b.n	8001e04 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	73fb      	strb	r3, [r7, #15]
 8001df8:	e004      	b.n	8001e04 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	73fb      	strb	r3, [r7, #15]
 8001dfe:	e001      	b.n	8001e04 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	24000070 	.word	0x24000070
 8001e14:	24000000 	.word	0x24000000
 8001e18:	2400006c 	.word	0x2400006c

08001e1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e20:	4b06      	ldr	r3, [pc, #24]	@ (8001e3c <HAL_IncTick+0x20>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	461a      	mov	r2, r3
 8001e26:	4b06      	ldr	r3, [pc, #24]	@ (8001e40 <HAL_IncTick+0x24>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	4a04      	ldr	r2, [pc, #16]	@ (8001e40 <HAL_IncTick+0x24>)
 8001e2e:	6013      	str	r3, [r2, #0]
}
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	24000070 	.word	0x24000070
 8001e40:	24000480 	.word	0x24000480

08001e44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  return uwTick;
 8001e48:	4b03      	ldr	r3, [pc, #12]	@ (8001e58 <HAL_GetTick+0x14>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	24000480 	.word	0x24000480

08001e5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e64:	f7ff ffee 	bl	8001e44 <HAL_GetTick>
 8001e68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	60fb      	str	r3, [r7, #12]

  /* Add a period to ensure minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e74:	d005      	beq.n	8001e82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001e76:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea0 <HAL_Delay+0x44>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	4413      	add	r3, r2
 8001e80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e82:	bf00      	nop
 8001e84:	f7ff ffde 	bl	8001e44 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d8f7      	bhi.n	8001e84 <HAL_Delay+0x28>
  {
  }
}
 8001e94:	bf00      	nop
 8001e96:	bf00      	nop
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	24000070 	.word	0x24000070

08001ea4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	609a      	str	r2, [r3, #8]
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b083      	sub	sp, #12
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
 8001ed2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	609a      	str	r2, [r3, #8]
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <LL_ADC_SetPathInternalChAdd>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VDDCORE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetPathInternalChAdd(ADC_TypeDef *ADCx, uint32_t PathInternal)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->OR, PathInternal);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
	...

08001f34 <LL_ADC_SetOffset>:
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b087      	sub	sp, #28
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
 8001f40:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	3360      	adds	r3, #96	@ 0x60
 8001f46:	461a      	mov	r2, r3
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4413      	add	r3, r2
 8001f4e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	4b08      	ldr	r3, [pc, #32]	@ (8001f78 <LL_ADC_SetOffset+0x44>)
 8001f56:	4013      	ands	r3, r2
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	430a      	orrs	r2, r1
 8001f62:	4313      	orrs	r3, r2
 8001f64:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001f6c:	bf00      	nop
 8001f6e:	371c      	adds	r7, #28
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	03fff000 	.word	0x03fff000

08001f7c <LL_ADC_GetOffsetChannel>:
  *         (3) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	3360      	adds	r3, #96	@ 0x60
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4413      	add	r3, r2
 8001f92:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3714      	adds	r7, #20
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b087      	sub	sp, #28
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	3360      	adds	r3, #96	@ 0x60
 8001fb8:	461a      	mov	r2, r3
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001fd2:	bf00      	nop
 8001fd4:	371c      	adds	r7, #28
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b087      	sub	sp, #28
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	60f8      	str	r0, [r7, #12]
 8001fe6:	60b9      	str	r1, [r7, #8]
 8001fe8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	3360      	adds	r3, #96	@ 0x60
 8001fee:	461a      	mov	r2, r3
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	4413      	add	r3, r2
 8001ff6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	431a      	orrs	r2, r3
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002008:	bf00      	nop
 800200a:	371c      	adds	r7, #28
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002014:	b480      	push	{r7}
 8002016:	b087      	sub	sp, #28
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	3360      	adds	r3, #96	@ 0x60
 8002024:	461a      	mov	r2, r3
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4413      	add	r3, r2
 800202c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	431a      	orrs	r2, r3
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800203e:	bf00      	nop
 8002040:	371c      	adds	r7, #28
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800204a:	b480      	push	{r7}
 800204c:	b083      	sub	sp, #12
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
 8002052:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	695b      	ldr	r3, [r3, #20]
 8002058:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	431a      	orrs	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	615a      	str	r2, [r3, #20]
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002084:	2301      	movs	r3, #1
 8002086:	e000      	b.n	800208a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7RS, fast channel allows: 2.5 (sampling) + 12.5 (conversion 12b) = 15 ADC clock cycles (fADC)
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002096:	b480      	push	{r7}
 8002098:	b087      	sub	sp, #28
 800209a:	af00      	add	r7, sp, #0
 800209c:	60f8      	str	r0, [r7, #12]
 800209e:	60b9      	str	r1, [r7, #8]
 80020a0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	3330      	adds	r3, #48	@ 0x30
 80020a6:	461a      	mov	r2, r3
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	0a1b      	lsrs	r3, r3, #8
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	f003 030c 	and.w	r3, r3, #12
 80020b2:	4413      	add	r3, r2
 80020b4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	f003 031f 	and.w	r3, r3, #31
 80020c0:	211f      	movs	r1, #31
 80020c2:	fa01 f303 	lsl.w	r3, r1, r3
 80020c6:	43db      	mvns	r3, r3
 80020c8:	401a      	ands	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	0e9b      	lsrs	r3, r3, #26
 80020ce:	f003 011f 	and.w	r1, r3, #31
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	f003 031f 	and.w	r3, r3, #31
 80020d8:	fa01 f303 	lsl.w	r3, r1, r3
 80020dc:	431a      	orrs	r2, r3
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80020e2:	bf00      	nop
 80020e4:	371c      	adds	r7, #28
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b087      	sub	sp, #28
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	60f8      	str	r0, [r7, #12]
 80020f6:	60b9      	str	r1, [r7, #8]
 80020f8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	3314      	adds	r3, #20
 80020fe:	461a      	mov	r2, r3
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	0e5b      	lsrs	r3, r3, #25
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	f003 0304 	and.w	r3, r3, #4
 800210a:	4413      	add	r3, r2
 800210c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	0d1b      	lsrs	r3, r3, #20
 8002116:	f003 031f 	and.w	r3, r3, #31
 800211a:	2107      	movs	r1, #7
 800211c:	fa01 f303 	lsl.w	r3, r1, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	401a      	ands	r2, r3
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	0d1b      	lsrs	r3, r3, #20
 8002128:	f003 031f 	and.w	r3, r3, #31
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	fa01 f303 	lsl.w	r3, r1, r3
 8002132:	431a      	orrs	r2, r3
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002138:	bf00      	nop
 800213a:	371c      	adds	r7, #28
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800215c:	43db      	mvns	r3, r3
 800215e:	401a      	ands	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f003 0318 	and.w	r3, r3, #24
 8002166:	4908      	ldr	r1, [pc, #32]	@ (8002188 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002168:	40d9      	lsrs	r1, r3
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	400b      	ands	r3, r1
 800216e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002172:	431a      	orrs	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800217a:	bf00      	nop
 800217c:	3714      	adds	r7, #20
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	0007ffff 	.word	0x0007ffff

0800218c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f003 031f 	and.w	r3, r3, #31
}
 800219c:	4618      	mov	r0, r3
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	4b04      	ldr	r3, [pc, #16]	@ (80021c8 <LL_ADC_DisableDeepPowerDown+0x20>)
 80021b6:	4013      	ands	r3, r2
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	6093      	str	r3, [r2, #8]
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	5fffffc0 	.word	0x5fffffc0

080021cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80021dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80021e0:	d101      	bne.n	80021e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80021e2:	2301      	movs	r3, #1
 80021e4:	e000      	b.n	80021e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	4b05      	ldr	r3, [pc, #20]	@ (8002218 <LL_ADC_EnableInternalRegulator+0x24>)
 8002202:	4013      	ands	r3, r2
 8002204:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	6fffffc0 	.word	0x6fffffc0

0800221c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800222c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002230:	d101      	bne.n	8002236 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002232:	2301      	movs	r3, #1
 8002234:	e000      	b.n	8002238 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	4b05      	ldr	r3, [pc, #20]	@ (8002268 <LL_ADC_Enable+0x24>)
 8002252:	4013      	ands	r3, r2
 8002254:	f043 0201 	orr.w	r2, r3, #1
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	7fffffc0 	.word	0x7fffffc0

0800226c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	4b05      	ldr	r3, [pc, #20]	@ (8002290 <LL_ADC_Disable+0x24>)
 800227a:	4013      	ands	r3, r2
 800227c:	f043 0202 	orr.w	r2, r3, #2
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	7fffffc0 	.word	0x7fffffc0

08002294 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d101      	bne.n	80022ac <LL_ADC_IsEnabled+0x18>
 80022a8:	2301      	movs	r3, #1
 80022aa:	e000      	b.n	80022ae <LL_ADC_IsEnabled+0x1a>
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80022ba:	b480      	push	{r7}
 80022bc:	b083      	sub	sp, #12
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d101      	bne.n	80022d2 <LL_ADC_IsDisableOngoing+0x18>
 80022ce:	2301      	movs	r3, #1
 80022d0:	e000      	b.n	80022d4 <LL_ADC_IsDisableOngoing+0x1a>
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	4b05      	ldr	r3, [pc, #20]	@ (8002304 <LL_ADC_REG_StartConversion+0x24>)
 80022ee:	4013      	ands	r3, r2
 80022f0:	f043 0204 	orr.w	r2, r3, #4
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	7fffffc0 	.word	0x7fffffc0

08002308 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b04      	cmp	r3, #4
 800231a:	d101      	bne.n	8002320 <LL_ADC_REG_IsConversionOngoing+0x18>
 800231c:	2301      	movs	r3, #1
 800231e:	e000      	b.n	8002322 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800232e:	b480      	push	{r7}
 8002330:	b083      	sub	sp, #12
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	2b08      	cmp	r3, #8
 8002340:	d101      	bne.n	8002346 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002342:	2301      	movs	r3, #1
 8002344:	e000      	b.n	8002348 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002346:	2300      	movs	r3, #0
}
 8002348:	4618      	mov	r0, r3
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002354:	b590      	push	{r4, r7, lr}
 8002356:	b089      	sub	sp, #36	@ 0x24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800235c:	2300      	movs	r3, #0
 800235e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002360:	2300      	movs	r3, #0
 8002362:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e130      	b.n	80025d0 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002378:	2b00      	cmp	r3, #0
 800237a:	d109      	bne.n	8002390 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f7fe fa0d 	bl	800079c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff ff19 	bl	80021cc <LL_ADC_IsDeepPowerDownEnabled>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d004      	beq.n	80023aa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff feff 	bl	80021a8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff ff34 	bl	800221c <LL_ADC_IsInternalRegulatorEnabled>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d115      	bne.n	80023e6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff ff18 	bl	80021f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023c4:	4b84      	ldr	r3, [pc, #528]	@ (80025d8 <HAL_ADC_Init+0x284>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	099b      	lsrs	r3, r3, #6
 80023ca:	4a84      	ldr	r2, [pc, #528]	@ (80025dc <HAL_ADC_Init+0x288>)
 80023cc:	fba2 2303 	umull	r2, r3, r2, r3
 80023d0:	099b      	lsrs	r3, r3, #6
 80023d2:	3301      	adds	r3, #1
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80023d8:	e002      	b.n	80023e0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	3b01      	subs	r3, #1
 80023de:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f9      	bne.n	80023da <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7ff ff16 	bl	800221c <LL_ADC_IsInternalRegulatorEnabled>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10d      	bne.n	8002412 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023fa:	f043 0210 	orr.w	r2, r3, #16
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002406:	f043 0201 	orr.w	r2, r3, #1
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff ff76 	bl	8002308 <LL_ADC_REG_IsConversionOngoing>
 800241c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002422:	f003 0310 	and.w	r3, r3, #16
 8002426:	2b00      	cmp	r3, #0
 8002428:	f040 80c9 	bne.w	80025be <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	2b00      	cmp	r3, #0
 8002430:	f040 80c5 	bne.w	80025be <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002438:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800243c:	f043 0202 	orr.w	r2, r3, #2
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff ff23 	bl	8002294 <LL_ADC_IsEnabled>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d110      	bne.n	8002476 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002454:	4862      	ldr	r0, [pc, #392]	@ (80025e0 <HAL_ADC_Init+0x28c>)
 8002456:	f7ff ff1d 	bl	8002294 <LL_ADC_IsEnabled>
 800245a:	4604      	mov	r4, r0
 800245c:	4861      	ldr	r0, [pc, #388]	@ (80025e4 <HAL_ADC_Init+0x290>)
 800245e:	f7ff ff19 	bl	8002294 <LL_ADC_IsEnabled>
 8002462:	4603      	mov	r3, r0
 8002464:	4323      	orrs	r3, r4
 8002466:	2b00      	cmp	r3, #0
 8002468:	d105      	bne.n	8002476 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	4619      	mov	r1, r3
 8002470:	485d      	ldr	r0, [pc, #372]	@ (80025e8 <HAL_ADC_Init+0x294>)
 8002472:	f7ff fd17 	bl	8001ea4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	7e5b      	ldrb	r3, [r3, #25]
 800247a:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002480:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002486:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800248c:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002494:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002496:	4313      	orrs	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d106      	bne.n	80024b2 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a8:	3b01      	subs	r3, #1
 80024aa:	045b      	lsls	r3, r3, #17
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d009      	beq.n	80024ce <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024be:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c6:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68da      	ldr	r2, [r3, #12]
 80024d4:	4b45      	ldr	r3, [pc, #276]	@ (80025ec <HAL_ADC_Init+0x298>)
 80024d6:	4013      	ands	r3, r2
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6812      	ldr	r2, [r2, #0]
 80024dc:	69b9      	ldr	r1, [r7, #24]
 80024de:	430b      	orrs	r3, r1
 80024e0:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	430a      	orrs	r2, r1
 80024f6:	611a      	str	r2, [r3, #16]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff ff16 	bl	800232e <LL_ADC_INJ_IsConversionOngoing>
 8002502:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d137      	bne.n	800257a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d134      	bne.n	800257a <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	7e1b      	ldrb	r3, [r3, #24]
 8002514:	039a      	lsls	r2, r3, #14
                   hadc->Init.ConversionDataManagement);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      tmp_cfgr = (
 800251a:	4313      	orrs	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68da      	ldr	r2, [r3, #12]
 8002524:	4b32      	ldr	r3, [pc, #200]	@ (80025f0 <HAL_ADC_Init+0x29c>)
 8002526:	4013      	ands	r3, r2
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	6812      	ldr	r2, [r2, #0]
 800252c:	69b9      	ldr	r1, [r7, #24]
 800252e:	430b      	orrs	r3, r1
 8002530:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002538:	2b01      	cmp	r3, #1
 800253a:	d116      	bne.n	800256a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	691a      	ldr	r2, [r3, #16]
 8002542:	4b2c      	ldr	r3, [pc, #176]	@ (80025f4 <HAL_ADC_Init+0x2a0>)
 8002544:	4013      	ands	r3, r2
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800254e:	4311      	orrs	r1, r2
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002554:	4311      	orrs	r1, r2
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800255a:	430a      	orrs	r2, r1
 800255c:	431a      	orrs	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 0201 	orr.w	r2, r2, #1
 8002566:	611a      	str	r2, [r3, #16]
 8002568:	e007      	b.n	800257a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	691a      	ldr	r2, [r3, #16]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 0201 	bic.w	r2, r2, #1
 8002578:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d10c      	bne.n	800259c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002588:	f023 010f 	bic.w	r1, r3, #15
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	69db      	ldr	r3, [r3, #28]
 8002590:	1e5a      	subs	r2, r3, #1
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	430a      	orrs	r2, r1
 8002598:	631a      	str	r2, [r3, #48]	@ 0x30
 800259a:	e007      	b.n	80025ac <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f022 020f 	bic.w	r2, r2, #15
 80025aa:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025b0:	f023 0303 	bic.w	r3, r3, #3
 80025b4:	f043 0201 	orr.w	r2, r3, #1
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	659a      	str	r2, [r3, #88]	@ 0x58
 80025bc:	e007      	b.n	80025ce <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025c2:	f043 0210 	orr.w	r2, r3, #16
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80025ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3724      	adds	r7, #36	@ 0x24
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd90      	pop	{r4, r7, pc}
 80025d8:	24000000 	.word	0x24000000
 80025dc:	053e2d63 	.word	0x053e2d63
 80025e0:	40022000 	.word	0x40022000
 80025e4:	40022100 	.word	0x40022100
 80025e8:	40022300 	.word	0x40022300
 80025ec:	fff04007 	.word	0xfff04007
 80025f0:	ffffbff9 	.word	0xffffbff9
 80025f4:	fffff803 	.word	0xfffff803

080025f8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002600:	4856      	ldr	r0, [pc, #344]	@ (800275c <HAL_ADC_Start+0x164>)
 8002602:	f7ff fdc3 	bl	800218c <LL_ADC_GetMultimode>
 8002606:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff fe7b 	bl	8002308 <LL_ADC_REG_IsConversionOngoing>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	f040 809a 	bne.w	800274e <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002620:	2b01      	cmp	r3, #1
 8002622:	d101      	bne.n	8002628 <HAL_ADC_Start+0x30>
 8002624:	2302      	movs	r3, #2
 8002626:	e095      	b.n	8002754 <HAL_ADC_Start+0x15c>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 fcad 	bl	8002f90 <ADC_Enable>
 8002636:	4603      	mov	r3, r0
 8002638:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800263a:	7dfb      	ldrb	r3, [r7, #23]
 800263c:	2b00      	cmp	r3, #0
 800263e:	f040 8081 	bne.w	8002744 <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002646:	4b46      	ldr	r3, [pc, #280]	@ (8002760 <HAL_ADC_Start+0x168>)
 8002648:	4013      	ands	r3, r2
 800264a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a43      	ldr	r2, [pc, #268]	@ (8002764 <HAL_ADC_Start+0x16c>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d002      	beq.n	8002662 <HAL_ADC_Start+0x6a>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	e000      	b.n	8002664 <HAL_ADC_Start+0x6c>
 8002662:	4b41      	ldr	r3, [pc, #260]	@ (8002768 <HAL_ADC_Start+0x170>)
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6812      	ldr	r2, [r2, #0]
 8002668:	4293      	cmp	r3, r2
 800266a:	d002      	beq.n	8002672 <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d105      	bne.n	800267e <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002676:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002682:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002686:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800268a:	d106      	bne.n	800269a <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002690:	f023 0206 	bic.w	r2, r3, #6
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002698:	e002      	b.n	80026a0 <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	221c      	movs	r2, #28
 80026a6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a2b      	ldr	r2, [pc, #172]	@ (8002764 <HAL_ADC_Start+0x16c>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d002      	beq.n	80026c0 <HAL_ADC_Start+0xc8>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	e000      	b.n	80026c2 <HAL_ADC_Start+0xca>
 80026c0:	4b29      	ldr	r3, [pc, #164]	@ (8002768 <HAL_ADC_Start+0x170>)
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	6812      	ldr	r2, [r2, #0]
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d008      	beq.n	80026dc <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d005      	beq.n	80026dc <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	2b05      	cmp	r3, #5
 80026d4:	d002      	beq.n	80026dc <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	2b09      	cmp	r3, #9
 80026da:	d114      	bne.n	8002706 <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d007      	beq.n	80026fa <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ee:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80026f2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff fdee 	bl	80022e0 <LL_ADC_REG_StartConversion>
 8002704:	e025      	b.n	8002752 <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800270a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	659a      	str	r2, [r3, #88]	@ 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a13      	ldr	r2, [pc, #76]	@ (8002764 <HAL_ADC_Start+0x16c>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d002      	beq.n	8002722 <HAL_ADC_Start+0x12a>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	e000      	b.n	8002724 <HAL_ADC_Start+0x12c>
 8002722:	4b11      	ldr	r3, [pc, #68]	@ (8002768 <HAL_ADC_Start+0x170>)
 8002724:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00f      	beq.n	8002752 <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002736:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800273a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	659a      	str	r2, [r3, #88]	@ 0x58
 8002742:	e006      	b.n	8002752 <HAL_ADC_Start+0x15a>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 800274c:	e001      	b.n	8002752 <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800274e:	2302      	movs	r3, #2
 8002750:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002752:	7dfb      	ldrb	r3, [r7, #23]
}
 8002754:	4618      	mov	r0, r3
 8002756:	3718      	adds	r7, #24
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40022300 	.word	0x40022300
 8002760:	fffff0fe 	.word	0xfffff0fe
 8002764:	40022100 	.word	0x40022100
 8002768:	40022000 	.word	0x40022000

0800276c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b0b6      	sub	sp, #216	@ 0xd8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800279e:	2300      	movs	r3, #0
 80027a0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80027a4:	2300      	movs	r3, #0
 80027a6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d101      	bne.n	80027b6 <HAL_ADC_ConfigChannel+0x22>
 80027b2:	2302      	movs	r3, #2
 80027b4:	e3d4      	b.n	8002f60 <HAL_ADC_ConfigChannel+0x7cc>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff fda0 	bl	8002308 <LL_ADC_REG_IsConversionOngoing>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	f040 83b9 	bne.w	8002f42 <HAL_ADC_ConfigChannel+0x7ae>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6818      	ldr	r0, [r3, #0]
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	6859      	ldr	r1, [r3, #4]
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	461a      	mov	r2, r3
 80027de:	f7ff fc5a 	bl	8002096 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff fd8e 	bl	8002308 <LL_ADC_REG_IsConversionOngoing>
 80027ec:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff fd9a 	bl	800232e <LL_ADC_INJ_IsConversionOngoing>
 80027fa:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027fe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002802:	2b00      	cmp	r3, #0
 8002804:	f040 81d9 	bne.w	8002bba <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002808:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800280c:	2b00      	cmp	r3, #0
 800280e:	f040 81d4 	bne.w	8002bba <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800281a:	d10f      	bne.n	800283c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6818      	ldr	r0, [r3, #0]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2200      	movs	r2, #0
 8002826:	4619      	mov	r1, r3
 8002828:	f7ff fc61 	bl	80020ee <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff fc08 	bl	800204a <LL_ADC_SetSamplingTimeCommonConfig>
 800283a:	e00e      	b.n	800285a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6818      	ldr	r0, [r3, #0]
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	6819      	ldr	r1, [r3, #0]
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	461a      	mov	r2, r3
 800284a:	f7ff fc50 	bl	80020ee <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2100      	movs	r1, #0
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff fbf8 	bl	800204a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	695a      	ldr	r2, [r3, #20]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	08db      	lsrs	r3, r3, #3
 8002866:	f003 0303 	and.w	r3, r3, #3
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	2b04      	cmp	r3, #4
 800287a:	d022      	beq.n	80028c2 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6818      	ldr	r0, [r3, #0]
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	6919      	ldr	r1, [r3, #16]
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800288c:	f7ff fb52 	bl	8001f34 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6818      	ldr	r0, [r3, #0]
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	6919      	ldr	r1, [r3, #16]
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	461a      	mov	r2, r3
 800289e:	f7ff fb9e 	bl	8001fde <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6818      	ldr	r0, [r3, #0]
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d102      	bne.n	80028b8 <HAL_ADC_ConfigChannel+0x124>
 80028b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028b6:	e000      	b.n	80028ba <HAL_ADC_ConfigChannel+0x126>
 80028b8:	2300      	movs	r3, #0
 80028ba:	461a      	mov	r2, r3
 80028bc:	f7ff fbaa 	bl	8002014 <LL_ADC_SetOffsetSaturation>
 80028c0:	e17b      	b.n	8002bba <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2100      	movs	r1, #0
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff fb57 	bl	8001f7c <LL_ADC_GetOffsetChannel>
 80028ce:	4603      	mov	r3, r0
 80028d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d10a      	bne.n	80028ee <HAL_ADC_ConfigChannel+0x15a>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2100      	movs	r1, #0
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff fb4c 	bl	8001f7c <LL_ADC_GetOffsetChannel>
 80028e4:	4603      	mov	r3, r0
 80028e6:	0e9b      	lsrs	r3, r3, #26
 80028e8:	f003 021f 	and.w	r2, r3, #31
 80028ec:	e01e      	b.n	800292c <HAL_ADC_ConfigChannel+0x198>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2100      	movs	r1, #0
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff fb41 	bl	8001f7c <LL_ADC_GetOffsetChannel>
 80028fa:	4603      	mov	r3, r0
 80028fc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002900:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002904:	fa93 f3a3 	rbit	r3, r3
 8002908:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  return result;
 800290c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002910:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  if (value == 0U)
 8002914:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <HAL_ADC_ConfigChannel+0x18c>
    return 32U;
 800291c:	2320      	movs	r3, #32
 800291e:	e004      	b.n	800292a <HAL_ADC_ConfigChannel+0x196>
  return __builtin_clz(value);
 8002920:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002924:	fab3 f383 	clz	r3, r3
 8002928:	b2db      	uxtb	r3, r3
 800292a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002934:	2b00      	cmp	r3, #0
 8002936:	d105      	bne.n	8002944 <HAL_ADC_ConfigChannel+0x1b0>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	0e9b      	lsrs	r3, r3, #26
 800293e:	f003 031f 	and.w	r3, r3, #31
 8002942:	e018      	b.n	8002976 <HAL_ADC_ConfigChannel+0x1e2>
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002950:	fa93 f3a3 	rbit	r3, r3
 8002954:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002958:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800295c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002960:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002968:	2320      	movs	r3, #32
 800296a:	e004      	b.n	8002976 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 800296c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002970:	fab3 f383 	clz	r3, r3
 8002974:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002976:	429a      	cmp	r2, r3
 8002978:	d106      	bne.n	8002988 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2200      	movs	r2, #0
 8002980:	2100      	movs	r1, #0
 8002982:	4618      	mov	r0, r3
 8002984:	f7ff fb10 	bl	8001fa8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2101      	movs	r1, #1
 800298e:	4618      	mov	r0, r3
 8002990:	f7ff faf4 	bl	8001f7c <LL_ADC_GetOffsetChannel>
 8002994:	4603      	mov	r3, r0
 8002996:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10a      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x220>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2101      	movs	r1, #1
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff fae9 	bl	8001f7c <LL_ADC_GetOffsetChannel>
 80029aa:	4603      	mov	r3, r0
 80029ac:	0e9b      	lsrs	r3, r3, #26
 80029ae:	f003 021f 	and.w	r2, r3, #31
 80029b2:	e01e      	b.n	80029f2 <HAL_ADC_ConfigChannel+0x25e>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2101      	movs	r1, #1
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff fade 	bl	8001f7c <LL_ADC_GetOffsetChannel>
 80029c0:	4603      	mov	r3, r0
 80029c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80029ca:	fa93 f3a3 	rbit	r3, r3
 80029ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80029d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80029d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80029da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80029e2:	2320      	movs	r3, #32
 80029e4:	e004      	b.n	80029f0 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80029e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80029ea:	fab3 f383 	clz	r3, r3
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d105      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x276>
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	0e9b      	lsrs	r3, r3, #26
 8002a04:	f003 031f 	and.w	r3, r3, #31
 8002a08:	e018      	b.n	8002a3c <HAL_ADC_ConfigChannel+0x2a8>
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a12:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002a16:	fa93 f3a3 	rbit	r3, r3
 8002a1a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002a1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002a22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002a26:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002a2e:	2320      	movs	r3, #32
 8002a30:	e004      	b.n	8002a3c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002a32:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002a36:	fab3 f383 	clz	r3, r3
 8002a3a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d106      	bne.n	8002a4e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2200      	movs	r2, #0
 8002a46:	2101      	movs	r1, #1
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff faad 	bl	8001fa8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2102      	movs	r1, #2
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff fa91 	bl	8001f7c <LL_ADC_GetOffsetChannel>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10a      	bne.n	8002a7a <HAL_ADC_ConfigChannel+0x2e6>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2102      	movs	r1, #2
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7ff fa86 	bl	8001f7c <LL_ADC_GetOffsetChannel>
 8002a70:	4603      	mov	r3, r0
 8002a72:	0e9b      	lsrs	r3, r3, #26
 8002a74:	f003 021f 	and.w	r2, r3, #31
 8002a78:	e01e      	b.n	8002ab8 <HAL_ADC_ConfigChannel+0x324>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2102      	movs	r1, #2
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff fa7b 	bl	8001f7c <LL_ADC_GetOffsetChannel>
 8002a86:	4603      	mov	r3, r0
 8002a88:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a90:	fa93 f3a3 	rbit	r3, r3
 8002a94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002a98:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a9c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002aa0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d101      	bne.n	8002aac <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002aa8:	2320      	movs	r3, #32
 8002aaa:	e004      	b.n	8002ab6 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002aac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002ab0:	fab3 f383 	clz	r3, r3
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d105      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x33c>
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	0e9b      	lsrs	r3, r3, #26
 8002aca:	f003 031f 	and.w	r3, r3, #31
 8002ace:	e016      	b.n	8002afe <HAL_ADC_ConfigChannel+0x36a>
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002adc:	fa93 f3a3 	rbit	r3, r3
 8002ae0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002ae2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002ae4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002ae8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d101      	bne.n	8002af4 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002af0:	2320      	movs	r3, #32
 8002af2:	e004      	b.n	8002afe <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002af4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002af8:	fab3 f383 	clz	r3, r3
 8002afc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d106      	bne.n	8002b10 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2200      	movs	r2, #0
 8002b08:	2102      	movs	r1, #2
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff fa4c 	bl	8001fa8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2103      	movs	r1, #3
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7ff fa30 	bl	8001f7c <LL_ADC_GetOffsetChannel>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10a      	bne.n	8002b3c <HAL_ADC_ConfigChannel+0x3a8>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2103      	movs	r1, #3
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff fa25 	bl	8001f7c <LL_ADC_GetOffsetChannel>
 8002b32:	4603      	mov	r3, r0
 8002b34:	0e9b      	lsrs	r3, r3, #26
 8002b36:	f003 021f 	and.w	r2, r3, #31
 8002b3a:	e017      	b.n	8002b6c <HAL_ADC_ConfigChannel+0x3d8>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2103      	movs	r1, #3
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff fa1a 	bl	8001f7c <LL_ADC_GetOffsetChannel>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b4e:	fa93 f3a3 	rbit	r3, r3
 8002b52:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002b54:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b56:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002b58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002b5e:	2320      	movs	r3, #32
 8002b60:	e003      	b.n	8002b6a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002b62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b64:	fab3 f383 	clz	r3, r3
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d105      	bne.n	8002b84 <HAL_ADC_ConfigChannel+0x3f0>
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	0e9b      	lsrs	r3, r3, #26
 8002b7e:	f003 031f 	and.w	r3, r3, #31
 8002b82:	e011      	b.n	8002ba8 <HAL_ADC_ConfigChannel+0x414>
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b8c:	fa93 f3a3 	rbit	r3, r3
 8002b90:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002b92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b94:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002b96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d101      	bne.n	8002ba0 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002b9c:	2320      	movs	r3, #32
 8002b9e:	e003      	b.n	8002ba8 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002ba0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ba2:	fab3 f383 	clz	r3, r3
 8002ba6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d106      	bne.n	8002bba <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	2103      	movs	r1, #3
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7ff f9f7 	bl	8001fa8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff fb68 	bl	8002294 <LL_ADC_IsEnabled>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f040 8140 	bne.w	8002e4c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6818      	ldr	r0, [r3, #0]
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	6819      	ldr	r1, [r3, #0]
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	461a      	mov	r2, r3
 8002bda:	f7ff fab3 	bl	8002144 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	4a8f      	ldr	r2, [pc, #572]	@ (8002e20 <HAL_ADC_ConfigChannel+0x68c>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	f040 8131 	bne.w	8002e4c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d10b      	bne.n	8002c12 <HAL_ADC_ConfigChannel+0x47e>
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	0e9b      	lsrs	r3, r3, #26
 8002c00:	3301      	adds	r3, #1
 8002c02:	f003 031f 	and.w	r3, r3, #31
 8002c06:	2b09      	cmp	r3, #9
 8002c08:	bf94      	ite	ls
 8002c0a:	2301      	movls	r3, #1
 8002c0c:	2300      	movhi	r3, #0
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	e019      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x4b2>
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c1a:	fa93 f3a3 	rbit	r3, r3
 8002c1e:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002c20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c22:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002c24:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002c2a:	2320      	movs	r3, #32
 8002c2c:	e003      	b.n	8002c36 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002c2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c30:	fab3 f383 	clz	r3, r3
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	3301      	adds	r3, #1
 8002c38:	f003 031f 	and.w	r3, r3, #31
 8002c3c:	2b09      	cmp	r3, #9
 8002c3e:	bf94      	ite	ls
 8002c40:	2301      	movls	r3, #1
 8002c42:	2300      	movhi	r3, #0
 8002c44:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d079      	beq.n	8002d3e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d107      	bne.n	8002c66 <HAL_ADC_ConfigChannel+0x4d2>
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	0e9b      	lsrs	r3, r3, #26
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	069b      	lsls	r3, r3, #26
 8002c60:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c64:	e015      	b.n	8002c92 <HAL_ADC_ConfigChannel+0x4fe>
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c6e:	fa93 f3a3 	rbit	r3, r3
 8002c72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002c74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c76:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002c78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002c7e:	2320      	movs	r3, #32
 8002c80:	e003      	b.n	8002c8a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002c82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c84:	fab3 f383 	clz	r3, r3
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	069b      	lsls	r3, r3, #26
 8002c8e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d109      	bne.n	8002cb2 <HAL_ADC_ConfigChannel+0x51e>
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	0e9b      	lsrs	r3, r3, #26
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	f003 031f 	and.w	r3, r3, #31
 8002caa:	2101      	movs	r1, #1
 8002cac:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb0:	e017      	b.n	8002ce2 <HAL_ADC_ConfigChannel+0x54e>
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cba:	fa93 f3a3 	rbit	r3, r3
 8002cbe:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002cc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cc2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002cc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002cca:	2320      	movs	r3, #32
 8002ccc:	e003      	b.n	8002cd6 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002cce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cd0:	fab3 f383 	clz	r3, r3
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	f003 031f 	and.w	r3, r3, #31
 8002cdc:	2101      	movs	r1, #1
 8002cde:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce2:	ea42 0103 	orr.w	r1, r2, r3
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10a      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0x574>
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	0e9b      	lsrs	r3, r3, #26
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	f003 021f 	and.w	r2, r3, #31
 8002cfe:	4613      	mov	r3, r2
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	4413      	add	r3, r2
 8002d04:	051b      	lsls	r3, r3, #20
 8002d06:	e018      	b.n	8002d3a <HAL_ADC_ConfigChannel+0x5a6>
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d10:	fa93 f3a3 	rbit	r3, r3
 8002d14:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002d16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d18:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002d1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002d20:	2320      	movs	r3, #32
 8002d22:	e003      	b.n	8002d2c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002d24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d26:	fab3 f383 	clz	r3, r3
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	f003 021f 	and.w	r2, r3, #31
 8002d32:	4613      	mov	r3, r2
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	4413      	add	r3, r2
 8002d38:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d3a:	430b      	orrs	r3, r1
 8002d3c:	e081      	b.n	8002e42 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d107      	bne.n	8002d5a <HAL_ADC_ConfigChannel+0x5c6>
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	0e9b      	lsrs	r3, r3, #26
 8002d50:	3301      	adds	r3, #1
 8002d52:	069b      	lsls	r3, r3, #26
 8002d54:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d58:	e015      	b.n	8002d86 <HAL_ADC_ConfigChannel+0x5f2>
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d62:	fa93 f3a3 	rbit	r3, r3
 8002d66:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d6a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002d72:	2320      	movs	r3, #32
 8002d74:	e003      	b.n	8002d7e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d78:	fab3 f383 	clz	r3, r3
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	3301      	adds	r3, #1
 8002d80:	069b      	lsls	r3, r3, #26
 8002d82:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d109      	bne.n	8002da6 <HAL_ADC_ConfigChannel+0x612>
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	0e9b      	lsrs	r3, r3, #26
 8002d98:	3301      	adds	r3, #1
 8002d9a:	f003 031f 	and.w	r3, r3, #31
 8002d9e:	2101      	movs	r1, #1
 8002da0:	fa01 f303 	lsl.w	r3, r1, r3
 8002da4:	e017      	b.n	8002dd6 <HAL_ADC_ConfigChannel+0x642>
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dac:	6a3b      	ldr	r3, [r7, #32]
 8002dae:	fa93 f3a3 	rbit	r3, r3
 8002db2:	61fb      	str	r3, [r7, #28]
  return result;
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002dbe:	2320      	movs	r3, #32
 8002dc0:	e003      	b.n	8002dca <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc4:	fab3 f383 	clz	r3, r3
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	3301      	adds	r3, #1
 8002dcc:	f003 031f 	and.w	r3, r3, #31
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd6:	ea42 0103 	orr.w	r1, r2, r3
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d10d      	bne.n	8002e02 <HAL_ADC_ConfigChannel+0x66e>
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	0e9b      	lsrs	r3, r3, #26
 8002dec:	3301      	adds	r3, #1
 8002dee:	f003 021f 	and.w	r2, r3, #31
 8002df2:	4613      	mov	r3, r2
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	4413      	add	r3, r2
 8002df8:	3b1e      	subs	r3, #30
 8002dfa:	051b      	lsls	r3, r3, #20
 8002dfc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002e00:	e01e      	b.n	8002e40 <HAL_ADC_ConfigChannel+0x6ac>
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	fa93 f3a3 	rbit	r3, r3
 8002e0e:	613b      	str	r3, [r7, #16]
  return result;
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d104      	bne.n	8002e24 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002e1a:	2320      	movs	r3, #32
 8002e1c:	e006      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x698>
 8002e1e:	bf00      	nop
 8002e20:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	fab3 f383 	clz	r3, r3
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	f003 021f 	and.w	r2, r3, #31
 8002e32:	4613      	mov	r3, r2
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	4413      	add	r3, r2
 8002e38:	3b1e      	subs	r3, #30
 8002e3a:	051b      	lsls	r3, r3, #20
 8002e3c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e40:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e46:	4619      	mov	r1, r3
 8002e48:	f7ff f951 	bl	80020ee <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	4b45      	ldr	r3, [pc, #276]	@ (8002f68 <HAL_ADC_ConfigChannel+0x7d4>)
 8002e52:	4013      	ands	r3, r2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d07d      	beq.n	8002f54 <HAL_ADC_ConfigChannel+0x7c0>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e58:	4844      	ldr	r0, [pc, #272]	@ (8002f6c <HAL_ADC_ConfigChannel+0x7d8>)
 8002e5a:	f7ff f849 	bl	8001ef0 <LL_ADC_GetCommonPathInternalCh>
 8002e5e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a42      	ldr	r2, [pc, #264]	@ (8002f70 <HAL_ADC_ConfigChannel+0x7dc>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d127      	bne.n	8002ebc <HAL_ADC_ConfigChannel+0x728>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d121      	bne.n	8002ebc <HAL_ADC_ConfigChannel+0x728>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a3d      	ldr	r2, [pc, #244]	@ (8002f74 <HAL_ADC_ConfigChannel+0x7e0>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d168      	bne.n	8002f54 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e86:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	4837      	ldr	r0, [pc, #220]	@ (8002f6c <HAL_ADC_ConfigChannel+0x7d8>)
 8002e8e:	f7ff f81c 	bl	8001eca <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e92:	4b39      	ldr	r3, [pc, #228]	@ (8002f78 <HAL_ADC_ConfigChannel+0x7e4>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	099b      	lsrs	r3, r3, #6
 8002e98:	4a38      	ldr	r2, [pc, #224]	@ (8002f7c <HAL_ADC_ConfigChannel+0x7e8>)
 8002e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9e:	099b      	lsrs	r3, r3, #6
 8002ea0:	1c5a      	adds	r2, r3, #1
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	4413      	add	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002eac:	e002      	b.n	8002eb4 <HAL_ADC_ConfigChannel+0x720>
          {
            wait_loop_index--;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1f9      	bne.n	8002eae <HAL_ADC_ConfigChannel+0x71a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002eba:	e04b      	b.n	8002f54 <HAL_ADC_ConfigChannel+0x7c0>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a2f      	ldr	r2, [pc, #188]	@ (8002f80 <HAL_ADC_ConfigChannel+0x7ec>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d113      	bne.n	8002eee <HAL_ADC_ConfigChannel+0x75a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ec6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002eca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10d      	bne.n	8002eee <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a2b      	ldr	r2, [pc, #172]	@ (8002f84 <HAL_ADC_ConfigChannel+0x7f0>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d13b      	bne.n	8002f54 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002edc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ee0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	4821      	ldr	r0, [pc, #132]	@ (8002f6c <HAL_ADC_ConfigChannel+0x7d8>)
 8002ee8:	f7fe ffef 	bl	8001eca <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002eec:	e032      	b.n	8002f54 <HAL_ADC_ConfigChannel+0x7c0>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a25      	ldr	r2, [pc, #148]	@ (8002f88 <HAL_ADC_ConfigChannel+0x7f4>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d113      	bne.n	8002f20 <HAL_ADC_ConfigChannel+0x78c>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ef8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002efc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10d      	bne.n	8002f20 <HAL_ADC_ConfigChannel+0x78c>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a1a      	ldr	r2, [pc, #104]	@ (8002f74 <HAL_ADC_ConfigChannel+0x7e0>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d122      	bne.n	8002f54 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f12:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002f16:	4619      	mov	r1, r3
 8002f18:	4814      	ldr	r0, [pc, #80]	@ (8002f6c <HAL_ADC_ConfigChannel+0x7d8>)
 8002f1a:	f7fe ffd6 	bl	8001eca <LL_ADC_SetCommonPathInternalCh>
        if (ADC_VREFINT_INSTANCE(hadc))
 8002f1e:	e019      	b.n	8002f54 <HAL_ADC_ConfigChannel+0x7c0>
                                         LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
        }
      }
      else if (pConfig->Channel == ADC_CHANNEL_VDDCORE)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a19      	ldr	r2, [pc, #100]	@ (8002f8c <HAL_ADC_ConfigChannel+0x7f8>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d114      	bne.n	8002f54 <HAL_ADC_ConfigChannel+0x7c0>
      {
        if (ADC_VDDCORE_INSTANCE(hadc))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a15      	ldr	r2, [pc, #84]	@ (8002f84 <HAL_ADC_ConfigChannel+0x7f0>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d10f      	bne.n	8002f54 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetPathInternalChAdd(hadc->Instance, LL_ADC_PATH_INTERNAL_VDDCORE);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2101      	movs	r1, #1
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7fe ffe6 	bl	8001f0c <LL_ADC_SetPathInternalChAdd>
 8002f40:	e008      	b.n	8002f54 <HAL_ADC_ConfigChannel+0x7c0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f46:	f043 0220 	orr.w	r2, r3, #32
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002f5c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	37d8      	adds	r7, #216	@ 0xd8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	80080000 	.word	0x80080000
 8002f6c:	40022300 	.word	0x40022300
 8002f70:	c3210000 	.word	0xc3210000
 8002f74:	40022000 	.word	0x40022000
 8002f78:	24000000 	.word	0x24000000
 8002f7c:	053e2d63 	.word	0x053e2d63
 8002f80:	43290000 	.word	0x43290000
 8002f84:	40022100 	.word	0x40022100
 8002f88:	c7520000 	.word	0xc7520000
 8002f8c:	475a0000 	.word	0x475a0000

08002f90 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7ff f977 	bl	8002294 <LL_ADC_IsEnabled>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d169      	bne.n	8003080 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689a      	ldr	r2, [r3, #8]
 8002fb2:	4b36      	ldr	r3, [pc, #216]	@ (800308c <ADC_Enable+0xfc>)
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00d      	beq.n	8002fd6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fbe:	f043 0210 	orr.w	r2, r3, #16
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fca:	f043 0201 	orr.w	r2, r3, #1
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e055      	b.n	8003082 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff f932 	bl	8002244 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002fe0:	482b      	ldr	r0, [pc, #172]	@ (8003090 <ADC_Enable+0x100>)
 8002fe2:	f7fe ff85 	bl	8001ef0 <LL_ADC_GetCommonPathInternalCh>
 8002fe6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002fe8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d013      	beq.n	8003018 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ff0:	4b28      	ldr	r3, [pc, #160]	@ (8003094 <ADC_Enable+0x104>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	099b      	lsrs	r3, r3, #6
 8002ff6:	4a28      	ldr	r2, [pc, #160]	@ (8003098 <ADC_Enable+0x108>)
 8002ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffc:	099b      	lsrs	r3, r3, #6
 8002ffe:	1c5a      	adds	r2, r3, #1
 8003000:	4613      	mov	r3, r2
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	4413      	add	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800300a:	e002      	b.n	8003012 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	3b01      	subs	r3, #1
 8003010:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1f9      	bne.n	800300c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003018:	f7fe ff14 	bl	8001e44 <HAL_GetTick>
 800301c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800301e:	e028      	b.n	8003072 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4618      	mov	r0, r3
 8003026:	f7ff f935 	bl	8002294 <LL_ADC_IsEnabled>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d104      	bne.n	800303a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff f905 	bl	8002244 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800303a:	f7fe ff03 	bl	8001e44 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d914      	bls.n	8003072 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b01      	cmp	r3, #1
 8003054:	d00d      	beq.n	8003072 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800305a:	f043 0210 	orr.w	r2, r3, #16
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003066:	f043 0201 	orr.w	r2, r3, #1
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e007      	b.n	8003082 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0301 	and.w	r3, r3, #1
 800307c:	2b01      	cmp	r3, #1
 800307e:	d1cf      	bne.n	8003020 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	8000003f 	.word	0x8000003f
 8003090:	40022300 	.word	0x40022300
 8003094:	24000000 	.word	0x24000000
 8003098:	053e2d63 	.word	0x053e2d63

0800309c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff f906 	bl	80022ba <LL_ADC_IsDisableOngoing>
 80030ae:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7ff f8ed 	bl	8002294 <LL_ADC_IsEnabled>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d047      	beq.n	8003150 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d144      	bne.n	8003150 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f003 030d 	and.w	r3, r3, #13
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d10c      	bne.n	80030ee <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4618      	mov	r0, r3
 80030da:	f7ff f8c7 	bl	800226c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2203      	movs	r2, #3
 80030e4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80030e6:	f7fe fead 	bl	8001e44 <HAL_GetTick>
 80030ea:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80030ec:	e029      	b.n	8003142 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030f2:	f043 0210 	orr.w	r2, r3, #16
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030fe:	f043 0201 	orr.w	r2, r3, #1
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e023      	b.n	8003152 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800310a:	f7fe fe9b 	bl	8001e44 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d914      	bls.n	8003142 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00d      	beq.n	8003142 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800312a:	f043 0210 	orr.w	r2, r3, #16
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003136:	f043 0201 	orr.w	r2, r3, #1
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e007      	b.n	8003152 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1dc      	bne.n	800310a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b084      	sub	sp, #16
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003166:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800316c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003170:	2b00      	cmp	r3, #0
 8003172:	d14b      	bne.n	800320c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003178:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0308 	and.w	r3, r3, #8
 800318a:	2b00      	cmp	r3, #0
 800318c:	d021      	beq.n	80031d2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4618      	mov	r0, r3
 8003194:	f7fe ff6c 	bl	8002070 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d032      	beq.n	8003204 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d12b      	bne.n	8003204 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d11f      	bne.n	8003204 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c8:	f043 0201 	orr.w	r2, r3, #1
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	659a      	str	r2, [r3, #88]	@ 0x58
 80031d0:	e018      	b.n	8003204 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d111      	bne.n	8003204 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d105      	bne.n	8003204 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031fc:	f043 0201 	orr.w	r2, r3, #1
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	f00a fed1 	bl	800dfac <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800320a:	e00e      	b.n	800322a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003210:	f003 0310 	and.w	r3, r3, #16
 8003214:	2b00      	cmp	r3, #0
 8003216:	d003      	beq.n	8003220 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f7ff fab1 	bl	8002780 <HAL_ADC_ErrorCallback>
}
 800321e:	e004      	b.n	800322a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003224:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	4798      	blx	r3
}
 800322a:	bf00      	nop
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b084      	sub	sp, #16
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800323e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f7ff fa93 	bl	800276c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003246:	bf00      	nop
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800324e:	b580      	push	{r7, lr}
 8003250:	b084      	sub	sp, #16
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800325a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003260:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800326c:	f043 0204 	orr.w	r2, r3, #4
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f7ff fa83 	bl	8002780 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800327a:	bf00      	nop
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <LL_ADC_IsEnabled>:
{
 8003282:	b480      	push	{r7}
 8003284:	b083      	sub	sp, #12
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b01      	cmp	r3, #1
 8003294:	d101      	bne.n	800329a <LL_ADC_IsEnabled+0x18>
 8003296:	2301      	movs	r3, #1
 8003298:	e000      	b.n	800329c <LL_ADC_IsEnabled+0x1a>
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <LL_ADC_StartCalibration>:
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	689a      	ldr	r2, [r3, #8]
 80032b6:	4b08      	ldr	r3, [pc, #32]	@ (80032d8 <LL_ADC_StartCalibration+0x30>)
 80032b8:	4013      	ands	r3, r2
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80032c0:	4313      	orrs	r3, r2
 80032c2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	609a      	str	r2, [r3, #8]
}
 80032ca:	bf00      	nop
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	3fffffc0 	.word	0x3fffffc0

080032dc <LL_ADC_IsCalibrationOnGoing>:
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80032ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80032f0:	d101      	bne.n	80032f6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80032f2:	2301      	movs	r3, #1
 80032f4:	e000      	b.n	80032f8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <LL_ADC_REG_StartConversion>:
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689a      	ldr	r2, [r3, #8]
 8003310:	4b05      	ldr	r3, [pc, #20]	@ (8003328 <LL_ADC_REG_StartConversion+0x24>)
 8003312:	4013      	ands	r3, r2
 8003314:	f043 0204 	orr.w	r2, r3, #4
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	609a      	str	r2, [r3, #8]
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr
 8003328:	7fffffc0 	.word	0x7fffffc0

0800332c <LL_ADC_REG_IsConversionOngoing>:
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f003 0304 	and.w	r3, r3, #4
 800333c:	2b04      	cmp	r3, #4
 800333e:	d101      	bne.n	8003344 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003340:	2301      	movs	r3, #1
 8003342:	e000      	b.n	8003346 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
	...

08003354 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800335e:	2300      	movs	r3, #0
 8003360:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003368:	2b01      	cmp	r3, #1
 800336a:	d101      	bne.n	8003370 <HAL_ADCEx_Calibration_Start+0x1c>
 800336c:	2302      	movs	r3, #2
 800336e:	e04b      	b.n	8003408 <HAL_ADCEx_Calibration_Start+0xb4>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f7ff fe8f 	bl	800309c <ADC_Disable>
 800337e:	4603      	mov	r3, r0
 8003380:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003382:	7bfb      	ldrb	r3, [r7, #15]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d134      	bne.n	80033f2 <HAL_ADCEx_Calibration_Start+0x9e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800338c:	4b20      	ldr	r3, [pc, #128]	@ (8003410 <HAL_ADCEx_Calibration_Start+0xbc>)
 800338e:	4013      	ands	r3, r2
 8003390:	f043 0202 	orr.w	r2, r3, #2
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	6839      	ldr	r1, [r7, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f7ff ff82 	bl	80032a8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80033a4:	e014      	b.n	80033d0 <HAL_ADCEx_Calibration_Start+0x7c>
    {
      wait_loop_index++;
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	3301      	adds	r3, #1
 80033aa:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	4a19      	ldr	r2, [pc, #100]	@ (8003414 <HAL_ADCEx_Calibration_Start+0xc0>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d30d      	bcc.n	80033d0 <HAL_ADCEx_Calibration_Start+0x7c>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b8:	f023 0312 	bic.w	r3, r3, #18
 80033bc:	f043 0210 	orr.w	r2, r3, #16
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e01b      	b.n	8003408 <HAL_ADCEx_Calibration_Start+0xb4>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7ff ff81 	bl	80032dc <LL_ADC_IsCalibrationOnGoing>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1e2      	bne.n	80033a6 <HAL_ADCEx_Calibration_Start+0x52>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033e4:	f023 0303 	bic.w	r3, r3, #3
 80033e8:	f043 0201 	orr.w	r2, r3, #1
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	659a      	str	r2, [r3, #88]	@ 0x58
 80033f0:	e005      	b.n	80033fe <HAL_ADCEx_Calibration_Start+0xaa>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033f6:	f043 0210 	orr.w	r2, r3, #16
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003406:	7bfb      	ldrb	r3, [r7, #15]
}
 8003408:	4618      	mov	r0, r3
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	ffffeefd 	.word	0xffffeefd
 8003414:	25c3f800 	.word	0x25c3f800

08003418 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b0bc      	sub	sp, #240	@ 0xf0
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4618      	mov	r0, r3
 800342a:	f7ff ff7f 	bl	800332c <LL_ADC_REG_IsConversionOngoing>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 8003434:	2302      	movs	r3, #2
 8003436:	e0f0      	b.n	800361a <HAL_ADCEx_MultiModeStart_DMA+0x202>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800343e:	2b01      	cmp	r3, #1
 8003440:	d101      	bne.n	8003446 <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 8003442:	2302      	movs	r3, #2
 8003444:	e0e9      	b.n	800361a <HAL_ADCEx_MultiModeStart_DMA+0x202>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Temporary handle minimum initialization */
    __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800344e:	2300      	movs	r3, #0
 8003450:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003454:	2300      	movs	r3, #0
 8003456:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a71      	ldr	r2, [pc, #452]	@ (8003624 <HAL_ADCEx_MultiModeStart_DMA+0x20c>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d102      	bne.n	800346a <HAL_ADCEx_MultiModeStart_DMA+0x52>
 8003464:	4b70      	ldr	r3, [pc, #448]	@ (8003628 <HAL_ADCEx_MultiModeStart_DMA+0x210>)
 8003466:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003468:	e001      	b.n	800346e <HAL_ADCEx_MultiModeStart_DMA+0x56>
 800346a:	2300      	movs	r3, #0
 800346c:	67fb      	str	r3, [r7, #124]	@ 0x7c

    if (tmp_hadc_slave.Instance == NULL)
 800346e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10b      	bne.n	800348c <HAL_ADCEx_MultiModeStart_DMA+0x74>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003478:	f043 0220 	orr.w	r2, r3, #32
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e0c6      	b.n	800361a <HAL_ADCEx_MultiModeStart_DMA+0x202>
    }

    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f7ff fd7f 	bl	8002f90 <ADC_Enable>
 8003492:	4603      	mov	r3, r0
 8003494:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
    if (tmp_hal_status == HAL_OK)
 8003498:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800349c:	2b00      	cmp	r3, #0
 800349e:	d107      	bne.n	80034b0 <HAL_ADCEx_MultiModeStart_DMA+0x98>
    {
      tmp_hal_status = ADC_Enable(&tmp_hadc_slave);
 80034a0:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7ff fd73 	bl	8002f90 <ADC_Enable>
 80034aa:	4603      	mov	r3, r0
 80034ac:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 80034b0:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f040 80aa 	bne.w	800360e <HAL_ADCEx_MultiModeStart_DMA+0x1f6>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80034be:	4b5b      	ldr	r3, [pc, #364]	@ (800362c <HAL_ADCEx_MultiModeStart_DMA+0x214>)
 80034c0:	4013      	ands	r3, r2
 80034c2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	659a      	str	r2, [r3, #88]	@ 0x58
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034d4:	4a56      	ldr	r2, [pc, #344]	@ (8003630 <HAL_ADCEx_MultiModeStart_DMA+0x218>)
 80034d6:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034dc:	4a55      	ldr	r2, [pc, #340]	@ (8003634 <HAL_ADCEx_MultiModeStart_DMA+0x21c>)
 80034de:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034e4:	4a54      	ldr	r2, [pc, #336]	@ (8003638 <HAL_ADCEx_MultiModeStart_DMA+0x220>)
 80034e6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Pointer to the common control register  */
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80034e8:	4b54      	ldr	r3, [pc, #336]	@ (800363c <HAL_ADCEx_MultiModeStart_DMA+0x224>)
 80034ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	221c      	movs	r2, #28
 80034f4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f042 0210 	orr.w	r2, r2, #16
 800350c:	605a      	str	r2, [r3, #4]

      /* Check linkedlist mode */
      if ((hadc->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003512:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003514:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003518:	2b00      	cmp	r3, #0
 800351a:	d04d      	beq.n	80035b8 <HAL_ADCEx_MultiModeStart_DMA+0x1a0>
      {
        if ((hadc->DMA_Handle->LinkedListQueue != NULL) && (hadc->DMA_Handle->LinkedListQueue->Head != NULL))
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003520:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003522:	2b00      	cmp	r3, #0
 8003524:	d046      	beq.n	80035b4 <HAL_ADCEx_MultiModeStart_DMA+0x19c>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800352a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d040      	beq.n	80035b4 <HAL_ADCEx_MultiModeStart_DMA+0x19c>
        {
          /* Length should be converted to number of bytes */
          if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hadc->DMA_Handle->LinkedListQueue->Head) != HAL_OK)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003536:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	f107 0310 	add.w	r3, r7, #16
 800353e:	4611      	mov	r1, r2
 8003540:	4618      	mov	r0, r3
 8003542:	f000 fe33 	bl	80041ac <HAL_DMAEx_List_GetNodeConfig>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d001      	beq.n	8003550 <HAL_ADCEx_MultiModeStart_DMA+0x138>
          {
            return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e064      	b.n	800361a <HAL_ADCEx_MultiModeStart_DMA+0x202>
          }

          /* Length should be converted to number of bytes */
          if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8003550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003552:	2b02      	cmp	r3, #2
 8003554:	d104      	bne.n	8003560 <HAL_ADCEx_MultiModeStart_DMA+0x148>
          {
            /* Word -> Bytes */
            length_bytes = Length * 4U;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800355e:	e00a      	b.n	8003576 <HAL_ADCEx_MultiModeStart_DMA+0x15e>
          }
          else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8003560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003562:	2b01      	cmp	r3, #1
 8003564:	d104      	bne.n	8003570 <HAL_ADCEx_MultiModeStart_DMA+0x158>
          {
            /* Halfword -> Bytes */
            length_bytes = Length * 2U;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800356e:	e002      	b.n	8003576 <HAL_ADCEx_MultiModeStart_DMA+0x15e>
          }
          else /* Bytes */
          {
            /* Same size already expressed in Bytes */
            length_bytes = Length;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
          }

          hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (uint32_t)length_bytes;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800357a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8003582:	609a      	str	r2, [r3, #8]
          hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
              (uint32_t)&tmpADC_Common->CDR;
 8003584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003588:	f103 020c 	add.w	r2, r3, #12
          hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003590:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	60da      	str	r2, [r3, #12]
          hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800359a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68ba      	ldr	r2, [r7, #8]
 80035a0:	611a      	str	r2, [r3, #16]
          tmp_hal_status = HAL_DMAEx_List_Start_IT(hadc->DMA_Handle);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 fd54 	bl	8004054 <HAL_DMAEx_List_Start_IT>
 80035ac:	4603      	mov	r3, r0
 80035ae:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
 80035b2:	e026      	b.n	8003602 <HAL_ADCEx_MultiModeStart_DMA+0x1ea>
        }
        else
        {
          return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e030      	b.n	800361a <HAL_ADCEx_MultiModeStart_DMA+0x202>
        }
      }
      else
      {
        /* Length should be converted to number of bytes */
        if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d104      	bne.n	80035cc <HAL_ADCEx_MultiModeStart_DMA+0x1b4>
        {
          /* Word -> Bytes */
          length_bytes = Length * 4U;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80035ca:	e00c      	b.n	80035e6 <HAL_ADCEx_MultiModeStart_DMA+0x1ce>
        }
        else if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d104      	bne.n	80035e0 <HAL_ADCEx_MultiModeStart_DMA+0x1c8>
        {
          /* Halfword -> Bytes */
          length_bytes = Length * 2U;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80035de:	e002      	b.n	80035e6 <HAL_ADCEx_MultiModeStart_DMA+0x1ce>
        }
        else /* Bytes */
        {
          /* Same size already expressed in Bytes */
          length_bytes = Length;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
        }

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData,        \
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80035ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035ee:	330c      	adds	r3, #12
 80035f0:	4619      	mov	r1, r3
 80035f2:	68ba      	ldr	r2, [r7, #8]
 80035f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80035f8:	f000 f9d5 	bl	80039a6 <HAL_DMA_Start_IT>
 80035fc:	4603      	mov	r3, r0
 80035fe:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
      /* Enable conversion of regular group.                                    */
      /* If software start has been selected, conversion starts immediately.    */
      /* If external trigger has been selected, conversion will start at next   */
      /* trigger event.                                                         */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4618      	mov	r0, r3
 8003608:	f7ff fe7c 	bl	8003304 <LL_ADC_REG_StartConversion>
 800360c:	e003      	b.n	8003616 <HAL_ADCEx_MultiModeStart_DMA+0x1fe>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
    }

    /* Return function status */
    return tmp_hal_status;
 8003616:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
  }
}
 800361a:	4618      	mov	r0, r3
 800361c:	37f0      	adds	r7, #240	@ 0xf0
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	40022000 	.word	0x40022000
 8003628:	40022100 	.word	0x40022100
 800362c:	fffff0fe 	.word	0xfffff0fe
 8003630:	0800315b 	.word	0x0800315b
 8003634:	08003233 	.word	0x08003233
 8003638:	0800324f 	.word	0x0800324f
 800363c:	40022300 	.word	0x40022300

08003640 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003640:	b590      	push	{r4, r7, lr}
 8003642:	b0a1      	sub	sp, #132	@ 0x84
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800364a:	2300      	movs	r3, #0
 800364c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003656:	2b01      	cmp	r3, #1
 8003658:	d101      	bne.n	800365e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800365a:	2302      	movs	r3, #2
 800365c:	e087      	b.n	800376e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003666:	2300      	movs	r3, #0
 8003668:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800366a:	2300      	movs	r3, #0
 800366c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a41      	ldr	r2, [pc, #260]	@ (8003778 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d102      	bne.n	800367e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003678:	4b40      	ldr	r3, [pc, #256]	@ (800377c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800367a:	60fb      	str	r3, [r7, #12]
 800367c:	e001      	b.n	8003682 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800367e:	2300      	movs	r3, #0
 8003680:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d10b      	bne.n	80036a0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800368c:	f043 0220 	orr.w	r2, r3, #32
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e066      	b.n	800376e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7ff fe42 	bl	800332c <LL_ADC_REG_IsConversionOngoing>
 80036a8:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7ff fe3c 	bl	800332c <LL_ADC_REG_IsConversionOngoing>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d148      	bne.n	800374c <HAL_ADCEx_MultiModeConfigChannel+0x10c>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80036ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d145      	bne.n	800374c <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80036c0:	4b2f      	ldr	r3, [pc, #188]	@ (8003780 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80036c2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d027      	beq.n	800371c <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80036cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	6859      	ldr	r1, [r3, #4]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036dc:	085b      	lsrs	r3, r3, #1
 80036de:	035b      	lsls	r3, r3, #13
 80036e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036e4:	430b      	orrs	r3, r1
 80036e6:	431a      	orrs	r2, r3
 80036e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036ea:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036ec:	4822      	ldr	r0, [pc, #136]	@ (8003778 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 80036ee:	f7ff fdc8 	bl	8003282 <LL_ADC_IsEnabled>
 80036f2:	4604      	mov	r4, r0
 80036f4:	4821      	ldr	r0, [pc, #132]	@ (800377c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80036f6:	f7ff fdc4 	bl	8003282 <LL_ADC_IsEnabled>
 80036fa:	4603      	mov	r3, r0
 80036fc:	4323      	orrs	r3, r4
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d12e      	bne.n	8003760 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003702:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003704:	689a      	ldr	r2, [r3, #8]
 8003706:	4b1f      	ldr	r3, [pc, #124]	@ (8003784 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003708:	4013      	ands	r3, r2
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	6811      	ldr	r1, [r2, #0]
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	6892      	ldr	r2, [r2, #8]
 8003712:	430a      	orrs	r2, r1
 8003714:	431a      	orrs	r2, r3
 8003716:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003718:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800371a:	e021      	b.n	8003760 <HAL_ADCEx_MultiModeConfigChannel+0x120>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800371c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003724:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003726:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003728:	4813      	ldr	r0, [pc, #76]	@ (8003778 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 800372a:	f7ff fdaa 	bl	8003282 <LL_ADC_IsEnabled>
 800372e:	4604      	mov	r4, r0
 8003730:	4812      	ldr	r0, [pc, #72]	@ (800377c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003732:	f7ff fda6 	bl	8003282 <LL_ADC_IsEnabled>
 8003736:	4603      	mov	r3, r0
 8003738:	4323      	orrs	r3, r4
 800373a:	2b00      	cmp	r3, #0
 800373c:	d110      	bne.n	8003760 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800373e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003740:	689a      	ldr	r2, [r3, #8]
 8003742:	4b10      	ldr	r3, [pc, #64]	@ (8003784 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003744:	4013      	ands	r3, r2
 8003746:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003748:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800374a:	e009      	b.n	8003760 <HAL_ADCEx_MultiModeConfigChannel+0x120>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003750:	f043 0220 	orr.w	r2, r3, #32
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800375e:	e000      	b.n	8003762 <HAL_ADCEx_MultiModeConfigChannel+0x122>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003760:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800376a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800376e:	4618      	mov	r0, r3
 8003770:	3784      	adds	r7, #132	@ 0x84
 8003772:	46bd      	mov	sp, r7
 8003774:	bd90      	pop	{r4, r7, pc}
 8003776:	bf00      	nop
 8003778:	40022000 	.word	0x40022000
 800377c:	40022100 	.word	0x40022100
 8003780:	40022300 	.word	0x40022300
 8003784:	fffff0e0 	.word	0xfffff0e0

08003788 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003788:	b480      	push	{r7}
 800378a:	b085      	sub	sp, #20
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f003 0307 	and.w	r3, r3, #7
 8003796:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003798:	4b0b      	ldr	r3, [pc, #44]	@ (80037c8 <__NVIC_SetPriorityGrouping+0x40>)
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80037a4:	4013      	ands	r3, r2
 80037a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80037b0:	4b06      	ldr	r3, [pc, #24]	@ (80037cc <__NVIC_SetPriorityGrouping+0x44>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037b6:	4a04      	ldr	r2, [pc, #16]	@ (80037c8 <__NVIC_SetPriorityGrouping+0x40>)
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	60d3      	str	r3, [r2, #12]
}
 80037bc:	bf00      	nop
 80037be:	3714      	adds	r7, #20
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr
 80037c8:	e000ed00 	.word	0xe000ed00
 80037cc:	05fa0000 	.word	0x05fa0000

080037d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037d0:	b480      	push	{r7}
 80037d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037d4:	4b04      	ldr	r3, [pc, #16]	@ (80037e8 <__NVIC_GetPriorityGrouping+0x18>)
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	0a1b      	lsrs	r3, r3, #8
 80037da:	f003 0307 	and.w	r3, r3, #7
}
 80037de:	4618      	mov	r0, r3
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr
 80037e8:	e000ed00 	.word	0xe000ed00

080037ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	4603      	mov	r3, r0
 80037f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80037f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	db0b      	blt.n	8003816 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037fe:	88fb      	ldrh	r3, [r7, #6]
 8003800:	f003 021f 	and.w	r2, r3, #31
 8003804:	4907      	ldr	r1, [pc, #28]	@ (8003824 <__NVIC_EnableIRQ+0x38>)
 8003806:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800380a:	095b      	lsrs	r3, r3, #5
 800380c:	2001      	movs	r0, #1
 800380e:	fa00 f202 	lsl.w	r2, r0, r2
 8003812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003816:	bf00      	nop
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	e000e100 	.word	0xe000e100

08003828 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	4603      	mov	r3, r0
 8003830:	6039      	str	r1, [r7, #0]
 8003832:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003834:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003838:	2b00      	cmp	r3, #0
 800383a:	db0a      	blt.n	8003852 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	b2da      	uxtb	r2, r3
 8003840:	490c      	ldr	r1, [pc, #48]	@ (8003874 <__NVIC_SetPriority+0x4c>)
 8003842:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003846:	0112      	lsls	r2, r2, #4
 8003848:	b2d2      	uxtb	r2, r2
 800384a:	440b      	add	r3, r1
 800384c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003850:	e00a      	b.n	8003868 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	b2da      	uxtb	r2, r3
 8003856:	4908      	ldr	r1, [pc, #32]	@ (8003878 <__NVIC_SetPriority+0x50>)
 8003858:	88fb      	ldrh	r3, [r7, #6]
 800385a:	f003 030f 	and.w	r3, r3, #15
 800385e:	3b04      	subs	r3, #4
 8003860:	0112      	lsls	r2, r2, #4
 8003862:	b2d2      	uxtb	r2, r2
 8003864:	440b      	add	r3, r1
 8003866:	761a      	strb	r2, [r3, #24]
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr
 8003874:	e000e100 	.word	0xe000e100
 8003878:	e000ed00 	.word	0xe000ed00

0800387c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800387c:	b480      	push	{r7}
 800387e:	b089      	sub	sp, #36	@ 0x24
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f003 0307 	and.w	r3, r3, #7
 800388e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	f1c3 0307 	rsb	r3, r3, #7
 8003896:	2b04      	cmp	r3, #4
 8003898:	bf28      	it	cs
 800389a:	2304      	movcs	r3, #4
 800389c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	3304      	adds	r3, #4
 80038a2:	2b06      	cmp	r3, #6
 80038a4:	d902      	bls.n	80038ac <NVIC_EncodePriority+0x30>
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	3b03      	subs	r3, #3
 80038aa:	e000      	b.n	80038ae <NVIC_EncodePriority+0x32>
 80038ac:	2300      	movs	r3, #0
 80038ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ba:	43da      	mvns	r2, r3
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	401a      	ands	r2, r3
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038c4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	fa01 f303 	lsl.w	r3, r1, r3
 80038ce:	43d9      	mvns	r1, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038d4:	4313      	orrs	r3, r2
         );
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3724      	adds	r7, #36	@ 0x24
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
	...

080038e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	3b01      	subs	r3, #1
 80038f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038f4:	d301      	bcc.n	80038fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038f6:	2301      	movs	r3, #1
 80038f8:	e00f      	b.n	800391a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038fa:	4a0a      	ldr	r2, [pc, #40]	@ (8003924 <SysTick_Config+0x40>)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	3b01      	subs	r3, #1
 8003900:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003902:	210f      	movs	r1, #15
 8003904:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003908:	f7ff ff8e 	bl	8003828 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800390c:	4b05      	ldr	r3, [pc, #20]	@ (8003924 <SysTick_Config+0x40>)
 800390e:	2200      	movs	r2, #0
 8003910:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003912:	4b04      	ldr	r3, [pc, #16]	@ (8003924 <SysTick_Config+0x40>)
 8003914:	2207      	movs	r2, #7
 8003916:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	e000e010 	.word	0xe000e010

08003928 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f7ff ff29 	bl	8003788 <__NVIC_SetPriorityGrouping>
}
 8003936:	bf00      	nop
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b086      	sub	sp, #24
 8003942:	af00      	add	r7, sp, #0
 8003944:	4603      	mov	r3, r0
 8003946:	60b9      	str	r1, [r7, #8]
 8003948:	607a      	str	r2, [r7, #4]
 800394a:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIO_INTERRUPT(IRQn));
  prioritygroup = NVIC_GetPriorityGrouping();
 800394c:	f7ff ff40 	bl	80037d0 <__NVIC_GetPriorityGrouping>
 8003950:	6178      	str	r0, [r7, #20]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	68b9      	ldr	r1, [r7, #8]
 8003956:	6978      	ldr	r0, [r7, #20]
 8003958:	f7ff ff90 	bl	800387c <NVIC_EncodePriority>
 800395c:	4602      	mov	r2, r0
 800395e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003962:	4611      	mov	r1, r2
 8003964:	4618      	mov	r0, r3
 8003966:	f7ff ff5f 	bl	8003828 <__NVIC_SetPriority>
}
 800396a:	bf00      	nop
 800396c:	3718      	adds	r7, #24
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *         to the appropriate CMSIS device file (stm32h7rsxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b082      	sub	sp, #8
 8003976:	af00      	add	r7, sp, #0
 8003978:	4603      	mov	r3, r0
 800397a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800397c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003980:	4618      	mov	r0, r3
 8003982:	f7ff ff33 	bl	80037ec <__NVIC_EnableIRQ>
}
 8003986:	bf00      	nop
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b082      	sub	sp, #8
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7ff ffa4 	bl	80038e4 <SysTick_Config>
 800399c:	4603      	mov	r3, r0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b084      	sub	sp, #16
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	60f8      	str	r0, [r7, #12]
 80039ae:	60b9      	str	r1, [r7, #8]
 80039b0:	607a      	str	r2, [r7, #4]
 80039b2:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e04f      	b.n	8003a5e <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d101      	bne.n	80039cc <HAL_DMA_Start_IT+0x26>
 80039c8:	2302      	movs	r3, #2
 80039ca:	e048      	b.n	8003a5e <HAL_DMA_Start_IT+0xb8>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d136      	bne.n	8003a4e <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2202      	movs	r2, #2
 80039e4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	68b9      	ldr	r1, [r7, #8]
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f000 f9d9 	bl	8003dac <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	695a      	ldr	r2, [r3, #20]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8003a08:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d007      	beq.n	8003a22 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	695a      	ldr	r2, [r3, #20]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a20:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d007      	beq.n	8003a3a <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	695a      	ldr	r2, [r3, #20]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a38:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	695a      	ldr	r2, [r3, #20]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f042 0201 	orr.w	r2, r2, #1
 8003a48:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	e007      	b.n	8003a5e <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2240      	movs	r2, #64	@ 0x40
 8003a52:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
	...

08003a68 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	461a      	mov	r2, r3
 8003a76:	4b88      	ldr	r3, [pc, #544]	@ (8003c98 <HAL_DMA_IRQHandler+0x230>)
 8003a78:	4013      	ands	r3, r2
 8003a7a:	60fb      	str	r3, [r7, #12]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a84:	3b50      	subs	r3, #80	@ 0x50
 8003a86:	09db      	lsrs	r3, r3, #7
 8003a88:	f003 031f 	and.w	r3, r3, #31
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a92:	60bb      	str	r3, [r7, #8]

  /* Global Interrupt Flag management *********************************************************************************/
  if (IS_DMA_GLOBAL_ACTIVE_FLAG(p_dma_instance, global_it_flag) == 0U)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	68da      	ldr	r2, [r3, #12]
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 813e 	beq.w	8003d1e <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d011      	beq.n	8003ad4 <HAL_DMA_IRQHandler+0x6c>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00a      	beq.n	8003ad4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ac6:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003acc:	f043 0201 	orr.w	r2, r3, #1
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d011      	beq.n	8003b06 <HAL_DMA_IRQHandler+0x9e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00a      	beq.n	8003b06 <HAL_DMA_IRQHandler+0x9e>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003af8:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003afe:	f043 0202 	orr.w	r2, r3, #2
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d011      	beq.n	8003b38 <HAL_DMA_IRQHandler+0xd0>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00a      	beq.n	8003b38 <HAL_DMA_IRQHandler+0xd0>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003b2a:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b30:	f043 0204 	orr.w	r2, r3, #4
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d011      	beq.n	8003b6a <HAL_DMA_IRQHandler+0x102>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	695b      	ldr	r3, [r3, #20]
 8003b4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00a      	beq.n	8003b6a <HAL_DMA_IRQHandler+0x102>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003b5c:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b62:	f043 0208 	orr.w	r2, r3, #8
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d013      	beq.n	8003ba0 <HAL_DMA_IRQHandler+0x138>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00c      	beq.n	8003ba0 <HAL_DMA_IRQHandler+0x138>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b8e:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d003      	beq.n	8003ba0 <HAL_DMA_IRQHandler+0x138>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d04c      	beq.n	8003c48 <HAL_DMA_IRQHandler+0x1e0>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d045      	beq.n	8003c48 <HAL_DMA_IRQHandler+0x1e0>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003bc4:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	d12e      	bne.n	8003c30 <HAL_DMA_IRQHandler+0x1c8>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	695a      	ldr	r2, [r3, #20]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003be0:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	695a      	ldr	r2, [r3, #20]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f042 0202 	orr.w	r2, r2, #2
 8003bf0:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d007      	beq.n	8003c16 <HAL_DMA_IRQHandler+0x1ae>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2200      	movs	r2, #0
 8003c14:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d07d      	beq.n	8003d22 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	4798      	blx	r3
        }

        return;
 8003c2e:	e078      	b.n	8003d22 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2205      	movs	r2, #5
 8003c34:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d003      	beq.n	8003c48 <HAL_DMA_IRQHandler+0x1e0>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d03c      	beq.n	8003cd0 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	695b      	ldr	r3, [r3, #20]
 8003c5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d035      	beq.n	8003cd0 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d015      	beq.n	8003c9c <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d119      	bne.n	8003cae <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d114      	bne.n	8003cae <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c90:	2201      	movs	r2, #1
 8003c92:	731a      	strb	r2, [r3, #12]
 8003c94:	e00b      	b.n	8003cae <HAL_DMA_IRQHandler+0x246>
 8003c96:	bf00      	nop
 8003c98:	fffff000 	.word	0xfffff000
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d103      	bne.n	8003cae <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8003cb6:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d003      	beq.n	8003cd0 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d025      	beq.n	8003d24 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	695a      	ldr	r2, [r3, #20]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f042 0202 	orr.w	r2, r2, #2
 8003ce6:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d003      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d00:	2201      	movs	r2, #1
 8003d02:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d007      	beq.n	8003d24 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	4798      	blx	r3
 8003d1c:	e002      	b.n	8003d24 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8003d1e:	bf00      	nop
 8003d20:	e000      	b.n	8003d24 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8003d22:	bf00      	nop
    }
  }
}
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop

08003d2c <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel privilege attribute.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d101      	bne.n	8003d40 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e02b      	b.n	8003d98 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	461a      	mov	r2, r3
 8003d46:	4b17      	ldr	r3, [pc, #92]	@ (8003da4 <HAL_DMA_ConfigChannelAttributes+0x78>)
 8003d48:	4013      	ands	r3, r2
 8003d4a:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d54:	3b50      	subs	r3, #80	@ 0x50
 8003d56:	09db      	lsrs	r3, r3, #7
 8003d58:	f003 031f 	and.w	r3, r3, #31
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d62:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d013      	beq.n	8003d96 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8003d6e:	683a      	ldr	r2, [r7, #0]
 8003d70:	4b0d      	ldr	r3, [pc, #52]	@ (8003da8 <HAL_DMA_ConfigChannelAttributes+0x7c>)
 8003d72:	4013      	ands	r3, r2
 8003d74:	4a0c      	ldr	r2, [pc, #48]	@ (8003da8 <HAL_DMA_ConfigChannelAttributes+0x7c>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d106      	bne.n	8003d88 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	685a      	ldr	r2, [r3, #4]
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	431a      	orrs	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	605a      	str	r2, [r3, #4]
 8003d86:	e006      	b.n	8003d96 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	43db      	mvns	r3, r3
 8003d90:	401a      	ands	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	605a      	str	r2, [r3, #4]
    }
  }

  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3714      	adds	r7, #20
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr
 8003da4:	fffff000 	.word	0xfffff000
 8003da8:	01000001 	.word	0x01000001

08003dac <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]
 8003db8:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003dc0:	4b0d      	ldr	r3, [pc, #52]	@ (8003df8 <DMA_SetConfig+0x4c>)
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	b291      	uxth	r1, r2
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	6812      	ldr	r2, [r2, #0]
 8003dcc:	430b      	orrs	r3, r1
 8003dce:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8003dd8:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68ba      	ldr	r2, [r7, #8]
 8003de0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003dea:	bf00      	nop
 8003dec:	3714      	adds	r7, #20
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	ffff0000 	.word	0xffff0000

08003dfc <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8003e04:	f7fe f81e 	bl	8001e44 <HAL_GetTick>
 8003e08:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d101      	bne.n	8003e14 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e0da      	b.n	8003fca <HAL_DMAEx_List_Init+0x1ce>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if ((IS_HPDMA_INSTANCE(hdma->Instance) != 0U) || (IS_GPDMA_INSTANCE(hdma->Instance) != 0U))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a6e      	ldr	r2, [pc, #440]	@ (8003fd4 <HAL_DMAEx_List_Init+0x1d8>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d04a      	beq.n	8003eb4 <HAL_DMAEx_List_Init+0xb8>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a6d      	ldr	r2, [pc, #436]	@ (8003fd8 <HAL_DMAEx_List_Init+0x1dc>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d045      	beq.n	8003eb4 <HAL_DMAEx_List_Init+0xb8>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a6b      	ldr	r2, [pc, #428]	@ (8003fdc <HAL_DMAEx_List_Init+0x1e0>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d040      	beq.n	8003eb4 <HAL_DMAEx_List_Init+0xb8>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a6a      	ldr	r2, [pc, #424]	@ (8003fe0 <HAL_DMAEx_List_Init+0x1e4>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d03b      	beq.n	8003eb4 <HAL_DMAEx_List_Init+0xb8>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a68      	ldr	r2, [pc, #416]	@ (8003fe4 <HAL_DMAEx_List_Init+0x1e8>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d036      	beq.n	8003eb4 <HAL_DMAEx_List_Init+0xb8>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a67      	ldr	r2, [pc, #412]	@ (8003fe8 <HAL_DMAEx_List_Init+0x1ec>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d031      	beq.n	8003eb4 <HAL_DMAEx_List_Init+0xb8>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a65      	ldr	r2, [pc, #404]	@ (8003fec <HAL_DMAEx_List_Init+0x1f0>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d02c      	beq.n	8003eb4 <HAL_DMAEx_List_Init+0xb8>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a64      	ldr	r2, [pc, #400]	@ (8003ff0 <HAL_DMAEx_List_Init+0x1f4>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d027      	beq.n	8003eb4 <HAL_DMAEx_List_Init+0xb8>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a62      	ldr	r2, [pc, #392]	@ (8003ff4 <HAL_DMAEx_List_Init+0x1f8>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d022      	beq.n	8003eb4 <HAL_DMAEx_List_Init+0xb8>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a61      	ldr	r2, [pc, #388]	@ (8003ff8 <HAL_DMAEx_List_Init+0x1fc>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d01d      	beq.n	8003eb4 <HAL_DMAEx_List_Init+0xb8>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a5f      	ldr	r2, [pc, #380]	@ (8003ffc <HAL_DMAEx_List_Init+0x200>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d018      	beq.n	8003eb4 <HAL_DMAEx_List_Init+0xb8>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a5e      	ldr	r2, [pc, #376]	@ (8004000 <HAL_DMAEx_List_Init+0x204>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d013      	beq.n	8003eb4 <HAL_DMAEx_List_Init+0xb8>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a5c      	ldr	r2, [pc, #368]	@ (8004004 <HAL_DMAEx_List_Init+0x208>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d00e      	beq.n	8003eb4 <HAL_DMAEx_List_Init+0xb8>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a5b      	ldr	r2, [pc, #364]	@ (8004008 <HAL_DMAEx_List_Init+0x20c>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d009      	beq.n	8003eb4 <HAL_DMAEx_List_Init+0xb8>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a59      	ldr	r2, [pc, #356]	@ (800400c <HAL_DMAEx_List_Init+0x210>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d004      	beq.n	8003eb4 <HAL_DMAEx_List_Init+0xb8>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a58      	ldr	r2, [pc, #352]	@ (8004010 <HAL_DMAEx_List_Init+0x214>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d101      	bne.n	8003eb8 <HAL_DMAEx_List_Init+0xbc>
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e000      	b.n	8003eba <HAL_DMAEx_List_Init+0xbe>
 8003eb8:	2300      	movs	r3, #0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d14e      	bne.n	8003f5c <HAL_DMAEx_List_Init+0x160>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a54      	ldr	r2, [pc, #336]	@ (8004014 <HAL_DMAEx_List_Init+0x218>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d049      	beq.n	8003f5c <HAL_DMAEx_List_Init+0x160>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a52      	ldr	r2, [pc, #328]	@ (8004018 <HAL_DMAEx_List_Init+0x21c>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d044      	beq.n	8003f5c <HAL_DMAEx_List_Init+0x160>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a51      	ldr	r2, [pc, #324]	@ (800401c <HAL_DMAEx_List_Init+0x220>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d03f      	beq.n	8003f5c <HAL_DMAEx_List_Init+0x160>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a4f      	ldr	r2, [pc, #316]	@ (8004020 <HAL_DMAEx_List_Init+0x224>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d03a      	beq.n	8003f5c <HAL_DMAEx_List_Init+0x160>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a4e      	ldr	r2, [pc, #312]	@ (8004024 <HAL_DMAEx_List_Init+0x228>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d035      	beq.n	8003f5c <HAL_DMAEx_List_Init+0x160>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a4c      	ldr	r2, [pc, #304]	@ (8004028 <HAL_DMAEx_List_Init+0x22c>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d030      	beq.n	8003f5c <HAL_DMAEx_List_Init+0x160>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a4b      	ldr	r2, [pc, #300]	@ (800402c <HAL_DMAEx_List_Init+0x230>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d02b      	beq.n	8003f5c <HAL_DMAEx_List_Init+0x160>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a49      	ldr	r2, [pc, #292]	@ (8004030 <HAL_DMAEx_List_Init+0x234>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d026      	beq.n	8003f5c <HAL_DMAEx_List_Init+0x160>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a48      	ldr	r2, [pc, #288]	@ (8004034 <HAL_DMAEx_List_Init+0x238>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d021      	beq.n	8003f5c <HAL_DMAEx_List_Init+0x160>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a46      	ldr	r2, [pc, #280]	@ (8004038 <HAL_DMAEx_List_Init+0x23c>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d01c      	beq.n	8003f5c <HAL_DMAEx_List_Init+0x160>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a45      	ldr	r2, [pc, #276]	@ (800403c <HAL_DMAEx_List_Init+0x240>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d017      	beq.n	8003f5c <HAL_DMAEx_List_Init+0x160>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a43      	ldr	r2, [pc, #268]	@ (8004040 <HAL_DMAEx_List_Init+0x244>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d012      	beq.n	8003f5c <HAL_DMAEx_List_Init+0x160>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a42      	ldr	r2, [pc, #264]	@ (8004044 <HAL_DMAEx_List_Init+0x248>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d00d      	beq.n	8003f5c <HAL_DMAEx_List_Init+0x160>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a40      	ldr	r2, [pc, #256]	@ (8004048 <HAL_DMAEx_List_Init+0x24c>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d008      	beq.n	8003f5c <HAL_DMAEx_List_Init+0x160>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a3f      	ldr	r2, [pc, #252]	@ (800404c <HAL_DMAEx_List_Init+0x250>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d003      	beq.n	8003f5c <HAL_DMAEx_List_Init+0x160>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a3d      	ldr	r2, [pc, #244]	@ (8004050 <HAL_DMAEx_List_Init+0x254>)
 8003f5a:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2202      	movs	r2, #2
 8003f68:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	695a      	ldr	r2, [r3, #20]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f042 0206 	orr.w	r2, r2, #6
 8003f7a:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003f7c:	e00f      	b.n	8003f9e <HAL_DMAEx_List_Init+0x1a2>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003f7e:	f7fd ff61 	bl	8001e44 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b05      	cmp	r3, #5
 8003f8a:	d908      	bls.n	8003f9e <HAL_DMAEx_List_Init+0x1a2>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2210      	movs	r2, #16
 8003f90:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2203      	movs	r2, #3
 8003f96:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e015      	b.n	8003fca <HAL_DMAEx_List_Init+0x1ce>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	f003 0301 	and.w	r3, r3, #1
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1e8      	bne.n	8003f7e <HAL_DMAEx_List_Init+0x182>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 fad3 	bl	8004558 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3710      	adds	r7, #16
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	52000050 	.word	0x52000050
 8003fd8:	520000d0 	.word	0x520000d0
 8003fdc:	52000150 	.word	0x52000150
 8003fe0:	520001d0 	.word	0x520001d0
 8003fe4:	52000250 	.word	0x52000250
 8003fe8:	520002d0 	.word	0x520002d0
 8003fec:	52000350 	.word	0x52000350
 8003ff0:	520003d0 	.word	0x520003d0
 8003ff4:	52000450 	.word	0x52000450
 8003ff8:	520004d0 	.word	0x520004d0
 8003ffc:	52000550 	.word	0x52000550
 8004000:	520005d0 	.word	0x520005d0
 8004004:	52000650 	.word	0x52000650
 8004008:	520006d0 	.word	0x520006d0
 800400c:	52000750 	.word	0x52000750
 8004010:	520007d0 	.word	0x520007d0
 8004014:	40021050 	.word	0x40021050
 8004018:	400210d0 	.word	0x400210d0
 800401c:	40021150 	.word	0x40021150
 8004020:	400211d0 	.word	0x400211d0
 8004024:	40021250 	.word	0x40021250
 8004028:	400212d0 	.word	0x400212d0
 800402c:	40021350 	.word	0x40021350
 8004030:	400213d0 	.word	0x400213d0
 8004034:	40021450 	.word	0x40021450
 8004038:	400214d0 	.word	0x400214d0
 800403c:	40021550 	.word	0x40021550
 8004040:	400215d0 	.word	0x400215d0
 8004044:	40021650 	.word	0x40021650
 8004048:	400216d0 	.word	0x400216d0
 800404c:	40021750 	.word	0x40021750
 8004050:	400217d0 	.word	0x400217d0

08004054 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b086      	sub	sp, #24
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d003      	beq.n	800406a <HAL_DMAEx_List_Start_IT+0x16>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e082      	b.n	8004174 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004074:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	695b      	ldr	r3, [r3, #20]
 800407c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004080:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8004082:	7dfb      	ldrb	r3, [r7, #23]
 8004084:	2b01      	cmp	r3, #1
 8004086:	d005      	beq.n	8004094 <HAL_DMAEx_List_Start_IT+0x40>
 8004088:	7dfb      	ldrb	r3, [r7, #23]
 800408a:	2b02      	cmp	r3, #2
 800408c:	d16a      	bne.n	8004164 <HAL_DMAEx_List_Start_IT+0x110>
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d067      	beq.n	8004164 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b01      	cmp	r3, #1
 800409e:	d157      	bne.n	8004150 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d101      	bne.n	80040ae <HAL_DMAEx_List_Start_IT+0x5a>
 80040aa:	2302      	movs	r3, #2
 80040ac:	e062      	b.n	8004174 <HAL_DMAEx_List_Start_IT+0x120>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2202      	movs	r2, #2
 80040ba:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040c2:	2202      	movs	r2, #2
 80040c4:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040d0:	2200      	movs	r2, #0
 80040d2:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	695a      	ldr	r2, [r3, #20]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 80040e2:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d007      	beq.n	80040fc <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	695a      	ldr	r2, [r3, #20]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040fa:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004100:	2b00      	cmp	r3, #0
 8004102:	d007      	beq.n	8004114 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	695a      	ldr	r2, [r3, #20]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004112:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f107 010c 	add.w	r1, r7, #12
 800411e:	2200      	movs	r2, #0
 8004120:	4618      	mov	r0, r3
 8004122:	f000 fe41 	bl	8004da8 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4619      	mov	r1, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	4b12      	ldr	r3, [pc, #72]	@ (800417c <HAL_DMAEx_List_Start_IT+0x128>)
 8004134:	400b      	ands	r3, r1
 8004136:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	461a      	mov	r2, r3
 8004140:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004144:	4013      	ands	r3, r2
 8004146:	68f9      	ldr	r1, [r7, #12]
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	6812      	ldr	r2, [r2, #0]
 800414c:	430b      	orrs	r3, r1
 800414e:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	695a      	ldr	r2, [r3, #20]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f042 0201 	orr.w	r2, r2, #1
 800415e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8004160:	2300      	movs	r3, #0
 8004162:	e007      	b.n	8004174 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2240      	movs	r2, #64	@ 0x40
 8004168:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
}
 8004174:	4618      	mov	r0, r3
 8004176:	3718      	adds	r7, #24
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	ffff0000 	.word	0xffff0000

08004180 <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d002      	beq.n	8004196 <HAL_DMAEx_List_BuildNode+0x16>
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e004      	b.n	80041a4 <HAL_DMAEx_List_BuildNode+0x24>
    assert_param(IS_DMA_BLOCK_ADDR_OFFSET(pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset));
    assert_param(IS_DMA_BLOCK_ADDR_OFFSET(pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset));
  }

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 800419a:	6839      	ldr	r1, [r7, #0]
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 fb33 	bl	8004808 <DMA_List_BuildNode>

  return HAL_OK;
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3708      	adds	r7, #8
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <HAL_DMAEx_List_GetNodeConfig>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                               DMA_NodeTypeDef const *const pNode)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d002      	beq.n	80041c2 <HAL_DMAEx_List_GetNodeConfig+0x16>
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <HAL_DMAEx_List_GetNodeConfig+0x1a>
  {
    return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e004      	b.n	80041d0 <HAL_DMAEx_List_GetNodeConfig+0x24>
  }

  /* Get the DMA channel node configuration */
  DMA_List_GetNodeConfig(pNodeConfig, pNode);
 80041c6:	6839      	ldr	r1, [r7, #0]
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 fc75 	bl	8004ab8 <DMA_List_GetNodeConfig>

  return HAL_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3708      	adds	r7, #8
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b08c      	sub	sp, #48	@ 0x30
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d002      	beq.n	80041f0 <HAL_DMAEx_List_InsertNode+0x18>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d101      	bne.n	80041f4 <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e0b6      	b.n	8004362 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d104      	bne.n	8004206 <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2204      	movs	r2, #4
 8004200:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e0ad      	b.n	8004362 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	68b9      	ldr	r1, [r7, #8]
 800420e:	4618      	mov	r0, r3
 8004210:	f000 fd5c 	bl	8004ccc <DMA_List_CheckNodesBaseAddresses>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d004      	beq.n	8004224 <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2205      	movs	r2, #5
 800421e:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e09e      	b.n	8004362 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	68b9      	ldr	r1, [r7, #8]
 800422c:	4618      	mov	r0, r3
 800422e:	f000 fd7f 	bl	8004d30 <DMA_List_CheckNodesTypes>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d004      	beq.n	8004242 <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2204      	movs	r2, #4
 800423c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e08f      	b.n	8004362 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2202      	movs	r2, #2
 8004246:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 800424e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8004252:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004256:	4619      	mov	r1, r3
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 fda5 	bl	8004da8 <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d11a      	bne.n	800429c <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d106      	bne.n	800427a <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2201      	movs	r2, #1
 8004276:	609a      	str	r2, [r3, #8]
 8004278:	e06c      	b.n	8004354 <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004286:	4013      	ands	r3, r2
 8004288:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800428a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800428c:	4319      	orrs	r1, r3
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2202      	movs	r2, #2
 8004298:	609a      	str	r2, [r3, #8]
 800429a:	e05b      	b.n	8004354 <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10f      	bne.n	80042c2 <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	461a      	mov	r2, r3
 80042a8:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80042ac:	4013      	ands	r3, r2
 80042ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80042b2:	4319      	orrs	r1, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	e043      	b.n	800434a <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 80042c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042c4:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 80042c6:	f107 0314 	add.w	r3, r7, #20
 80042ca:	461a      	mov	r2, r3
 80042cc:	68b9      	ldr	r1, [r7, #8]
 80042ce:	68f8      	ldr	r0, [r7, #12]
 80042d0:	f000 fd9a 	bl	8004e08 <DMA_List_FindNode>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d132      	bne.n	8004340 <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 80042da:	69fa      	ldr	r2, [r7, #28]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d11a      	bne.n	800431a <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00b      	beq.n	8004304 <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	461a      	mov	r2, r3
 80042f2:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80042f6:	4013      	ands	r3, r2
 80042f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80042fc:	4319      	orrs	r1, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800430a:	4013      	ands	r3, r2
 800430c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800430e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004310:	4319      	orrs	r1, r3
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004318:	e017      	b.n	800434a <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 800431a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800431c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004330:	4013      	ands	r3, r2
 8004332:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004334:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004336:	4319      	orrs	r1, r3
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800433e:	e004      	b.n	800434a <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2206      	movs	r2, #6
 8004344:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e00b      	b.n	8004362 <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	1c5a      	adds	r2, r3, #1
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2201      	movs	r2, #1
 800435e:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3730      	adds	r7, #48	@ 0x30
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b08a      	sub	sp, #40	@ 0x28
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d101      	bne.n	800437c <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e052      	b.n	8004422 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d104      	bne.n	800438e <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2202      	movs	r2, #2
 8004388:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e049      	b.n	8004422 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00c      	beq.n	80043b0 <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685a      	ldr	r2, [r3, #4]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d101      	bne.n	80043a6 <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 80043a2:	2300      	movs	r3, #0
 80043a4:	e03d      	b.n	8004422 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2204      	movs	r2, #4
 80043aa:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e038      	b.n	8004422 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	695b      	ldr	r3, [r3, #20]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d104      	bne.n	80043c2 <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2204      	movs	r2, #4
 80043bc:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e02f      	b.n	8004422 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2202      	movs	r2, #2
 80043c6:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f107 0220 	add.w	r2, r7, #32
 80043d6:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 fce4 	bl	8004da8 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 80043e0:	6a3b      	ldr	r3, [r7, #32]
 80043e2:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 80043e4:	f107 030c 	add.w	r3, r7, #12
 80043e8:	461a      	mov	r2, r3
 80043ea:	2100      	movs	r1, #0
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 fd0b 	bl	8004e08 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	461a      	mov	r2, r3
 80043f8:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80043fc:	4013      	ands	r3, r2
 80043fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	4610      	mov	r0, r2
 8004404:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8004406:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8004408:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3728      	adds	r7, #40	@ 0x28
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
	...

0800442c <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d002      	beq.n	8004442 <HAL_DMAEx_List_LinkQ+0x16>
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e072      	b.n	800452c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800444c:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b02      	cmp	r3, #2
 8004458:	d002      	beq.n	8004460 <HAL_DMAEx_List_LinkQ+0x34>
 800445a:	7bfb      	ldrb	r3, [r7, #15]
 800445c:	2b05      	cmp	r3, #5
 800445e:	d108      	bne.n	8004472 <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2240      	movs	r2, #64	@ 0x40
 8004464:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e05c      	b.n	800452c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	7b1b      	ldrb	r3, [r3, #12]
 8004476:	b2db      	uxtb	r3, r3
 8004478:	2b02      	cmp	r3, #2
 800447a:	d104      	bne.n	8004486 <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	2201      	movs	r2, #1
 8004480:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e052      	b.n	800452c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a2b      	ldr	r2, [pc, #172]	@ (8004538 <HAL_DMAEx_List_LinkQ+0x10c>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d022      	beq.n	80044d6 <HAL_DMAEx_List_LinkQ+0xaa>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a29      	ldr	r2, [pc, #164]	@ (800453c <HAL_DMAEx_List_LinkQ+0x110>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d01d      	beq.n	80044d6 <HAL_DMAEx_List_LinkQ+0xaa>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a28      	ldr	r2, [pc, #160]	@ (8004540 <HAL_DMAEx_List_LinkQ+0x114>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d018      	beq.n	80044d6 <HAL_DMAEx_List_LinkQ+0xaa>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a26      	ldr	r2, [pc, #152]	@ (8004544 <HAL_DMAEx_List_LinkQ+0x118>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d013      	beq.n	80044d6 <HAL_DMAEx_List_LinkQ+0xaa>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a25      	ldr	r2, [pc, #148]	@ (8004548 <HAL_DMAEx_List_LinkQ+0x11c>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d00e      	beq.n	80044d6 <HAL_DMAEx_List_LinkQ+0xaa>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a23      	ldr	r2, [pc, #140]	@ (800454c <HAL_DMAEx_List_LinkQ+0x120>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d009      	beq.n	80044d6 <HAL_DMAEx_List_LinkQ+0xaa>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a22      	ldr	r2, [pc, #136]	@ (8004550 <HAL_DMAEx_List_LinkQ+0x124>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d004      	beq.n	80044d6 <HAL_DMAEx_List_LinkQ+0xaa>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a20      	ldr	r2, [pc, #128]	@ (8004554 <HAL_DMAEx_List_LinkQ+0x128>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d101      	bne.n	80044da <HAL_DMAEx_List_LinkQ+0xae>
 80044d6:	2301      	movs	r3, #1
 80044d8:	e000      	b.n	80044dc <HAL_DMAEx_List_LinkQ+0xb0>
 80044da:	2300      	movs	r3, #0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d10b      	bne.n	80044f8 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d004      	beq.n	80044f8 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	2203      	movs	r2, #3
 80044f2:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e019      	b.n	800452c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044fc:	2b81      	cmp	r3, #129	@ 0x81
 80044fe:	d108      	bne.n	8004512 <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d10d      	bne.n	8004524 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	2204      	movs	r2, #4
 800450c:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e00c      	b.n	800452c <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d004      	beq.n	8004524 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	2204      	movs	r2, #4
 800451e:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e003      	b.n	800452c <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	683a      	ldr	r2, [r7, #0]
 8004528:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3714      	adds	r7, #20
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr
 8004538:	40021650 	.word	0x40021650
 800453c:	400216d0 	.word	0x400216d0
 8004540:	40021750 	.word	0x40021750
 8004544:	400217d0 	.word	0x400217d0
 8004548:	52000650 	.word	0x52000650
 800454c:	520006d0 	.word	0x520006d0
 8004550:	52000750 	.word	0x52000750
 8004554:	520007d0 	.word	0x520007d0

08004558 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004568:	4313      	orrs	r3, r2
 800456a:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if ((IS_HPDMA_INSTANCE(hdma->Instance) != 0U) || (IS_GPDMA_INSTANCE(hdma->Instance) != 0U))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a7a      	ldr	r2, [pc, #488]	@ (800475c <DMA_List_Init+0x204>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d04a      	beq.n	800460c <DMA_List_Init+0xb4>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a79      	ldr	r2, [pc, #484]	@ (8004760 <DMA_List_Init+0x208>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d045      	beq.n	800460c <DMA_List_Init+0xb4>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a77      	ldr	r2, [pc, #476]	@ (8004764 <DMA_List_Init+0x20c>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d040      	beq.n	800460c <DMA_List_Init+0xb4>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a76      	ldr	r2, [pc, #472]	@ (8004768 <DMA_List_Init+0x210>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d03b      	beq.n	800460c <DMA_List_Init+0xb4>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a74      	ldr	r2, [pc, #464]	@ (800476c <DMA_List_Init+0x214>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d036      	beq.n	800460c <DMA_List_Init+0xb4>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a73      	ldr	r2, [pc, #460]	@ (8004770 <DMA_List_Init+0x218>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d031      	beq.n	800460c <DMA_List_Init+0xb4>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a71      	ldr	r2, [pc, #452]	@ (8004774 <DMA_List_Init+0x21c>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d02c      	beq.n	800460c <DMA_List_Init+0xb4>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a70      	ldr	r2, [pc, #448]	@ (8004778 <DMA_List_Init+0x220>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d027      	beq.n	800460c <DMA_List_Init+0xb4>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a6e      	ldr	r2, [pc, #440]	@ (800477c <DMA_List_Init+0x224>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d022      	beq.n	800460c <DMA_List_Init+0xb4>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a6d      	ldr	r2, [pc, #436]	@ (8004780 <DMA_List_Init+0x228>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d01d      	beq.n	800460c <DMA_List_Init+0xb4>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a6b      	ldr	r2, [pc, #428]	@ (8004784 <DMA_List_Init+0x22c>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d018      	beq.n	800460c <DMA_List_Init+0xb4>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a6a      	ldr	r2, [pc, #424]	@ (8004788 <DMA_List_Init+0x230>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d013      	beq.n	800460c <DMA_List_Init+0xb4>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a68      	ldr	r2, [pc, #416]	@ (800478c <DMA_List_Init+0x234>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d00e      	beq.n	800460c <DMA_List_Init+0xb4>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a67      	ldr	r2, [pc, #412]	@ (8004790 <DMA_List_Init+0x238>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d009      	beq.n	800460c <DMA_List_Init+0xb4>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a65      	ldr	r2, [pc, #404]	@ (8004794 <DMA_List_Init+0x23c>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d004      	beq.n	800460c <DMA_List_Init+0xb4>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a64      	ldr	r2, [pc, #400]	@ (8004798 <DMA_List_Init+0x240>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d101      	bne.n	8004610 <DMA_List_Init+0xb8>
 800460c:	2301      	movs	r3, #1
 800460e:	e000      	b.n	8004612 <DMA_List_Init+0xba>
 8004610:	2300      	movs	r3, #0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d154      	bne.n	80046c0 <DMA_List_Init+0x168>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a60      	ldr	r2, [pc, #384]	@ (800479c <DMA_List_Init+0x244>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d04a      	beq.n	80046b6 <DMA_List_Init+0x15e>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a5e      	ldr	r2, [pc, #376]	@ (80047a0 <DMA_List_Init+0x248>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d045      	beq.n	80046b6 <DMA_List_Init+0x15e>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a5d      	ldr	r2, [pc, #372]	@ (80047a4 <DMA_List_Init+0x24c>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d040      	beq.n	80046b6 <DMA_List_Init+0x15e>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a5b      	ldr	r2, [pc, #364]	@ (80047a8 <DMA_List_Init+0x250>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d03b      	beq.n	80046b6 <DMA_List_Init+0x15e>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a5a      	ldr	r2, [pc, #360]	@ (80047ac <DMA_List_Init+0x254>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d036      	beq.n	80046b6 <DMA_List_Init+0x15e>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a58      	ldr	r2, [pc, #352]	@ (80047b0 <DMA_List_Init+0x258>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d031      	beq.n	80046b6 <DMA_List_Init+0x15e>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a57      	ldr	r2, [pc, #348]	@ (80047b4 <DMA_List_Init+0x25c>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d02c      	beq.n	80046b6 <DMA_List_Init+0x15e>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a55      	ldr	r2, [pc, #340]	@ (80047b8 <DMA_List_Init+0x260>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d027      	beq.n	80046b6 <DMA_List_Init+0x15e>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a54      	ldr	r2, [pc, #336]	@ (80047bc <DMA_List_Init+0x264>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d022      	beq.n	80046b6 <DMA_List_Init+0x15e>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a52      	ldr	r2, [pc, #328]	@ (80047c0 <DMA_List_Init+0x268>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d01d      	beq.n	80046b6 <DMA_List_Init+0x15e>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a51      	ldr	r2, [pc, #324]	@ (80047c4 <DMA_List_Init+0x26c>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d018      	beq.n	80046b6 <DMA_List_Init+0x15e>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a4f      	ldr	r2, [pc, #316]	@ (80047c8 <DMA_List_Init+0x270>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d013      	beq.n	80046b6 <DMA_List_Init+0x15e>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a4e      	ldr	r2, [pc, #312]	@ (80047cc <DMA_List_Init+0x274>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d00e      	beq.n	80046b6 <DMA_List_Init+0x15e>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a4c      	ldr	r2, [pc, #304]	@ (80047d0 <DMA_List_Init+0x278>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d009      	beq.n	80046b6 <DMA_List_Init+0x15e>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a4b      	ldr	r2, [pc, #300]	@ (80047d4 <DMA_List_Init+0x27c>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d004      	beq.n	80046b6 <DMA_List_Init+0x15e>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a49      	ldr	r2, [pc, #292]	@ (80047d8 <DMA_List_Init+0x280>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d101      	bne.n	80046ba <DMA_List_Init+0x162>
 80046b6:	2301      	movs	r3, #1
 80046b8:	e000      	b.n	80046bc <DMA_List_Init+0x164>
 80046ba:	2300      	movs	r3, #0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d004      	beq.n	80046ca <DMA_List_Init+0x172>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	695b      	ldr	r3, [r3, #20]
 80046d0:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	430a      	orrs	r2, r1
 80046dc:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2200      	movs	r2, #0
 80046e4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80046ee:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2200      	movs	r2, #0
 80046f6:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2200      	movs	r2, #0
 80046fe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2200      	movs	r2, #0
 8004706:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a2f      	ldr	r2, [pc, #188]	@ (80047cc <DMA_List_Init+0x274>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d022      	beq.n	8004758 <DMA_List_Init+0x200>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a2e      	ldr	r2, [pc, #184]	@ (80047d0 <DMA_List_Init+0x278>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d01d      	beq.n	8004758 <DMA_List_Init+0x200>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a2c      	ldr	r2, [pc, #176]	@ (80047d4 <DMA_List_Init+0x27c>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d018      	beq.n	8004758 <DMA_List_Init+0x200>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a2b      	ldr	r2, [pc, #172]	@ (80047d8 <DMA_List_Init+0x280>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d013      	beq.n	8004758 <DMA_List_Init+0x200>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a15      	ldr	r2, [pc, #84]	@ (800478c <DMA_List_Init+0x234>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d00e      	beq.n	8004758 <DMA_List_Init+0x200>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a14      	ldr	r2, [pc, #80]	@ (8004790 <DMA_List_Init+0x238>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d009      	beq.n	8004758 <DMA_List_Init+0x200>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a12      	ldr	r2, [pc, #72]	@ (8004794 <DMA_List_Init+0x23c>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d004      	beq.n	8004758 <DMA_List_Init+0x200>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a11      	ldr	r2, [pc, #68]	@ (8004798 <DMA_List_Init+0x240>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d141      	bne.n	80047dc <DMA_List_Init+0x284>
 8004758:	2301      	movs	r3, #1
 800475a:	e040      	b.n	80047de <DMA_List_Init+0x286>
 800475c:	52000050 	.word	0x52000050
 8004760:	520000d0 	.word	0x520000d0
 8004764:	52000150 	.word	0x52000150
 8004768:	520001d0 	.word	0x520001d0
 800476c:	52000250 	.word	0x52000250
 8004770:	520002d0 	.word	0x520002d0
 8004774:	52000350 	.word	0x52000350
 8004778:	520003d0 	.word	0x520003d0
 800477c:	52000450 	.word	0x52000450
 8004780:	520004d0 	.word	0x520004d0
 8004784:	52000550 	.word	0x52000550
 8004788:	520005d0 	.word	0x520005d0
 800478c:	52000650 	.word	0x52000650
 8004790:	520006d0 	.word	0x520006d0
 8004794:	52000750 	.word	0x52000750
 8004798:	520007d0 	.word	0x520007d0
 800479c:	40021050 	.word	0x40021050
 80047a0:	400210d0 	.word	0x400210d0
 80047a4:	40021150 	.word	0x40021150
 80047a8:	400211d0 	.word	0x400211d0
 80047ac:	40021250 	.word	0x40021250
 80047b0:	400212d0 	.word	0x400212d0
 80047b4:	40021350 	.word	0x40021350
 80047b8:	400213d0 	.word	0x400213d0
 80047bc:	40021450 	.word	0x40021450
 80047c0:	400214d0 	.word	0x400214d0
 80047c4:	40021550 	.word	0x40021550
 80047c8:	400215d0 	.word	0x400215d0
 80047cc:	40021650 	.word	0x40021650
 80047d0:	400216d0 	.word	0x400216d0
 80047d4:	40021750 	.word	0x40021750
 80047d8:	400217d0 	.word	0x400217d0
 80047dc:	2300      	movs	r3, #0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d007      	beq.n	80047f2 <DMA_List_Init+0x29a>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2200      	movs	r2, #0
 80047e8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2200      	movs	r2, #0
 80047f0:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2200      	movs	r2, #0
 80047f8:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80047fa:	bf00      	nop
 80047fc:	3714      	adds	r7, #20
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop

08004808 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 800481a:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8004820:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8004826:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 800482c:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	601a      	str	r2, [r3, #0]


  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & (DMA_CHANNEL_TYPE_GPDMA | DMA_CHANNEL_TYPE_HPDMA)) != 0U)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800483a:	2b00      	cmp	r3, #0
 800483c:	d017      	beq.n	800486e <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800484a:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004850:	3b01      	subs	r3, #1
 8004852:	051b      	lsls	r3, r3, #20
 8004854:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8004858:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800485e:	3b01      	subs	r3, #1
 8004860:	011b      	lsls	r3, r3, #4
 8004862:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8004866:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8004868:	431a      	orrs	r2, r3
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6859      	ldr	r1, [r3, #4]
 8004876:	f240 237f 	movw	r3, #639	@ 0x27f
 800487a:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 800487c:	431a      	orrs	r2, r3
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800488a:	d10c      	bne.n	80048a6 <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA OR HPDMA */
    if ((pNodeConfig->NodeType & (DMA_CHANNEL_TYPE_GPDMA | DMA_CHANNEL_TYPE_HPDMA)) != 0U)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004894:	2b00      	cmp	r3, #0
 8004896:	d011      	beq.n	80048bc <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	605a      	str	r2, [r3, #4]
 80048a4:	e00a      	b.n	80048bc <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048ae:	d105      	bne.n	80048bc <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Configure HW Peripheral flow control selection */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= pNodeConfig->Init.Mode;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685a      	ldr	r2, [r3, #4]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048c4:	431a      	orrs	r2, r3
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	605a      	str	r2, [r3, #4]

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00f      	beq.n	80048f2 <DMA_List_BuildNode+0xea>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048de:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048e4:	041b      	lsls	r3, r3, #16
 80048e6:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 80048ea:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 80048ec:	431a      	orrs	r2, r3
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80048f6:	b29a      	uxth	r2, r3
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	2b00      	cmp	r3, #0
 8004906:	d04e      	beq.n	80049a6 <DMA_List_BuildNode+0x19e>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004910:	3b01      	subs	r3, #1
 8004912:	0419      	lsls	r1, r3, #16
 8004914:	4b66      	ldr	r3, [pc, #408]	@ (8004ab0 <DMA_List_BuildNode+0x2a8>)
 8004916:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8004918:	431a      	orrs	r2, r3
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004922:	2b00      	cmp	r3, #0
 8004924:	da06      	bge.n	8004934 <DMA_List_BuildNode+0x12c>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	609a      	str	r2, [r3, #8]
 8004932:	e005      	b.n	8004940 <DMA_List_BuildNode+0x138>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004944:	2b00      	cmp	r3, #0
 8004946:	da06      	bge.n	8004956 <DMA_List_BuildNode+0x14e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	609a      	str	r2, [r3, #8]
 8004954:	e005      	b.n	8004962 <DMA_List_BuildNode+0x15a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004966:	2b00      	cmp	r3, #0
 8004968:	da06      	bge.n	8004978 <DMA_List_BuildNode+0x170>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	609a      	str	r2, [r3, #8]
 8004976:	e005      	b.n	8004984 <DMA_List_BuildNode+0x17c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004988:	2b00      	cmp	r3, #0
 800498a:	da06      	bge.n	800499a <DMA_List_BuildNode+0x192>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	609a      	str	r2, [r3, #8]
 8004998:	e005      	b.n	80049a6 <DMA_List_BuildNode+0x19e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0302 	and.w	r3, r3, #2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d059      	beq.n	8004a76 <DMA_List_BuildNode+0x26e>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	da09      	bge.n	80049de <DMA_List_BuildNode+0x1d6>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049ce:	425b      	negs	r3, r3
 80049d0:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f3c3 020c 	ubfx	r2, r3, #0, #13
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	615a      	str	r2, [r3, #20]
 80049dc:	e005      	b.n	80049ea <DMA_List_BuildNode+0x1e2>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049e2:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	da0d      	bge.n	8004a0e <DMA_List_BuildNode+0x206>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049f6:	425b      	negs	r3, r3
 80049f8:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	695a      	ldr	r2, [r3, #20]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	0419      	lsls	r1, r3, #16
 8004a02:	4b2c      	ldr	r3, [pc, #176]	@ (8004ab4 <DMA_List_BuildNode+0x2ac>)
 8004a04:	400b      	ands	r3, r1
 8004a06:	431a      	orrs	r2, r3
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	615a      	str	r2, [r3, #20]
 8004a0c:	e009      	b.n	8004a22 <DMA_List_BuildNode+0x21a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a16:	0419      	lsls	r1, r3, #16
 8004a18:	4b26      	ldr	r3, [pc, #152]	@ (8004ab4 <DMA_List_BuildNode+0x2ac>)
 8004a1a:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8004a1c:	431a      	orrs	r2, r3
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	da08      	bge.n	8004a3c <DMA_List_BuildNode+0x234>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a2e:	425b      	negs	r3, r3
 8004a30:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	619a      	str	r2, [r3, #24]
 8004a3a:	e004      	b.n	8004a46 <DMA_List_BuildNode+0x23e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a40:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	da0b      	bge.n	8004a66 <DMA_List_BuildNode+0x25e>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a52:	425b      	negs	r3, r3
 8004a54:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8004a5e:	431a      	orrs	r2, r3
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	619a      	str	r2, [r3, #24]
 8004a64:	e007      	b.n	8004a76 <DMA_List_BuildNode+0x26e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a6e:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8004a70:	431a      	orrs	r2, r3
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d006      	beq.n	8004a98 <DMA_List_BuildNode+0x290>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
 8004a8e:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8004a96:	e005      	b.n	8004aa4 <DMA_List_BuildNode+0x29c>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	6a1b      	ldr	r3, [r3, #32]
 8004a9c:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	621a      	str	r2, [r3, #32]
}
 8004aa4:	bf00      	nop
 8004aa6:	3714      	adds	r7, #20
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr
 8004ab0:	07ff0000 	.word	0x07ff0000
 8004ab4:	1fff0000 	.word	0x1fff0000

08004ab8 <DMA_List_GetNodeConfig>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                   DMA_NodeTypeDef const *const pNode)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b085      	sub	sp, #20
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  uint16_t offset;

  /* Get node information *********************************************************************************************/
  pNodeConfig->NodeType = (pNode->NodeInfo & NODE_TYPE_MASK);
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	b2da      	uxtb	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	601a      	str	r2, [r3, #0]
  /*************************************************************************************** Node type value is updated */


  /* Get CTR1 fields values *******************************************************************************************/
  pNodeConfig->Init.SrcInc                      = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SINC;
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0208 	and.w	r2, r3, #8
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	611a      	str	r2, [r3, #16]
  pNodeConfig->Init.DestInc                     = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DINC;
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	615a      	str	r2, [r3, #20]
  pNodeConfig->Init.SrcDataWidth                = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SDW_LOG2;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0203 	and.w	r2, r3, #3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	619a      	str	r2, [r3, #24]
  pNodeConfig->Init.DestDataWidth               = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DDW_LOG2;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	61da      	str	r2, [r3, #28]
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_SBL_1) >> DMA_CTR1_SBL_1_Pos) + 1U;
 8004b00:	091b      	lsrs	r3, r3, #4
 8004b02:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b06:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	625a      	str	r2, [r3, #36]	@ 0x24
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_DBL_1) >> DMA_CTR1_DBL_1_Pos) + 1U;
 8004b10:	0d1b      	lsrs	r3, r3, #20
 8004b12:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b16:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	629a      	str	r2, [r3, #40]	@ 0x28
  pNodeConfig->Init.TransferAllocatedPort       = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 2240 	and.w	r2, r3, #1073758208	@ 0x40004000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	62da      	str	r2, [r3, #44]	@ 0x2c
                                                  (DMA_CTR1_SAP | DMA_CTR1_DAP);
  pNodeConfig->DataHandlingConfig.DataExchange  = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	4b66      	ldr	r3, [pc, #408]	@ (8004cc8 <DMA_List_GetNodeConfig+0x210>)
 8004b2e:	4013      	ands	r3, r2
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	6393      	str	r3, [r2, #56]	@ 0x38
                                                  (DMA_CTR1_SBX | DMA_CTR1_DBX | DMA_CTR1_DHX | DMA_CTR1_DWX);
  pNodeConfig->DataHandlingConfig.DataAlignment = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_PAM;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 52c0 	and.w	r2, r3, #6144	@ 0x1800
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /*********************************************************************************** CTR1 fields values are updated */


  /* Get CTR2 fields values *******************************************************************************************/
  if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_SWREQ) != 0U)
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d008      	beq.n	8004b5e <DMA_List_GetNodeConfig+0xa6>
  {
    pNodeConfig->Init.Request   = DMA_REQUEST_SW;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b52:	605a      	str	r2, [r3, #4]
    pNodeConfig->Init.Direction = DMA_MEMORY_TO_MEMORY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b5a:	60da      	str	r2, [r3, #12]
 8004b5c:	e013      	b.n	8004b86 <DMA_List_GetNodeConfig+0xce>
  }
  else
  {
    pNodeConfig->Init.Request   = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_REQSEL;
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	605a      	str	r2, [r3, #4]

    if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_DREQ) != 0U)
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d004      	beq.n	8004b80 <DMA_List_GetNodeConfig+0xc8>
    {
      pNodeConfig->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004b7c:	60da      	str	r2, [r3, #12]
 8004b7e:	e002      	b.n	8004b86 <DMA_List_GetNodeConfig+0xce>
    }
    else
    {
      pNodeConfig->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	60da      	str	r2, [r3, #12]
    }
  }

  pNodeConfig->Init.BlkHWRequest              = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_BREQ);
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	609a      	str	r2, [r3, #8]
  pNodeConfig->TriggerConfig.TriggerMode      = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGM;
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	641a      	str	r2, [r3, #64]	@ 0x40
  pNodeConfig->TriggerConfig.TriggerPolarity  = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGPOL;
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	645a      	str	r2, [r3, #68]	@ 0x44
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
                                                 DMA_CTR2_TRIGSEL) >> DMA_CTR2_TRIGSEL_Pos;
 8004bae:	0c1b      	lsrs	r3, r3, #16
 8004bb0:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	649a      	str	r2, [r3, #72]	@ 0x48
  pNodeConfig->Init.TransferEventMode         = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TCEM;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	631a      	str	r2, [r3, #48]	@ 0x30
  /*********************************************************************************** CTR2 fields values are updated */


  /* Get CBR1 fields **************************************************************************************************/
  pNodeConfig->DataSize = pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BNDT;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	669a      	str	r2, [r3, #104]	@ 0x68

  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0302 	and.w	r3, r3, #2
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d008      	beq.n	8004bec <DMA_List_GetNodeConfig+0x134>
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount =
      ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRC) >> DMA_CBR1_BRC_Pos) + 1U;
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	0c1b      	lsrs	r3, r3, #16
 8004be0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004be4:	1c5a      	adds	r2, r3, #1
    pNodeConfig->RepeatBlockConfig.RepeatCount =
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004bea:	e002      	b.n	8004bf2 <DMA_List_GetNodeConfig+0x13a>
  }
  else
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount = 1U;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  /*********************************************************************************** CBR1 fields values are updated */


  /* Get CSAR field ***************************************************************************************************/
  pNodeConfig->SrcAddress = pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET];
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	68da      	ldr	r2, [r3, #12]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	661a      	str	r2, [r3, #96]	@ 0x60
  /************************************************************************************** CSAR field value is updated */


  /* Get CDAR field ***************************************************************************************************/
  pNodeConfig->DstAddress = pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET];
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	691a      	ldr	r2, [r3, #16]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	665a      	str	r2, [r3, #100]	@ 0x64
  /************************************************************************************** CDAR field value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d04a      	beq.n	8004ca4 <DMA_List_GetNodeConfig+0x1ec>
  {
    /* Get CTR3 field *************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_SAO);
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c18:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset  = (int32_t)offset;
 8004c1a:	89fa      	ldrh	r2, [r7, #14]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	651a      	str	r2, [r3, #80]	@ 0x50

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_DAO) >> DMA_CTR3_DAO_Pos);
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	695b      	ldr	r3, [r3, #20]
 8004c24:	0c1b      	lsrs	r3, r3, #16
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c2c:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.DestAddrOffset = (int32_t)offset;
 8004c2e:	89fa      	ldrh	r2, [r7, #14]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	655a      	str	r2, [r3, #84]	@ 0x54

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_SDEC) != 0U)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d004      	beq.n	8004c4a <DMA_List_GetNodeConfig+0x192>
    {
      pNodeConfig->RepeatBlockConfig.SrcAddrOffset *= (-1);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c44:	425a      	negs	r2, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_DDEC) != 0U)
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d004      	beq.n	8004c60 <DMA_List_GetNodeConfig+0x1a8>
    {
      pNodeConfig->RepeatBlockConfig.DestAddrOffset *= (-1);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c5a:	425a      	negs	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /************************************************************************************ CTR3 field value is updated */


    /* Get CBR2 fields ************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRSAO);
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset = (int32_t)offset;
 8004c66:	89fa      	ldrh	r2, [r7, #14]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	659a      	str	r2, [r3, #88]	@ 0x58

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRDAO) >> DMA_CBR2_BRDAO_Pos);
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	0c1b      	lsrs	r3, r3, #16
 8004c72:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = (int32_t)offset;
 8004c74:	89fa      	ldrh	r2, [r7, #14]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	65da      	str	r2, [r3, #92]	@ 0x5c

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRSDEC) != 0U)
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d004      	beq.n	8004c90 <DMA_List_GetNodeConfig+0x1d8>
    {
      pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset *= (-1);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c8a:	425a      	negs	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRDDEC) != 0U)
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	da11      	bge.n	8004cbc <DMA_List_GetNodeConfig+0x204>
    {
      pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset *= (-1);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c9c:	425a      	negs	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Get CBR2 fields ************************************************************************************************/
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
    /************************************************************************************ CBR2 field value is updated */
  }
}
 8004ca2:	e00b      	b.n	8004cbc <DMA_List_GetNodeConfig+0x204>
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset     = 0;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	651a      	str	r2, [r3, #80]	@ 0x50
    pNodeConfig->RepeatBlockConfig.DestAddrOffset    = 0;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	655a      	str	r2, [r3, #84]	@ 0x54
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	659a      	str	r2, [r3, #88]	@ 0x58
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004cbc:	bf00      	nop
 8004cbe:	3714      	adds	r7, #20
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr
 8004cc8:	1c002000 	.word	0x1c002000

08004ccc <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b087      	sub	sp, #28
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	431a      	orrs	r2, r3
 8004ce2:	4b12      	ldr	r3, [pc, #72]	@ (8004d2c <DMA_List_CheckNodesBaseAddresses+0x60>)
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d002      	beq.n	8004cf8 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	617b      	str	r3, [r7, #20]
 8004cf6:	e00a      	b.n	8004d0e <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d002      	beq.n	8004d04 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	617b      	str	r3, [r7, #20]
 8004d02:	e004      	b.n	8004d0e <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d001      	beq.n	8004d0e <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	4b06      	ldr	r3, [pc, #24]	@ (8004d2c <DMA_List_CheckNodesBaseAddresses+0x60>)
 8004d12:	4013      	ands	r3, r2
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d001      	beq.n	8004d1e <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e000      	b.n	8004d20 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	371c      	adds	r7, #28
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr
 8004d2c:	ffff0000 	.word	0xffff0000

08004d30 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b087      	sub	sp, #28
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d004      	beq.n	8004d50 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	617b      	str	r3, [r7, #20]
 8004d4e:	e00e      	b.n	8004d6e <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d004      	beq.n	8004d60 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	617b      	str	r3, [r7, #20]
 8004d5e:	e006      	b.n	8004d6e <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d003      	beq.n	8004d6e <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d007      	beq.n	8004d84 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	6a1b      	ldr	r3, [r3, #32]
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d001      	beq.n	8004d84 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8004d80:	2302      	movs	r3, #2
 8004d82:	e00b      	b.n	8004d9c <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d007      	beq.n	8004d9a <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a1b      	ldr	r3, [r3, #32]
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	697a      	ldr	r2, [r7, #20]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d001      	beq.n	8004d9a <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e000      	b.n	8004d9c <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	371c      	adds	r7, #28
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6a1b      	ldr	r3, [r3, #32]
 8004db8:	f003 0302 	and.w	r3, r3, #2
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d00c      	beq.n	8004dda <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d002      	beq.n	8004dcc <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	4a0d      	ldr	r2, [pc, #52]	@ (8004e00 <DMA_List_GetCLLRNodeInfo+0x58>)
 8004dca:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00f      	beq.n	8004df2 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2207      	movs	r2, #7
 8004dd6:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8004dd8:	e00b      	b.n	8004df2 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d002      	beq.n	8004de6 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	4a08      	ldr	r2, [pc, #32]	@ (8004e04 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8004de4:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d002      	beq.n	8004df2 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2205      	movs	r2, #5
 8004df0:	601a      	str	r2, [r3, #0]
}
 8004df2:	bf00      	nop
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	fe010000 	.word	0xfe010000
 8004e04:	f8010000 	.word	0xf8010000

08004e08 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b089      	sub	sp, #36	@ 0x24
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 8004e14:	2300      	movs	r3, #0
 8004e16:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d144      	bne.n	8004eb6 <DMA_List_FindNode+0xae>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8004e2c:	e01e      	b.n	8004e6c <DMA_List_FindNode+0x64>
    {
      /* Get head node address */
      if (node_idx == 0U)
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d107      	bne.n	8004e44 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	461a      	mov	r2, r3
 8004e3a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004e3e:	4013      	ands	r3, r2
 8004e40:	61bb      	str	r3, [r7, #24]
 8004e42:	e010      	b.n	8004e66 <DMA_List_FindNode+0x5e>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	4b40      	ldr	r3, [pc, #256]	@ (8004f50 <DMA_List_FindNode+0x148>)
 8004e50:	4013      	ands	r3, r2
          ((DMA_NodeTypeDef *)(currentnode_address +
 8004e52:	69ba      	ldr	r2, [r7, #24]
 8004e54:	4413      	add	r3, r2
 8004e56:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8004e5e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004e62:	4013      	ands	r3, r2
 8004e64:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	3301      	adds	r3, #1
 8004e6a:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	69fa      	ldr	r2, [r7, #28]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d3db      	bcc.n	8004e2e <DMA_List_FindNode+0x26>
 8004e76:	e02a      	b.n	8004ece <DMA_List_FindNode+0xc6>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d107      	bne.n	8004e8e <DMA_List_FindNode+0x86>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	461a      	mov	r2, r3
 8004e84:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004e88:	4013      	ands	r3, r2
 8004e8a:	61bb      	str	r3, [r7, #24]
 8004e8c:	e010      	b.n	8004eb0 <DMA_List_FindNode+0xa8>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	461a      	mov	r2, r3
 8004e98:	4b2d      	ldr	r3, [pc, #180]	@ (8004f50 <DMA_List_FindNode+0x148>)
 8004e9a:	4013      	ands	r3, r2
          ((DMA_NodeTypeDef *)(currentnode_address +
 8004e9c:	69ba      	ldr	r2, [r7, #24]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8004ea8:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004eac:	4013      	ands	r3, r2
 8004eae:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	69fa      	ldr	r2, [r7, #28]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d206      	bcs.n	8004ece <DMA_List_FindNode+0xc6>
 8004ec0:	68ba      	ldr	r2, [r7, #8]
 8004ec2:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	69ba      	ldr	r2, [r7, #24]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d1d4      	bne.n	8004e78 <DMA_List_FindNode+0x70>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d008      	beq.n	8004ee6 <DMA_List_FindNode+0xde>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8004ed4:	68ba      	ldr	r2, [r7, #8]
 8004ed6:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004eda:	4013      	ands	r3, r2
 8004edc:	69ba      	ldr	r2, [r7, #24]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d001      	beq.n	8004ee6 <DMA_List_FindNode+0xde>
    {
      return 1U;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e02e      	b.n	8004f44 <DMA_List_FindNode+0x13c>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	69fa      	ldr	r2, [r7, #28]
 8004eea:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	4b17      	ldr	r3, [pc, #92]	@ (8004f50 <DMA_List_FindNode+0x148>)
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	431a      	orrs	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	461a      	mov	r2, r3
 8004f04:	4b12      	ldr	r3, [pc, #72]	@ (8004f50 <DMA_List_FindNode+0x148>)
 8004f06:	4013      	ands	r3, r2
 8004f08:	69ba      	ldr	r2, [r7, #24]
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	461a      	mov	r2, r3
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d010      	beq.n	8004f42 <DMA_List_FindNode+0x13a>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	461a      	mov	r2, r3
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f2c:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8004f30:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4619      	mov	r1, r3
 8004f38:	4b05      	ldr	r3, [pc, #20]	@ (8004f50 <DMA_List_FindNode+0x148>)
 8004f3a:	400b      	ands	r3, r1
 8004f3c:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3724      	adds	r7, #36	@ 0x24
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr
 8004f50:	ffff0000 	.word	0xffff0000

08004f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b087      	sub	sp, #28
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f62:	e139      	b.n	80051d8 <HAL_GPIO_Init+0x284>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	2101      	movs	r1, #1
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f70:	4013      	ands	r3, r2
 8004f72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	f000 812b 	beq.w	80051d2 <HAL_GPIO_Init+0x27e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f003 0303 	and.w	r3, r3, #3
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d005      	beq.n	8004f94 <HAL_GPIO_Init+0x40>
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f003 0303 	and.w	r3, r3, #3
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d130      	bne.n	8004ff6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	005b      	lsls	r3, r3, #1
 8004f9e:	2203      	movs	r2, #3
 8004fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa4:	43db      	mvns	r3, r3
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	4013      	ands	r3, r2
 8004faa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	68da      	ldr	r2, [r3, #12]
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	005b      	lsls	r3, r3, #1
 8004fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	693a      	ldr	r2, [r7, #16]
 8004fc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004fca:	2201      	movs	r2, #1
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd2:	43db      	mvns	r3, r3
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	091b      	lsrs	r3, r3, #4
 8004fe0:	f003 0201 	and.w	r2, r3, #1
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fea:	693a      	ldr	r2, [r7, #16]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	693a      	ldr	r2, [r7, #16]
 8004ff4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f003 0303 	and.w	r3, r3, #3
 8004ffe:	2b03      	cmp	r3, #3
 8005000:	d017      	beq.n	8005032 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	005b      	lsls	r3, r3, #1
 800500c:	2203      	movs	r2, #3
 800500e:	fa02 f303 	lsl.w	r3, r2, r3
 8005012:	43db      	mvns	r3, r3
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	4013      	ands	r3, r2
 8005018:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	689a      	ldr	r2, [r3, #8]
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	005b      	lsls	r3, r3, #1
 8005022:	fa02 f303 	lsl.w	r3, r2, r3
 8005026:	693a      	ldr	r2, [r7, #16]
 8005028:	4313      	orrs	r3, r2
 800502a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	693a      	ldr	r2, [r7, #16]
 8005030:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	f003 0303 	and.w	r3, r3, #3
 800503a:	2b02      	cmp	r3, #2
 800503c:	d123      	bne.n	8005086 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	08da      	lsrs	r2, r3, #3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	3208      	adds	r2, #8
 8005046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800504a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	f003 0307 	and.w	r3, r3, #7
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	220f      	movs	r2, #15
 8005056:	fa02 f303 	lsl.w	r3, r2, r3
 800505a:	43db      	mvns	r3, r3
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	4013      	ands	r3, r2
 8005060:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	691a      	ldr	r2, [r3, #16]
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	f003 0307 	and.w	r3, r3, #7
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	fa02 f303 	lsl.w	r3, r2, r3
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	4313      	orrs	r3, r2
 8005076:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	08da      	lsrs	r2, r3, #3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	3208      	adds	r2, #8
 8005080:	6939      	ldr	r1, [r7, #16]
 8005082:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	005b      	lsls	r3, r3, #1
 8005090:	2203      	movs	r2, #3
 8005092:	fa02 f303 	lsl.w	r3, r2, r3
 8005096:	43db      	mvns	r3, r3
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	4013      	ands	r3, r2
 800509c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f003 0203 	and.w	r2, r3, #3
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	005b      	lsls	r3, r3, #1
 80050aa:	fa02 f303 	lsl.w	r3, r2, r3
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f000 8085 	beq.w	80051d2 <HAL_GPIO_Init+0x27e>
      {
        temp = SBS->EXTICR[position >> 2u];
 80050c8:	4a4b      	ldr	r2, [pc, #300]	@ (80051f8 <HAL_GPIO_Init+0x2a4>)
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	089b      	lsrs	r3, r3, #2
 80050ce:	334c      	adds	r3, #76	@ 0x4c
 80050d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << ((position & 0x03u) * SBS_EXTICR1_PC_EXTI1_Pos));
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f003 0303 	and.w	r3, r3, #3
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	220f      	movs	r2, #15
 80050e0:	fa02 f303 	lsl.w	r3, r2, r3
 80050e4:	43db      	mvns	r3, r3
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	4013      	ands	r3, r2
 80050ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * SBS_EXTICR1_PC_EXTI1_Pos));
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	0a9a      	lsrs	r2, r3, #10
 80050f0:	4b42      	ldr	r3, [pc, #264]	@ (80051fc <HAL_GPIO_Init+0x2a8>)
 80050f2:	4013      	ands	r3, r2
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	f002 0203 	and.w	r2, r2, #3
 80050fa:	0092      	lsls	r2, r2, #2
 80050fc:	4093      	lsls	r3, r2
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	4313      	orrs	r3, r2
 8005102:	613b      	str	r3, [r7, #16]
        SBS->EXTICR[position >> 2u] = temp;
 8005104:	493c      	ldr	r1, [pc, #240]	@ (80051f8 <HAL_GPIO_Init+0x2a4>)
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	089b      	lsrs	r3, r3, #2
 800510a:	334c      	adds	r3, #76	@ 0x4c
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005112:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	43db      	mvns	r3, r3
 800511e:	693a      	ldr	r2, [r7, #16]
 8005120:	4013      	ands	r3, r2
 8005122:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d003      	beq.n	8005138 <HAL_GPIO_Init+0x1e4>
        {
          temp |= iocurrent;
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	4313      	orrs	r3, r2
 8005136:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005138:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005140:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	43db      	mvns	r3, r3
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	4013      	ands	r3, r2
 8005150:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d003      	beq.n	8005166 <HAL_GPIO_Init+0x212>
        {
          temp |= iocurrent;
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	4313      	orrs	r3, r2
 8005164:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005166:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800516e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005172:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005176:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	43db      	mvns	r3, r3
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	4013      	ands	r3, r2
 8005180:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d003      	beq.n	8005196 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	4313      	orrs	r3, r2
 8005194:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005196:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 80051a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	43db      	mvns	r3, r3
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	4013      	ands	r3, r2
 80051b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d003      	beq.n	80051c8 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 80051c0:	693a      	ldr	r2, [r7, #16]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80051c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	3301      	adds	r3, #1
 80051d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	fa22 f303 	lsr.w	r3, r2, r3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	f47f aebe 	bne.w	8004f64 <HAL_GPIO_Init+0x10>
  }
}
 80051e8:	bf00      	nop
 80051ea:	bf00      	nop
 80051ec:	371c      	adds	r7, #28
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	58000400 	.word	0x58000400
 80051fc:	0029ff7f 	.word	0x0029ff7f

08005200 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005200:	b480      	push	{r7}
 8005202:	b087      	sub	sp, #28
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800520a:	2300      	movs	r3, #0
 800520c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800520e:	e0a8      	b.n	8005362 <HAL_GPIO_DeInit+0x162>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005210:	2201      	movs	r2, #1
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	fa02 f303 	lsl.w	r3, r2, r3
 8005218:	683a      	ldr	r2, [r7, #0]
 800521a:	4013      	ands	r3, r2
 800521c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	2b00      	cmp	r3, #0
 8005222:	f000 809b 	beq.w	800535c <HAL_GPIO_DeInit+0x15c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SBS->EXTICR[position >> 2u];
 8005226:	4a56      	ldr	r2, [pc, #344]	@ (8005380 <HAL_GPIO_DeInit+0x180>)
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	089b      	lsrs	r3, r3, #2
 800522c:	334c      	adds	r3, #76	@ 0x4c
 800522e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005232:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << ((position & 0x03u) * SBS_EXTICR1_PC_EXTI1_Pos));
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	f003 0303 	and.w	r3, r3, #3
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	220f      	movs	r2, #15
 800523e:	fa02 f303 	lsl.w	r3, r2, r3
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	4013      	ands	r3, r2
 8005246:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * SBS_EXTICR1_PC_EXTI1_Pos)))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	0a9a      	lsrs	r2, r3, #10
 800524c:	4b4d      	ldr	r3, [pc, #308]	@ (8005384 <HAL_GPIO_DeInit+0x184>)
 800524e:	4013      	ands	r3, r2
 8005250:	697a      	ldr	r2, [r7, #20]
 8005252:	f002 0203 	and.w	r2, r2, #3
 8005256:	0092      	lsls	r2, r2, #2
 8005258:	4093      	lsls	r3, r2
 800525a:	68fa      	ldr	r2, [r7, #12]
 800525c:	429a      	cmp	r2, r3
 800525e:	d13e      	bne.n	80052de <HAL_GPIO_DeInit+0xde>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8005260:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005264:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	43db      	mvns	r3, r3
 800526c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005270:	4013      	ands	r3, r2
 8005272:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8005276:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800527a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	43db      	mvns	r3, r3
 8005282:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005286:	4013      	ands	r3, r2
 8005288:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800528c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005290:	685a      	ldr	r2, [r3, #4]
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	43db      	mvns	r3, r3
 8005296:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800529a:	4013      	ands	r3, r2
 800529c:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800529e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	43db      	mvns	r3, r3
 80052a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80052ac:	4013      	ands	r3, r2
 80052ae:	600b      	str	r3, [r1, #0]

        /* Clear EXTICR configuration */
        tmp = 0x0FuL << ((position & 0x03u) * SBS_EXTICR1_PC_EXTI1_Pos);
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	f003 0303 	and.w	r3, r3, #3
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	220f      	movs	r2, #15
 80052ba:	fa02 f303 	lsl.w	r3, r2, r3
 80052be:	60fb      	str	r3, [r7, #12]
        SBS->EXTICR[position >> 2u] &= ~tmp;
 80052c0:	4a2f      	ldr	r2, [pc, #188]	@ (8005380 <HAL_GPIO_DeInit+0x180>)
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	089b      	lsrs	r3, r3, #2
 80052c6:	334c      	adds	r3, #76	@ 0x4c
 80052c8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	43da      	mvns	r2, r3
 80052d0:	482b      	ldr	r0, [pc, #172]	@ (8005380 <HAL_GPIO_DeInit+0x180>)
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	089b      	lsrs	r3, r3, #2
 80052d6:	400a      	ands	r2, r1
 80052d8:	334c      	adds	r3, #76	@ 0x4c
 80052da:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	005b      	lsls	r3, r3, #1
 80052e6:	2103      	movs	r1, #3
 80052e8:	fa01 f303 	lsl.w	r3, r1, r3
 80052ec:	431a      	orrs	r2, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos)) ;
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	08da      	lsrs	r2, r3, #3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	3208      	adds	r2, #8
 80052fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	f003 0307 	and.w	r3, r3, #7
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	220f      	movs	r2, #15
 8005308:	fa02 f303 	lsl.w	r3, r2, r3
 800530c:	43db      	mvns	r3, r3
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	08d2      	lsrs	r2, r2, #3
 8005312:	4019      	ands	r1, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	3208      	adds	r2, #8
 8005318:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	689a      	ldr	r2, [r3, #8]
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	005b      	lsls	r3, r3, #1
 8005324:	2103      	movs	r1, #3
 8005326:	fa01 f303 	lsl.w	r3, r1, r3
 800532a:	43db      	mvns	r3, r3
 800532c:	401a      	ands	r2, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685a      	ldr	r2, [r3, #4]
 8005336:	2101      	movs	r1, #1
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	fa01 f303 	lsl.w	r3, r1, r3
 800533e:	43db      	mvns	r3, r3
 8005340:	401a      	ands	r2, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	68da      	ldr	r2, [r3, #12]
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	005b      	lsls	r3, r3, #1
 800534e:	2103      	movs	r1, #3
 8005350:	fa01 f303 	lsl.w	r3, r1, r3
 8005354:	43db      	mvns	r3, r3
 8005356:	401a      	ands	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	60da      	str	r2, [r3, #12]
    }

    position++;
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	3301      	adds	r3, #1
 8005360:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005362:	683a      	ldr	r2, [r7, #0]
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	fa22 f303 	lsr.w	r3, r2, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	f47f af50 	bne.w	8005210 <HAL_GPIO_DeInit+0x10>
  }
}
 8005370:	bf00      	nop
 8005372:	bf00      	nop
 8005374:	371c      	adds	r7, #28
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	58000400 	.word	0x58000400
 8005384:	0029ff7f 	.word	0x0029ff7f

08005388 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	460b      	mov	r3, r1
 8005392:	807b      	strh	r3, [r7, #2]
 8005394:	4613      	mov	r3, r2
 8005396:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005398:	787b      	ldrb	r3, [r7, #1]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d003      	beq.n	80053a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800539e:	887a      	ldrh	r2, [r7, #2]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80053a4:	e002      	b.n	80053ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80053a6:	887a      	ldrh	r2, [r7, #2]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80053ac:	bf00      	nop
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af02      	add	r7, sp, #8
 80053be:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d101      	bne.n	80053ca <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e059      	b.n	800547e <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d106      	bne.n	80053ea <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f009 f96b 	bl	800e6c0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2203      	movs	r2, #3
 80053ee:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	4a24      	ldr	r2, [pc, #144]	@ (8005488 <HAL_HCD_Init+0xd0>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d102      	bne.n	8005400 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4618      	mov	r0, r3
 8005406:	f005 f9cc 	bl	800a7a2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6818      	ldr	r0, [r3, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	7c1a      	ldrb	r2, [r3, #16]
 8005412:	f88d 2000 	strb.w	r2, [sp]
 8005416:	3304      	adds	r3, #4
 8005418:	cb0e      	ldmia	r3, {r1, r2, r3}
 800541a:	f005 f95f 	bl	800a6dc <USB_CoreInit>
 800541e:	4603      	mov	r3, r0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d005      	beq.n	8005430 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2202      	movs	r2, #2
 8005428:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e026      	b.n	800547e <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2101      	movs	r1, #1
 8005436:	4618      	mov	r0, r3
 8005438:	f005 f9c4 	bl	800a7c4 <USB_SetCurrentMode>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d005      	beq.n	800544e <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2202      	movs	r2, #2
 8005446:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e017      	b.n	800547e <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6818      	ldr	r0, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	7c1a      	ldrb	r2, [r3, #16]
 8005456:	f88d 2000 	strb.w	r2, [sp]
 800545a:	3304      	adds	r3, #4
 800545c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800545e:	f005 fb67 	bl	800ab30 <USB_HostInit>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d005      	beq.n	8005474 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2202      	movs	r2, #2
 800546c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e004      	b.n	800547e <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3710      	adds	r7, #16
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	40080000 	.word	0x40080000

0800548c <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800548c:	b590      	push	{r4, r7, lr}
 800548e:	b08b      	sub	sp, #44	@ 0x2c
 8005490:	af04      	add	r7, sp, #16
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	4608      	mov	r0, r1
 8005496:	4611      	mov	r1, r2
 8005498:	461a      	mov	r2, r3
 800549a:	4603      	mov	r3, r0
 800549c:	70fb      	strb	r3, [r7, #3]
 800549e:	460b      	mov	r3, r1
 80054a0:	70bb      	strb	r3, [r7, #2]
 80054a2:	4613      	mov	r3, r2
 80054a4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80054a6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80054a8:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d101      	bne.n	80054b8 <HAL_HCD_HC_Init+0x2c>
 80054b4:	2302      	movs	r3, #2
 80054b6:	e09d      	b.n	80055f4 <HAL_HCD_HC_Init+0x168>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80054c0:	78fa      	ldrb	r2, [r7, #3]
 80054c2:	6879      	ldr	r1, [r7, #4]
 80054c4:	4613      	mov	r3, r2
 80054c6:	011b      	lsls	r3, r3, #4
 80054c8:	1a9b      	subs	r3, r3, r2
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	440b      	add	r3, r1
 80054ce:	3319      	adds	r3, #25
 80054d0:	2200      	movs	r2, #0
 80054d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80054d4:	78fa      	ldrb	r2, [r7, #3]
 80054d6:	6879      	ldr	r1, [r7, #4]
 80054d8:	4613      	mov	r3, r2
 80054da:	011b      	lsls	r3, r3, #4
 80054dc:	1a9b      	subs	r3, r3, r2
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	440b      	add	r3, r1
 80054e2:	3314      	adds	r3, #20
 80054e4:	787a      	ldrb	r2, [r7, #1]
 80054e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80054e8:	78fa      	ldrb	r2, [r7, #3]
 80054ea:	6879      	ldr	r1, [r7, #4]
 80054ec:	4613      	mov	r3, r2
 80054ee:	011b      	lsls	r3, r3, #4
 80054f0:	1a9b      	subs	r3, r3, r2
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	440b      	add	r3, r1
 80054f6:	3315      	adds	r3, #21
 80054f8:	78fa      	ldrb	r2, [r7, #3]
 80054fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80054fc:	78fa      	ldrb	r2, [r7, #3]
 80054fe:	6879      	ldr	r1, [r7, #4]
 8005500:	4613      	mov	r3, r2
 8005502:	011b      	lsls	r3, r3, #4
 8005504:	1a9b      	subs	r3, r3, r2
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	440b      	add	r3, r1
 800550a:	3326      	adds	r3, #38	@ 0x26
 800550c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8005510:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8005512:	78fa      	ldrb	r2, [r7, #3]
 8005514:	78bb      	ldrb	r3, [r7, #2]
 8005516:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800551a:	b2d8      	uxtb	r0, r3
 800551c:	6879      	ldr	r1, [r7, #4]
 800551e:	4613      	mov	r3, r2
 8005520:	011b      	lsls	r3, r3, #4
 8005522:	1a9b      	subs	r3, r3, r2
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	440b      	add	r3, r1
 8005528:	3316      	adds	r3, #22
 800552a:	4602      	mov	r2, r0
 800552c:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800552e:	78fb      	ldrb	r3, [r7, #3]
 8005530:	4619      	mov	r1, r3
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 fbc8 	bl	8005cc8 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8005538:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800553c:	2b00      	cmp	r3, #0
 800553e:	da0a      	bge.n	8005556 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8005540:	78fa      	ldrb	r2, [r7, #3]
 8005542:	6879      	ldr	r1, [r7, #4]
 8005544:	4613      	mov	r3, r2
 8005546:	011b      	lsls	r3, r3, #4
 8005548:	1a9b      	subs	r3, r3, r2
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	440b      	add	r3, r1
 800554e:	3317      	adds	r3, #23
 8005550:	2201      	movs	r2, #1
 8005552:	701a      	strb	r2, [r3, #0]
 8005554:	e009      	b.n	800556a <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8005556:	78fa      	ldrb	r2, [r7, #3]
 8005558:	6879      	ldr	r1, [r7, #4]
 800555a:	4613      	mov	r3, r2
 800555c:	011b      	lsls	r3, r3, #4
 800555e:	1a9b      	subs	r3, r3, r2
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	440b      	add	r3, r1
 8005564:	3317      	adds	r3, #23
 8005566:	2200      	movs	r2, #0
 8005568:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4618      	mov	r0, r3
 8005570:	f005 fc68 	bl	800ae44 <USB_GetHostSpeed>
 8005574:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8005576:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800557a:	2b01      	cmp	r3, #1
 800557c:	d10b      	bne.n	8005596 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800557e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005582:	2b01      	cmp	r3, #1
 8005584:	d107      	bne.n	8005596 <HAL_HCD_HC_Init+0x10a>
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d104      	bne.n	8005596 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	2bbc      	cmp	r3, #188	@ 0xbc
 8005590:	d901      	bls.n	8005596 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8005592:	23bc      	movs	r3, #188	@ 0xbc
 8005594:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8005596:	78fa      	ldrb	r2, [r7, #3]
 8005598:	6879      	ldr	r1, [r7, #4]
 800559a:	4613      	mov	r3, r2
 800559c:	011b      	lsls	r3, r3, #4
 800559e:	1a9b      	subs	r3, r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	440b      	add	r3, r1
 80055a4:	3318      	adds	r3, #24
 80055a6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80055aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80055ac:	78fa      	ldrb	r2, [r7, #3]
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	b298      	uxth	r0, r3
 80055b2:	6879      	ldr	r1, [r7, #4]
 80055b4:	4613      	mov	r3, r2
 80055b6:	011b      	lsls	r3, r3, #4
 80055b8:	1a9b      	subs	r3, r3, r2
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	440b      	add	r3, r1
 80055be:	3328      	adds	r3, #40	@ 0x28
 80055c0:	4602      	mov	r2, r0
 80055c2:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6818      	ldr	r0, [r3, #0]
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	787c      	ldrb	r4, [r7, #1]
 80055ce:	78ba      	ldrb	r2, [r7, #2]
 80055d0:	78f9      	ldrb	r1, [r7, #3]
 80055d2:	9302      	str	r3, [sp, #8]
 80055d4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80055d8:	9301      	str	r3, [sp, #4]
 80055da:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80055de:	9300      	str	r3, [sp, #0]
 80055e0:	4623      	mov	r3, r4
 80055e2:	f005 fc57 	bl	800ae94 <USB_HC_Init>
 80055e6:	4603      	mov	r3, r0
 80055e8:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80055f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	371c      	adds	r7, #28
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd90      	pop	{r4, r7, pc}

080055fc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	460b      	mov	r3, r1
 8005606:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005608:	2300      	movs	r3, #0
 800560a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8005612:	2b01      	cmp	r3, #1
 8005614:	d101      	bne.n	800561a <HAL_HCD_HC_Halt+0x1e>
 8005616:	2302      	movs	r3, #2
 8005618:	e00f      	b.n	800563a <HAL_HCD_HC_Halt+0x3e>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2201      	movs	r2, #1
 800561e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	78fa      	ldrb	r2, [r7, #3]
 8005628:	4611      	mov	r1, r2
 800562a:	4618      	mov	r0, r3
 800562c:	f005 ffe9 	bl	800b602 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8005638:	7bfb      	ldrb	r3, [r7, #15]
}
 800563a:	4618      	mov	r0, r3
 800563c:	3710      	adds	r7, #16
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
	...

08005644 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	4608      	mov	r0, r1
 800564e:	4611      	mov	r1, r2
 8005650:	461a      	mov	r2, r3
 8005652:	4603      	mov	r3, r0
 8005654:	70fb      	strb	r3, [r7, #3]
 8005656:	460b      	mov	r3, r1
 8005658:	70bb      	strb	r3, [r7, #2]
 800565a:	4613      	mov	r3, r2
 800565c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800565e:	78fa      	ldrb	r2, [r7, #3]
 8005660:	6879      	ldr	r1, [r7, #4]
 8005662:	4613      	mov	r3, r2
 8005664:	011b      	lsls	r3, r3, #4
 8005666:	1a9b      	subs	r3, r3, r2
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	440b      	add	r3, r1
 800566c:	3317      	adds	r3, #23
 800566e:	78ba      	ldrb	r2, [r7, #2]
 8005670:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8005672:	78fa      	ldrb	r2, [r7, #3]
 8005674:	6879      	ldr	r1, [r7, #4]
 8005676:	4613      	mov	r3, r2
 8005678:	011b      	lsls	r3, r3, #4
 800567a:	1a9b      	subs	r3, r3, r2
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	440b      	add	r3, r1
 8005680:	3326      	adds	r3, #38	@ 0x26
 8005682:	787a      	ldrb	r2, [r7, #1]
 8005684:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8005686:	7c3b      	ldrb	r3, [r7, #16]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d114      	bne.n	80056b6 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800568c:	78fa      	ldrb	r2, [r7, #3]
 800568e:	6879      	ldr	r1, [r7, #4]
 8005690:	4613      	mov	r3, r2
 8005692:	011b      	lsls	r3, r3, #4
 8005694:	1a9b      	subs	r3, r3, r2
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	440b      	add	r3, r1
 800569a:	332a      	adds	r3, #42	@ 0x2a
 800569c:	2203      	movs	r2, #3
 800569e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80056a0:	78fa      	ldrb	r2, [r7, #3]
 80056a2:	6879      	ldr	r1, [r7, #4]
 80056a4:	4613      	mov	r3, r2
 80056a6:	011b      	lsls	r3, r3, #4
 80056a8:	1a9b      	subs	r3, r3, r2
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	440b      	add	r3, r1
 80056ae:	3319      	adds	r3, #25
 80056b0:	7f3a      	ldrb	r2, [r7, #28]
 80056b2:	701a      	strb	r2, [r3, #0]
 80056b4:	e009      	b.n	80056ca <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80056b6:	78fa      	ldrb	r2, [r7, #3]
 80056b8:	6879      	ldr	r1, [r7, #4]
 80056ba:	4613      	mov	r3, r2
 80056bc:	011b      	lsls	r3, r3, #4
 80056be:	1a9b      	subs	r3, r3, r2
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	440b      	add	r3, r1
 80056c4:	332a      	adds	r3, #42	@ 0x2a
 80056c6:	2202      	movs	r2, #2
 80056c8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80056ca:	787b      	ldrb	r3, [r7, #1]
 80056cc:	2b03      	cmp	r3, #3
 80056ce:	f200 8102 	bhi.w	80058d6 <HAL_HCD_HC_SubmitRequest+0x292>
 80056d2:	a201      	add	r2, pc, #4	@ (adr r2, 80056d8 <HAL_HCD_HC_SubmitRequest+0x94>)
 80056d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d8:	080056e9 	.word	0x080056e9
 80056dc:	080058c1 	.word	0x080058c1
 80056e0:	080057ad 	.word	0x080057ad
 80056e4:	08005837 	.word	0x08005837
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80056e8:	7c3b      	ldrb	r3, [r7, #16]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	f040 80f5 	bne.w	80058da <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80056f0:	78bb      	ldrb	r3, [r7, #2]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d12d      	bne.n	8005752 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80056f6:	8b3b      	ldrh	r3, [r7, #24]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d109      	bne.n	8005710 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80056fc:	78fa      	ldrb	r2, [r7, #3]
 80056fe:	6879      	ldr	r1, [r7, #4]
 8005700:	4613      	mov	r3, r2
 8005702:	011b      	lsls	r3, r3, #4
 8005704:	1a9b      	subs	r3, r3, r2
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	440b      	add	r3, r1
 800570a:	333d      	adds	r3, #61	@ 0x3d
 800570c:	2201      	movs	r2, #1
 800570e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8005710:	78fa      	ldrb	r2, [r7, #3]
 8005712:	6879      	ldr	r1, [r7, #4]
 8005714:	4613      	mov	r3, r2
 8005716:	011b      	lsls	r3, r3, #4
 8005718:	1a9b      	subs	r3, r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	440b      	add	r3, r1
 800571e:	333d      	adds	r3, #61	@ 0x3d
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d10a      	bne.n	800573c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005726:	78fa      	ldrb	r2, [r7, #3]
 8005728:	6879      	ldr	r1, [r7, #4]
 800572a:	4613      	mov	r3, r2
 800572c:	011b      	lsls	r3, r3, #4
 800572e:	1a9b      	subs	r3, r3, r2
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	440b      	add	r3, r1
 8005734:	332a      	adds	r3, #42	@ 0x2a
 8005736:	2200      	movs	r2, #0
 8005738:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800573a:	e0ce      	b.n	80058da <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800573c:	78fa      	ldrb	r2, [r7, #3]
 800573e:	6879      	ldr	r1, [r7, #4]
 8005740:	4613      	mov	r3, r2
 8005742:	011b      	lsls	r3, r3, #4
 8005744:	1a9b      	subs	r3, r3, r2
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	440b      	add	r3, r1
 800574a:	332a      	adds	r3, #42	@ 0x2a
 800574c:	2202      	movs	r2, #2
 800574e:	701a      	strb	r2, [r3, #0]
      break;
 8005750:	e0c3      	b.n	80058da <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8005752:	78fa      	ldrb	r2, [r7, #3]
 8005754:	6879      	ldr	r1, [r7, #4]
 8005756:	4613      	mov	r3, r2
 8005758:	011b      	lsls	r3, r3, #4
 800575a:	1a9b      	subs	r3, r3, r2
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	440b      	add	r3, r1
 8005760:	331a      	adds	r3, #26
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	2b01      	cmp	r3, #1
 8005766:	f040 80b8 	bne.w	80058da <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800576a:	78fa      	ldrb	r2, [r7, #3]
 800576c:	6879      	ldr	r1, [r7, #4]
 800576e:	4613      	mov	r3, r2
 8005770:	011b      	lsls	r3, r3, #4
 8005772:	1a9b      	subs	r3, r3, r2
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	440b      	add	r3, r1
 8005778:	333c      	adds	r3, #60	@ 0x3c
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d10a      	bne.n	8005796 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005780:	78fa      	ldrb	r2, [r7, #3]
 8005782:	6879      	ldr	r1, [r7, #4]
 8005784:	4613      	mov	r3, r2
 8005786:	011b      	lsls	r3, r3, #4
 8005788:	1a9b      	subs	r3, r3, r2
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	440b      	add	r3, r1
 800578e:	332a      	adds	r3, #42	@ 0x2a
 8005790:	2200      	movs	r2, #0
 8005792:	701a      	strb	r2, [r3, #0]
      break;
 8005794:	e0a1      	b.n	80058da <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005796:	78fa      	ldrb	r2, [r7, #3]
 8005798:	6879      	ldr	r1, [r7, #4]
 800579a:	4613      	mov	r3, r2
 800579c:	011b      	lsls	r3, r3, #4
 800579e:	1a9b      	subs	r3, r3, r2
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	440b      	add	r3, r1
 80057a4:	332a      	adds	r3, #42	@ 0x2a
 80057a6:	2202      	movs	r2, #2
 80057a8:	701a      	strb	r2, [r3, #0]
      break;
 80057aa:	e096      	b.n	80058da <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80057ac:	78bb      	ldrb	r3, [r7, #2]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d120      	bne.n	80057f4 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80057b2:	78fa      	ldrb	r2, [r7, #3]
 80057b4:	6879      	ldr	r1, [r7, #4]
 80057b6:	4613      	mov	r3, r2
 80057b8:	011b      	lsls	r3, r3, #4
 80057ba:	1a9b      	subs	r3, r3, r2
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	440b      	add	r3, r1
 80057c0:	333d      	adds	r3, #61	@ 0x3d
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d10a      	bne.n	80057de <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80057c8:	78fa      	ldrb	r2, [r7, #3]
 80057ca:	6879      	ldr	r1, [r7, #4]
 80057cc:	4613      	mov	r3, r2
 80057ce:	011b      	lsls	r3, r3, #4
 80057d0:	1a9b      	subs	r3, r3, r2
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	440b      	add	r3, r1
 80057d6:	332a      	adds	r3, #42	@ 0x2a
 80057d8:	2200      	movs	r2, #0
 80057da:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80057dc:	e07e      	b.n	80058dc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80057de:	78fa      	ldrb	r2, [r7, #3]
 80057e0:	6879      	ldr	r1, [r7, #4]
 80057e2:	4613      	mov	r3, r2
 80057e4:	011b      	lsls	r3, r3, #4
 80057e6:	1a9b      	subs	r3, r3, r2
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	440b      	add	r3, r1
 80057ec:	332a      	adds	r3, #42	@ 0x2a
 80057ee:	2202      	movs	r2, #2
 80057f0:	701a      	strb	r2, [r3, #0]
      break;
 80057f2:	e073      	b.n	80058dc <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80057f4:	78fa      	ldrb	r2, [r7, #3]
 80057f6:	6879      	ldr	r1, [r7, #4]
 80057f8:	4613      	mov	r3, r2
 80057fa:	011b      	lsls	r3, r3, #4
 80057fc:	1a9b      	subs	r3, r3, r2
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	440b      	add	r3, r1
 8005802:	333c      	adds	r3, #60	@ 0x3c
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d10a      	bne.n	8005820 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800580a:	78fa      	ldrb	r2, [r7, #3]
 800580c:	6879      	ldr	r1, [r7, #4]
 800580e:	4613      	mov	r3, r2
 8005810:	011b      	lsls	r3, r3, #4
 8005812:	1a9b      	subs	r3, r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	440b      	add	r3, r1
 8005818:	332a      	adds	r3, #42	@ 0x2a
 800581a:	2200      	movs	r2, #0
 800581c:	701a      	strb	r2, [r3, #0]
      break;
 800581e:	e05d      	b.n	80058dc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005820:	78fa      	ldrb	r2, [r7, #3]
 8005822:	6879      	ldr	r1, [r7, #4]
 8005824:	4613      	mov	r3, r2
 8005826:	011b      	lsls	r3, r3, #4
 8005828:	1a9b      	subs	r3, r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	440b      	add	r3, r1
 800582e:	332a      	adds	r3, #42	@ 0x2a
 8005830:	2202      	movs	r2, #2
 8005832:	701a      	strb	r2, [r3, #0]
      break;
 8005834:	e052      	b.n	80058dc <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8005836:	78bb      	ldrb	r3, [r7, #2]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d120      	bne.n	800587e <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800583c:	78fa      	ldrb	r2, [r7, #3]
 800583e:	6879      	ldr	r1, [r7, #4]
 8005840:	4613      	mov	r3, r2
 8005842:	011b      	lsls	r3, r3, #4
 8005844:	1a9b      	subs	r3, r3, r2
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	440b      	add	r3, r1
 800584a:	333d      	adds	r3, #61	@ 0x3d
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d10a      	bne.n	8005868 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005852:	78fa      	ldrb	r2, [r7, #3]
 8005854:	6879      	ldr	r1, [r7, #4]
 8005856:	4613      	mov	r3, r2
 8005858:	011b      	lsls	r3, r3, #4
 800585a:	1a9b      	subs	r3, r3, r2
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	440b      	add	r3, r1
 8005860:	332a      	adds	r3, #42	@ 0x2a
 8005862:	2200      	movs	r2, #0
 8005864:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005866:	e039      	b.n	80058dc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005868:	78fa      	ldrb	r2, [r7, #3]
 800586a:	6879      	ldr	r1, [r7, #4]
 800586c:	4613      	mov	r3, r2
 800586e:	011b      	lsls	r3, r3, #4
 8005870:	1a9b      	subs	r3, r3, r2
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	440b      	add	r3, r1
 8005876:	332a      	adds	r3, #42	@ 0x2a
 8005878:	2202      	movs	r2, #2
 800587a:	701a      	strb	r2, [r3, #0]
      break;
 800587c:	e02e      	b.n	80058dc <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800587e:	78fa      	ldrb	r2, [r7, #3]
 8005880:	6879      	ldr	r1, [r7, #4]
 8005882:	4613      	mov	r3, r2
 8005884:	011b      	lsls	r3, r3, #4
 8005886:	1a9b      	subs	r3, r3, r2
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	440b      	add	r3, r1
 800588c:	333c      	adds	r3, #60	@ 0x3c
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d10a      	bne.n	80058aa <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005894:	78fa      	ldrb	r2, [r7, #3]
 8005896:	6879      	ldr	r1, [r7, #4]
 8005898:	4613      	mov	r3, r2
 800589a:	011b      	lsls	r3, r3, #4
 800589c:	1a9b      	subs	r3, r3, r2
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	440b      	add	r3, r1
 80058a2:	332a      	adds	r3, #42	@ 0x2a
 80058a4:	2200      	movs	r2, #0
 80058a6:	701a      	strb	r2, [r3, #0]
      break;
 80058a8:	e018      	b.n	80058dc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80058aa:	78fa      	ldrb	r2, [r7, #3]
 80058ac:	6879      	ldr	r1, [r7, #4]
 80058ae:	4613      	mov	r3, r2
 80058b0:	011b      	lsls	r3, r3, #4
 80058b2:	1a9b      	subs	r3, r3, r2
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	440b      	add	r3, r1
 80058b8:	332a      	adds	r3, #42	@ 0x2a
 80058ba:	2202      	movs	r2, #2
 80058bc:	701a      	strb	r2, [r3, #0]
      break;
 80058be:	e00d      	b.n	80058dc <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80058c0:	78fa      	ldrb	r2, [r7, #3]
 80058c2:	6879      	ldr	r1, [r7, #4]
 80058c4:	4613      	mov	r3, r2
 80058c6:	011b      	lsls	r3, r3, #4
 80058c8:	1a9b      	subs	r3, r3, r2
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	440b      	add	r3, r1
 80058ce:	332a      	adds	r3, #42	@ 0x2a
 80058d0:	2200      	movs	r2, #0
 80058d2:	701a      	strb	r2, [r3, #0]
      break;
 80058d4:	e002      	b.n	80058dc <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80058d6:	bf00      	nop
 80058d8:	e000      	b.n	80058dc <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80058da:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80058dc:	78fa      	ldrb	r2, [r7, #3]
 80058de:	6879      	ldr	r1, [r7, #4]
 80058e0:	4613      	mov	r3, r2
 80058e2:	011b      	lsls	r3, r3, #4
 80058e4:	1a9b      	subs	r3, r3, r2
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	440b      	add	r3, r1
 80058ea:	332c      	adds	r3, #44	@ 0x2c
 80058ec:	697a      	ldr	r2, [r7, #20]
 80058ee:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80058f0:	78fa      	ldrb	r2, [r7, #3]
 80058f2:	8b39      	ldrh	r1, [r7, #24]
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	4613      	mov	r3, r2
 80058f8:	011b      	lsls	r3, r3, #4
 80058fa:	1a9b      	subs	r3, r3, r2
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	4403      	add	r3, r0
 8005900:	3334      	adds	r3, #52	@ 0x34
 8005902:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8005904:	78fa      	ldrb	r2, [r7, #3]
 8005906:	6879      	ldr	r1, [r7, #4]
 8005908:	4613      	mov	r3, r2
 800590a:	011b      	lsls	r3, r3, #4
 800590c:	1a9b      	subs	r3, r3, r2
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	440b      	add	r3, r1
 8005912:	334c      	adds	r3, #76	@ 0x4c
 8005914:	2200      	movs	r2, #0
 8005916:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8005918:	78fa      	ldrb	r2, [r7, #3]
 800591a:	6879      	ldr	r1, [r7, #4]
 800591c:	4613      	mov	r3, r2
 800591e:	011b      	lsls	r3, r3, #4
 8005920:	1a9b      	subs	r3, r3, r2
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	440b      	add	r3, r1
 8005926:	3338      	adds	r3, #56	@ 0x38
 8005928:	2200      	movs	r2, #0
 800592a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800592c:	78fa      	ldrb	r2, [r7, #3]
 800592e:	6879      	ldr	r1, [r7, #4]
 8005930:	4613      	mov	r3, r2
 8005932:	011b      	lsls	r3, r3, #4
 8005934:	1a9b      	subs	r3, r3, r2
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	440b      	add	r3, r1
 800593a:	3315      	adds	r3, #21
 800593c:	78fa      	ldrb	r2, [r7, #3]
 800593e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8005940:	78fa      	ldrb	r2, [r7, #3]
 8005942:	6879      	ldr	r1, [r7, #4]
 8005944:	4613      	mov	r3, r2
 8005946:	011b      	lsls	r3, r3, #4
 8005948:	1a9b      	subs	r3, r3, r2
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	440b      	add	r3, r1
 800594e:	334d      	adds	r3, #77	@ 0x4d
 8005950:	2200      	movs	r2, #0
 8005952:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6818      	ldr	r0, [r3, #0]
 8005958:	78fa      	ldrb	r2, [r7, #3]
 800595a:	4613      	mov	r3, r2
 800595c:	011b      	lsls	r3, r3, #4
 800595e:	1a9b      	subs	r3, r3, r2
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	3310      	adds	r3, #16
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	4413      	add	r3, r2
 8005968:	1d19      	adds	r1, r3, #4
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	799b      	ldrb	r3, [r3, #6]
 800596e:	461a      	mov	r2, r3
 8005970:	f005 fbbc 	bl	800b0ec <USB_HC_StartXfer>
 8005974:	4603      	mov	r3, r0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3708      	adds	r7, #8
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop

08005980 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b086      	sub	sp, #24
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4618      	mov	r0, r3
 8005998:	f005 f88a 	bl	800aab0 <USB_GetMode>
 800599c:	4603      	mov	r3, r0
 800599e:	2b01      	cmp	r3, #1
 80059a0:	f040 80fb 	bne.w	8005b9a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4618      	mov	r0, r3
 80059aa:	f005 f84d 	bl	800aa48 <USB_ReadInterrupts>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f000 80f1 	beq.w	8005b98 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4618      	mov	r0, r3
 80059bc:	f005 f844 	bl	800aa48 <USB_ReadInterrupts>
 80059c0:	4603      	mov	r3, r0
 80059c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80059c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80059ca:	d104      	bne.n	80059d6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80059d4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4618      	mov	r0, r3
 80059dc:	f005 f834 	bl	800aa48 <USB_ReadInterrupts>
 80059e0:	4603      	mov	r3, r0
 80059e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80059e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059ea:	d104      	bne.n	80059f6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80059f4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4618      	mov	r0, r3
 80059fc:	f005 f824 	bl	800aa48 <USB_ReadInterrupts>
 8005a00:	4603      	mov	r3, r0
 8005a02:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005a06:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a0a:	d104      	bne.n	8005a16 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8005a14:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f005 f814 	bl	800aa48 <USB_ReadInterrupts>
 8005a20:	4603      	mov	r3, r0
 8005a22:	f003 0302 	and.w	r3, r3, #2
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d103      	bne.n	8005a32 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2202      	movs	r2, #2
 8005a30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4618      	mov	r0, r3
 8005a38:	f005 f806 	bl	800aa48 <USB_ReadInterrupts>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a46:	d120      	bne.n	8005a8a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8005a50:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 0301 	and.w	r3, r3, #1
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d113      	bne.n	8005a8a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8005a62:	2110      	movs	r1, #16
 8005a64:	6938      	ldr	r0, [r7, #16]
 8005a66:	f004 fef9 	bl	800a85c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8005a6a:	6938      	ldr	r0, [r7, #16]
 8005a6c:	f004 ff28 	bl	800a8c0 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	7a5b      	ldrb	r3, [r3, #9]
 8005a74:	2b02      	cmp	r3, #2
 8005a76:	d105      	bne.n	8005a84 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2101      	movs	r1, #1
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f005 f940 	bl	800ad04 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f008 fe85 	bl	800e794 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f004 ffda 	bl	800aa48 <USB_ReadInterrupts>
 8005a94:	4603      	mov	r3, r0
 8005a96:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a9a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a9e:	d102      	bne.n	8005aa6 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f001 fd33 	bl	800750c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f004 ffcc 	bl	800aa48 <USB_ReadInterrupts>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	f003 0308 	and.w	r3, r3, #8
 8005ab6:	2b08      	cmp	r3, #8
 8005ab8:	d106      	bne.n	8005ac8 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f008 fe4e 	bl	800e75c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2208      	movs	r2, #8
 8005ac6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4618      	mov	r0, r3
 8005ace:	f004 ffbb 	bl	800aa48 <USB_ReadInterrupts>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ad8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005adc:	d139      	bne.n	8005b52 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f005 fd7c 	bl	800b5e0 <USB_HC_ReadInterrupt>
 8005ae8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005aea:	2300      	movs	r3, #0
 8005aec:	617b      	str	r3, [r7, #20]
 8005aee:	e025      	b.n	8005b3c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	f003 030f 	and.w	r3, r3, #15
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	fa22 f303 	lsr.w	r3, r2, r3
 8005afc:	f003 0301 	and.w	r3, r3, #1
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d018      	beq.n	8005b36 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	015a      	lsls	r2, r3, #5
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b1a:	d106      	bne.n	8005b2a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	4619      	mov	r1, r3
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 f905 	bl	8005d32 <HCD_HC_IN_IRQHandler>
 8005b28:	e005      	b.n	8005b36 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	4619      	mov	r1, r3
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 ff67 	bl	8006a04 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	617b      	str	r3, [r7, #20]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	795b      	ldrb	r3, [r3, #5]
 8005b40:	461a      	mov	r2, r3
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d3d3      	bcc.n	8005af0 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005b50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4618      	mov	r0, r3
 8005b58:	f004 ff76 	bl	800aa48 <USB_ReadInterrupts>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	f003 0310 	and.w	r3, r3, #16
 8005b62:	2b10      	cmp	r3, #16
 8005b64:	d101      	bne.n	8005b6a <HAL_HCD_IRQHandler+0x1ea>
 8005b66:	2301      	movs	r3, #1
 8005b68:	e000      	b.n	8005b6c <HAL_HCD_IRQHandler+0x1ec>
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d014      	beq.n	8005b9a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	699a      	ldr	r2, [r3, #24]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f022 0210 	bic.w	r2, r2, #16
 8005b7e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f001 fbe4 	bl	800734e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	699a      	ldr	r2, [r3, #24]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f042 0210 	orr.w	r2, r2, #16
 8005b94:	619a      	str	r2, [r3, #24]
 8005b96:	e000      	b.n	8005b9a <HAL_HCD_IRQHandler+0x21a>
      return;
 8005b98:	bf00      	nop
    }
  }
}
 8005b9a:	3718      	adds	r7, #24
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d101      	bne.n	8005bb6 <HAL_HCD_Start+0x16>
 8005bb2:	2302      	movs	r3, #2
 8005bb4:	e013      	b.n	8005bde <HAL_HCD_Start+0x3e>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2101      	movs	r1, #1
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f005 f904 	bl	800add2 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f004 fdd6 	bl	800a780 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3708      	adds	r7, #8
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}

08005be6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8005be6:	b580      	push	{r7, lr}
 8005be8:	b082      	sub	sp, #8
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d101      	bne.n	8005bfc <HAL_HCD_Stop+0x16>
 8005bf8:	2302      	movs	r3, #2
 8005bfa:	e00d      	b.n	8005c18 <HAL_HCD_Stop+0x32>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f005 fe57 	bl	800b8bc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3708      	adds	r7, #8
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f005 f8a6 	bl	800ad7e <USB_ResetPort>
 8005c32:	4603      	mov	r3, r0
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3708      	adds	r7, #8
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	460b      	mov	r3, r1
 8005c46:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005c48:	78fa      	ldrb	r2, [r7, #3]
 8005c4a:	6879      	ldr	r1, [r7, #4]
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	011b      	lsls	r3, r3, #4
 8005c50:	1a9b      	subs	r3, r3, r2
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	440b      	add	r3, r1
 8005c56:	334c      	adds	r3, #76	@ 0x4c
 8005c58:	781b      	ldrb	r3, [r3, #0]
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	370c      	adds	r7, #12
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr

08005c66 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8005c66:	b480      	push	{r7}
 8005c68:	b083      	sub	sp, #12
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
 8005c6e:	460b      	mov	r3, r1
 8005c70:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8005c72:	78fa      	ldrb	r2, [r7, #3]
 8005c74:	6879      	ldr	r1, [r7, #4]
 8005c76:	4613      	mov	r3, r2
 8005c78:	011b      	lsls	r3, r3, #4
 8005c7a:	1a9b      	subs	r3, r3, r2
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	440b      	add	r3, r1
 8005c80:	3338      	adds	r3, #56	@ 0x38
 8005c82:	681b      	ldr	r3, [r3, #0]
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f005 f8e8 	bl	800ae72 <USB_GetCurrentFrame>
 8005ca2:	4603      	mov	r3, r0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3708      	adds	r7, #8
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b082      	sub	sp, #8
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f005 f8c3 	bl	800ae44 <USB_GetHostSpeed>
 8005cbe:	4603      	mov	r3, r0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3708      	adds	r7, #8
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8005cd4:	78fa      	ldrb	r2, [r7, #3]
 8005cd6:	6879      	ldr	r1, [r7, #4]
 8005cd8:	4613      	mov	r3, r2
 8005cda:	011b      	lsls	r3, r3, #4
 8005cdc:	1a9b      	subs	r3, r3, r2
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	440b      	add	r3, r1
 8005ce2:	331a      	adds	r3, #26
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8005ce8:	78fa      	ldrb	r2, [r7, #3]
 8005cea:	6879      	ldr	r1, [r7, #4]
 8005cec:	4613      	mov	r3, r2
 8005cee:	011b      	lsls	r3, r3, #4
 8005cf0:	1a9b      	subs	r3, r3, r2
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	440b      	add	r3, r1
 8005cf6:	331b      	adds	r3, #27
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8005cfc:	78fa      	ldrb	r2, [r7, #3]
 8005cfe:	6879      	ldr	r1, [r7, #4]
 8005d00:	4613      	mov	r3, r2
 8005d02:	011b      	lsls	r3, r3, #4
 8005d04:	1a9b      	subs	r3, r3, r2
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	440b      	add	r3, r1
 8005d0a:	3325      	adds	r3, #37	@ 0x25
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8005d10:	78fa      	ldrb	r2, [r7, #3]
 8005d12:	6879      	ldr	r1, [r7, #4]
 8005d14:	4613      	mov	r3, r2
 8005d16:	011b      	lsls	r3, r3, #4
 8005d18:	1a9b      	subs	r3, r3, r2
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	440b      	add	r3, r1
 8005d1e:	3324      	adds	r3, #36	@ 0x24
 8005d20:	2200      	movs	r2, #0
 8005d22:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	370c      	adds	r7, #12
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b086      	sub	sp, #24
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	78fa      	ldrb	r2, [r7, #3]
 8005d4e:	4611      	mov	r1, r2
 8005d50:	4618      	mov	r0, r3
 8005d52:	f004 fe8c 	bl	800aa6e <USB_ReadChInterrupts>
 8005d56:	4603      	mov	r3, r0
 8005d58:	f003 0304 	and.w	r3, r3, #4
 8005d5c:	2b04      	cmp	r3, #4
 8005d5e:	d11a      	bne.n	8005d96 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8005d60:	78fb      	ldrb	r3, [r7, #3]
 8005d62:	015a      	lsls	r2, r3, #5
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	4413      	add	r3, r2
 8005d68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	2304      	movs	r3, #4
 8005d70:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005d72:	78fa      	ldrb	r2, [r7, #3]
 8005d74:	6879      	ldr	r1, [r7, #4]
 8005d76:	4613      	mov	r3, r2
 8005d78:	011b      	lsls	r3, r3, #4
 8005d7a:	1a9b      	subs	r3, r3, r2
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	440b      	add	r3, r1
 8005d80:	334d      	adds	r3, #77	@ 0x4d
 8005d82:	2207      	movs	r2, #7
 8005d84:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	78fa      	ldrb	r2, [r7, #3]
 8005d8c:	4611      	mov	r1, r2
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f005 fc37 	bl	800b602 <USB_HC_Halt>
 8005d94:	e09e      	b.n	8005ed4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	78fa      	ldrb	r2, [r7, #3]
 8005d9c:	4611      	mov	r1, r2
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f004 fe65 	bl	800aa6e <USB_ReadChInterrupts>
 8005da4:	4603      	mov	r3, r0
 8005da6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005daa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dae:	d11b      	bne.n	8005de8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8005db0:	78fb      	ldrb	r3, [r7, #3]
 8005db2:	015a      	lsls	r2, r3, #5
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	4413      	add	r3, r2
 8005db8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005dc2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8005dc4:	78fa      	ldrb	r2, [r7, #3]
 8005dc6:	6879      	ldr	r1, [r7, #4]
 8005dc8:	4613      	mov	r3, r2
 8005dca:	011b      	lsls	r3, r3, #4
 8005dcc:	1a9b      	subs	r3, r3, r2
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	440b      	add	r3, r1
 8005dd2:	334d      	adds	r3, #77	@ 0x4d
 8005dd4:	2208      	movs	r2, #8
 8005dd6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	78fa      	ldrb	r2, [r7, #3]
 8005dde:	4611      	mov	r1, r2
 8005de0:	4618      	mov	r0, r3
 8005de2:	f005 fc0e 	bl	800b602 <USB_HC_Halt>
 8005de6:	e075      	b.n	8005ed4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	78fa      	ldrb	r2, [r7, #3]
 8005dee:	4611      	mov	r1, r2
 8005df0:	4618      	mov	r0, r3
 8005df2:	f004 fe3c 	bl	800aa6e <USB_ReadChInterrupts>
 8005df6:	4603      	mov	r3, r0
 8005df8:	f003 0308 	and.w	r3, r3, #8
 8005dfc:	2b08      	cmp	r3, #8
 8005dfe:	d11a      	bne.n	8005e36 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8005e00:	78fb      	ldrb	r3, [r7, #3]
 8005e02:	015a      	lsls	r2, r3, #5
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	4413      	add	r3, r2
 8005e08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	2308      	movs	r3, #8
 8005e10:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8005e12:	78fa      	ldrb	r2, [r7, #3]
 8005e14:	6879      	ldr	r1, [r7, #4]
 8005e16:	4613      	mov	r3, r2
 8005e18:	011b      	lsls	r3, r3, #4
 8005e1a:	1a9b      	subs	r3, r3, r2
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	440b      	add	r3, r1
 8005e20:	334d      	adds	r3, #77	@ 0x4d
 8005e22:	2206      	movs	r2, #6
 8005e24:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	78fa      	ldrb	r2, [r7, #3]
 8005e2c:	4611      	mov	r1, r2
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f005 fbe7 	bl	800b602 <USB_HC_Halt>
 8005e34:	e04e      	b.n	8005ed4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	78fa      	ldrb	r2, [r7, #3]
 8005e3c:	4611      	mov	r1, r2
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f004 fe15 	bl	800aa6e <USB_ReadChInterrupts>
 8005e44:	4603      	mov	r3, r0
 8005e46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e4e:	d11b      	bne.n	8005e88 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005e50:	78fb      	ldrb	r3, [r7, #3]
 8005e52:	015a      	lsls	r2, r3, #5
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	4413      	add	r3, r2
 8005e58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e62:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005e64:	78fa      	ldrb	r2, [r7, #3]
 8005e66:	6879      	ldr	r1, [r7, #4]
 8005e68:	4613      	mov	r3, r2
 8005e6a:	011b      	lsls	r3, r3, #4
 8005e6c:	1a9b      	subs	r3, r3, r2
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	440b      	add	r3, r1
 8005e72:	334d      	adds	r3, #77	@ 0x4d
 8005e74:	2209      	movs	r2, #9
 8005e76:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	78fa      	ldrb	r2, [r7, #3]
 8005e7e:	4611      	mov	r1, r2
 8005e80:	4618      	mov	r0, r3
 8005e82:	f005 fbbe 	bl	800b602 <USB_HC_Halt>
 8005e86:	e025      	b.n	8005ed4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	78fa      	ldrb	r2, [r7, #3]
 8005e8e:	4611      	mov	r1, r2
 8005e90:	4618      	mov	r0, r3
 8005e92:	f004 fdec 	bl	800aa6e <USB_ReadChInterrupts>
 8005e96:	4603      	mov	r3, r0
 8005e98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e9c:	2b80      	cmp	r3, #128	@ 0x80
 8005e9e:	d119      	bne.n	8005ed4 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005ea0:	78fb      	ldrb	r3, [r7, #3]
 8005ea2:	015a      	lsls	r2, r3, #5
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005eac:	461a      	mov	r2, r3
 8005eae:	2380      	movs	r3, #128	@ 0x80
 8005eb0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005eb2:	78fa      	ldrb	r2, [r7, #3]
 8005eb4:	6879      	ldr	r1, [r7, #4]
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	011b      	lsls	r3, r3, #4
 8005eba:	1a9b      	subs	r3, r3, r2
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	440b      	add	r3, r1
 8005ec0:	334d      	adds	r3, #77	@ 0x4d
 8005ec2:	2207      	movs	r2, #7
 8005ec4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	78fa      	ldrb	r2, [r7, #3]
 8005ecc:	4611      	mov	r1, r2
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f005 fb97 	bl	800b602 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	78fa      	ldrb	r2, [r7, #3]
 8005eda:	4611      	mov	r1, r2
 8005edc:	4618      	mov	r0, r3
 8005ede:	f004 fdc6 	bl	800aa6e <USB_ReadChInterrupts>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ee8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005eec:	d112      	bne.n	8005f14 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	78fa      	ldrb	r2, [r7, #3]
 8005ef4:	4611      	mov	r1, r2
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f005 fb83 	bl	800b602 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8005efc:	78fb      	ldrb	r3, [r7, #3]
 8005efe:	015a      	lsls	r2, r3, #5
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	4413      	add	r3, r2
 8005f04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f08:	461a      	mov	r2, r3
 8005f0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005f0e:	6093      	str	r3, [r2, #8]
 8005f10:	f000 bd75 	b.w	80069fe <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	78fa      	ldrb	r2, [r7, #3]
 8005f1a:	4611      	mov	r1, r2
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f004 fda6 	bl	800aa6e <USB_ReadChInterrupts>
 8005f22:	4603      	mov	r3, r0
 8005f24:	f003 0301 	and.w	r3, r3, #1
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	f040 8128 	bne.w	800617e <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005f2e:	78fb      	ldrb	r3, [r7, #3]
 8005f30:	015a      	lsls	r2, r3, #5
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	4413      	add	r3, r2
 8005f36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	2320      	movs	r3, #32
 8005f3e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8005f40:	78fa      	ldrb	r2, [r7, #3]
 8005f42:	6879      	ldr	r1, [r7, #4]
 8005f44:	4613      	mov	r3, r2
 8005f46:	011b      	lsls	r3, r3, #4
 8005f48:	1a9b      	subs	r3, r3, r2
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	440b      	add	r3, r1
 8005f4e:	331b      	adds	r3, #27
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d119      	bne.n	8005f8a <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005f56:	78fa      	ldrb	r2, [r7, #3]
 8005f58:	6879      	ldr	r1, [r7, #4]
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	011b      	lsls	r3, r3, #4
 8005f5e:	1a9b      	subs	r3, r3, r2
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	440b      	add	r3, r1
 8005f64:	331b      	adds	r3, #27
 8005f66:	2200      	movs	r2, #0
 8005f68:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005f6a:	78fb      	ldrb	r3, [r7, #3]
 8005f6c:	015a      	lsls	r2, r3, #5
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	4413      	add	r3, r2
 8005f72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	78fa      	ldrb	r2, [r7, #3]
 8005f7a:	0151      	lsls	r1, r2, #5
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	440a      	add	r2, r1
 8005f80:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f88:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	799b      	ldrb	r3, [r3, #6]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d01b      	beq.n	8005fca <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005f92:	78fa      	ldrb	r2, [r7, #3]
 8005f94:	6879      	ldr	r1, [r7, #4]
 8005f96:	4613      	mov	r3, r2
 8005f98:	011b      	lsls	r3, r3, #4
 8005f9a:	1a9b      	subs	r3, r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	440b      	add	r3, r1
 8005fa0:	3330      	adds	r3, #48	@ 0x30
 8005fa2:	6819      	ldr	r1, [r3, #0]
 8005fa4:	78fb      	ldrb	r3, [r7, #3]
 8005fa6:	015a      	lsls	r2, r3, #5
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	4413      	add	r3, r2
 8005fac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fb6:	78fa      	ldrb	r2, [r7, #3]
 8005fb8:	1ac9      	subs	r1, r1, r3
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	4613      	mov	r3, r2
 8005fbe:	011b      	lsls	r3, r3, #4
 8005fc0:	1a9b      	subs	r3, r3, r2
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	4403      	add	r3, r0
 8005fc6:	3338      	adds	r3, #56	@ 0x38
 8005fc8:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8005fca:	78fa      	ldrb	r2, [r7, #3]
 8005fcc:	6879      	ldr	r1, [r7, #4]
 8005fce:	4613      	mov	r3, r2
 8005fd0:	011b      	lsls	r3, r3, #4
 8005fd2:	1a9b      	subs	r3, r3, r2
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	440b      	add	r3, r1
 8005fd8:	334d      	adds	r3, #77	@ 0x4d
 8005fda:	2201      	movs	r2, #1
 8005fdc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8005fde:	78fa      	ldrb	r2, [r7, #3]
 8005fe0:	6879      	ldr	r1, [r7, #4]
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	011b      	lsls	r3, r3, #4
 8005fe6:	1a9b      	subs	r3, r3, r2
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	440b      	add	r3, r1
 8005fec:	3344      	adds	r3, #68	@ 0x44
 8005fee:	2200      	movs	r2, #0
 8005ff0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8005ff2:	78fb      	ldrb	r3, [r7, #3]
 8005ff4:	015a      	lsls	r2, r3, #5
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ffe:	461a      	mov	r2, r3
 8006000:	2301      	movs	r3, #1
 8006002:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006004:	78fa      	ldrb	r2, [r7, #3]
 8006006:	6879      	ldr	r1, [r7, #4]
 8006008:	4613      	mov	r3, r2
 800600a:	011b      	lsls	r3, r3, #4
 800600c:	1a9b      	subs	r3, r3, r2
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	440b      	add	r3, r1
 8006012:	3326      	adds	r3, #38	@ 0x26
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d00a      	beq.n	8006030 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800601a:	78fa      	ldrb	r2, [r7, #3]
 800601c:	6879      	ldr	r1, [r7, #4]
 800601e:	4613      	mov	r3, r2
 8006020:	011b      	lsls	r3, r3, #4
 8006022:	1a9b      	subs	r3, r3, r2
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	440b      	add	r3, r1
 8006028:	3326      	adds	r3, #38	@ 0x26
 800602a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800602c:	2b02      	cmp	r3, #2
 800602e:	d110      	bne.n	8006052 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	78fa      	ldrb	r2, [r7, #3]
 8006036:	4611      	mov	r1, r2
 8006038:	4618      	mov	r0, r3
 800603a:	f005 fae2 	bl	800b602 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800603e:	78fb      	ldrb	r3, [r7, #3]
 8006040:	015a      	lsls	r2, r3, #5
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	4413      	add	r3, r2
 8006046:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800604a:	461a      	mov	r2, r3
 800604c:	2310      	movs	r3, #16
 800604e:	6093      	str	r3, [r2, #8]
 8006050:	e03d      	b.n	80060ce <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8006052:	78fa      	ldrb	r2, [r7, #3]
 8006054:	6879      	ldr	r1, [r7, #4]
 8006056:	4613      	mov	r3, r2
 8006058:	011b      	lsls	r3, r3, #4
 800605a:	1a9b      	subs	r3, r3, r2
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	440b      	add	r3, r1
 8006060:	3326      	adds	r3, #38	@ 0x26
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	2b03      	cmp	r3, #3
 8006066:	d00a      	beq.n	800607e <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8006068:	78fa      	ldrb	r2, [r7, #3]
 800606a:	6879      	ldr	r1, [r7, #4]
 800606c:	4613      	mov	r3, r2
 800606e:	011b      	lsls	r3, r3, #4
 8006070:	1a9b      	subs	r3, r3, r2
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	440b      	add	r3, r1
 8006076:	3326      	adds	r3, #38	@ 0x26
 8006078:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800607a:	2b01      	cmp	r3, #1
 800607c:	d127      	bne.n	80060ce <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800607e:	78fb      	ldrb	r3, [r7, #3]
 8006080:	015a      	lsls	r2, r3, #5
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	4413      	add	r3, r2
 8006086:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	78fa      	ldrb	r2, [r7, #3]
 800608e:	0151      	lsls	r1, r2, #5
 8006090:	693a      	ldr	r2, [r7, #16]
 8006092:	440a      	add	r2, r1
 8006094:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006098:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800609c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800609e:	78fa      	ldrb	r2, [r7, #3]
 80060a0:	6879      	ldr	r1, [r7, #4]
 80060a2:	4613      	mov	r3, r2
 80060a4:	011b      	lsls	r3, r3, #4
 80060a6:	1a9b      	subs	r3, r3, r2
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	440b      	add	r3, r1
 80060ac:	334c      	adds	r3, #76	@ 0x4c
 80060ae:	2201      	movs	r2, #1
 80060b0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80060b2:	78fa      	ldrb	r2, [r7, #3]
 80060b4:	6879      	ldr	r1, [r7, #4]
 80060b6:	4613      	mov	r3, r2
 80060b8:	011b      	lsls	r3, r3, #4
 80060ba:	1a9b      	subs	r3, r3, r2
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	440b      	add	r3, r1
 80060c0:	334c      	adds	r3, #76	@ 0x4c
 80060c2:	781a      	ldrb	r2, [r3, #0]
 80060c4:	78fb      	ldrb	r3, [r7, #3]
 80060c6:	4619      	mov	r1, r3
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f008 fb71 	bl	800e7b0 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	799b      	ldrb	r3, [r3, #6]
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d13b      	bne.n	800614e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80060d6:	78fa      	ldrb	r2, [r7, #3]
 80060d8:	6879      	ldr	r1, [r7, #4]
 80060da:	4613      	mov	r3, r2
 80060dc:	011b      	lsls	r3, r3, #4
 80060de:	1a9b      	subs	r3, r3, r2
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	440b      	add	r3, r1
 80060e4:	3338      	adds	r3, #56	@ 0x38
 80060e6:	6819      	ldr	r1, [r3, #0]
 80060e8:	78fa      	ldrb	r2, [r7, #3]
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	4613      	mov	r3, r2
 80060ee:	011b      	lsls	r3, r3, #4
 80060f0:	1a9b      	subs	r3, r3, r2
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	4403      	add	r3, r0
 80060f6:	3328      	adds	r3, #40	@ 0x28
 80060f8:	881b      	ldrh	r3, [r3, #0]
 80060fa:	440b      	add	r3, r1
 80060fc:	1e59      	subs	r1, r3, #1
 80060fe:	78fa      	ldrb	r2, [r7, #3]
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	4613      	mov	r3, r2
 8006104:	011b      	lsls	r3, r3, #4
 8006106:	1a9b      	subs	r3, r3, r2
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	4403      	add	r3, r0
 800610c:	3328      	adds	r3, #40	@ 0x28
 800610e:	881b      	ldrh	r3, [r3, #0]
 8006110:	fbb1 f3f3 	udiv	r3, r1, r3
 8006114:	f003 0301 	and.w	r3, r3, #1
 8006118:	2b00      	cmp	r3, #0
 800611a:	f000 8470 	beq.w	80069fe <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800611e:	78fa      	ldrb	r2, [r7, #3]
 8006120:	6879      	ldr	r1, [r7, #4]
 8006122:	4613      	mov	r3, r2
 8006124:	011b      	lsls	r3, r3, #4
 8006126:	1a9b      	subs	r3, r3, r2
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	440b      	add	r3, r1
 800612c:	333c      	adds	r3, #60	@ 0x3c
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	78fa      	ldrb	r2, [r7, #3]
 8006132:	f083 0301 	eor.w	r3, r3, #1
 8006136:	b2d8      	uxtb	r0, r3
 8006138:	6879      	ldr	r1, [r7, #4]
 800613a:	4613      	mov	r3, r2
 800613c:	011b      	lsls	r3, r3, #4
 800613e:	1a9b      	subs	r3, r3, r2
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	440b      	add	r3, r1
 8006144:	333c      	adds	r3, #60	@ 0x3c
 8006146:	4602      	mov	r2, r0
 8006148:	701a      	strb	r2, [r3, #0]
 800614a:	f000 bc58 	b.w	80069fe <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800614e:	78fa      	ldrb	r2, [r7, #3]
 8006150:	6879      	ldr	r1, [r7, #4]
 8006152:	4613      	mov	r3, r2
 8006154:	011b      	lsls	r3, r3, #4
 8006156:	1a9b      	subs	r3, r3, r2
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	440b      	add	r3, r1
 800615c:	333c      	adds	r3, #60	@ 0x3c
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	78fa      	ldrb	r2, [r7, #3]
 8006162:	f083 0301 	eor.w	r3, r3, #1
 8006166:	b2d8      	uxtb	r0, r3
 8006168:	6879      	ldr	r1, [r7, #4]
 800616a:	4613      	mov	r3, r2
 800616c:	011b      	lsls	r3, r3, #4
 800616e:	1a9b      	subs	r3, r3, r2
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	440b      	add	r3, r1
 8006174:	333c      	adds	r3, #60	@ 0x3c
 8006176:	4602      	mov	r2, r0
 8006178:	701a      	strb	r2, [r3, #0]
 800617a:	f000 bc40 	b.w	80069fe <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	78fa      	ldrb	r2, [r7, #3]
 8006184:	4611      	mov	r1, r2
 8006186:	4618      	mov	r0, r3
 8006188:	f004 fc71 	bl	800aa6e <USB_ReadChInterrupts>
 800618c:	4603      	mov	r3, r0
 800618e:	f003 0320 	and.w	r3, r3, #32
 8006192:	2b20      	cmp	r3, #32
 8006194:	d131      	bne.n	80061fa <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8006196:	78fb      	ldrb	r3, [r7, #3]
 8006198:	015a      	lsls	r2, r3, #5
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	4413      	add	r3, r2
 800619e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061a2:	461a      	mov	r2, r3
 80061a4:	2320      	movs	r3, #32
 80061a6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80061a8:	78fa      	ldrb	r2, [r7, #3]
 80061aa:	6879      	ldr	r1, [r7, #4]
 80061ac:	4613      	mov	r3, r2
 80061ae:	011b      	lsls	r3, r3, #4
 80061b0:	1a9b      	subs	r3, r3, r2
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	440b      	add	r3, r1
 80061b6:	331a      	adds	r3, #26
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	f040 841f 	bne.w	80069fe <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80061c0:	78fa      	ldrb	r2, [r7, #3]
 80061c2:	6879      	ldr	r1, [r7, #4]
 80061c4:	4613      	mov	r3, r2
 80061c6:	011b      	lsls	r3, r3, #4
 80061c8:	1a9b      	subs	r3, r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	440b      	add	r3, r1
 80061ce:	331b      	adds	r3, #27
 80061d0:	2201      	movs	r2, #1
 80061d2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80061d4:	78fa      	ldrb	r2, [r7, #3]
 80061d6:	6879      	ldr	r1, [r7, #4]
 80061d8:	4613      	mov	r3, r2
 80061da:	011b      	lsls	r3, r3, #4
 80061dc:	1a9b      	subs	r3, r3, r2
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	440b      	add	r3, r1
 80061e2:	334d      	adds	r3, #77	@ 0x4d
 80061e4:	2203      	movs	r2, #3
 80061e6:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	78fa      	ldrb	r2, [r7, #3]
 80061ee:	4611      	mov	r1, r2
 80061f0:	4618      	mov	r0, r3
 80061f2:	f005 fa06 	bl	800b602 <USB_HC_Halt>
 80061f6:	f000 bc02 	b.w	80069fe <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	78fa      	ldrb	r2, [r7, #3]
 8006200:	4611      	mov	r1, r2
 8006202:	4618      	mov	r0, r3
 8006204:	f004 fc33 	bl	800aa6e <USB_ReadChInterrupts>
 8006208:	4603      	mov	r3, r0
 800620a:	f003 0302 	and.w	r3, r3, #2
 800620e:	2b02      	cmp	r3, #2
 8006210:	f040 8305 	bne.w	800681e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8006214:	78fb      	ldrb	r3, [r7, #3]
 8006216:	015a      	lsls	r2, r3, #5
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	4413      	add	r3, r2
 800621c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006220:	461a      	mov	r2, r3
 8006222:	2302      	movs	r3, #2
 8006224:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8006226:	78fa      	ldrb	r2, [r7, #3]
 8006228:	6879      	ldr	r1, [r7, #4]
 800622a:	4613      	mov	r3, r2
 800622c:	011b      	lsls	r3, r3, #4
 800622e:	1a9b      	subs	r3, r3, r2
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	440b      	add	r3, r1
 8006234:	334d      	adds	r3, #77	@ 0x4d
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	2b01      	cmp	r3, #1
 800623a:	d114      	bne.n	8006266 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800623c:	78fa      	ldrb	r2, [r7, #3]
 800623e:	6879      	ldr	r1, [r7, #4]
 8006240:	4613      	mov	r3, r2
 8006242:	011b      	lsls	r3, r3, #4
 8006244:	1a9b      	subs	r3, r3, r2
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	440b      	add	r3, r1
 800624a:	334d      	adds	r3, #77	@ 0x4d
 800624c:	2202      	movs	r2, #2
 800624e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8006250:	78fa      	ldrb	r2, [r7, #3]
 8006252:	6879      	ldr	r1, [r7, #4]
 8006254:	4613      	mov	r3, r2
 8006256:	011b      	lsls	r3, r3, #4
 8006258:	1a9b      	subs	r3, r3, r2
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	440b      	add	r3, r1
 800625e:	334c      	adds	r3, #76	@ 0x4c
 8006260:	2201      	movs	r2, #1
 8006262:	701a      	strb	r2, [r3, #0]
 8006264:	e2cc      	b.n	8006800 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8006266:	78fa      	ldrb	r2, [r7, #3]
 8006268:	6879      	ldr	r1, [r7, #4]
 800626a:	4613      	mov	r3, r2
 800626c:	011b      	lsls	r3, r3, #4
 800626e:	1a9b      	subs	r3, r3, r2
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	440b      	add	r3, r1
 8006274:	334d      	adds	r3, #77	@ 0x4d
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	2b06      	cmp	r3, #6
 800627a:	d114      	bne.n	80062a6 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800627c:	78fa      	ldrb	r2, [r7, #3]
 800627e:	6879      	ldr	r1, [r7, #4]
 8006280:	4613      	mov	r3, r2
 8006282:	011b      	lsls	r3, r3, #4
 8006284:	1a9b      	subs	r3, r3, r2
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	440b      	add	r3, r1
 800628a:	334d      	adds	r3, #77	@ 0x4d
 800628c:	2202      	movs	r2, #2
 800628e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8006290:	78fa      	ldrb	r2, [r7, #3]
 8006292:	6879      	ldr	r1, [r7, #4]
 8006294:	4613      	mov	r3, r2
 8006296:	011b      	lsls	r3, r3, #4
 8006298:	1a9b      	subs	r3, r3, r2
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	440b      	add	r3, r1
 800629e:	334c      	adds	r3, #76	@ 0x4c
 80062a0:	2205      	movs	r2, #5
 80062a2:	701a      	strb	r2, [r3, #0]
 80062a4:	e2ac      	b.n	8006800 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80062a6:	78fa      	ldrb	r2, [r7, #3]
 80062a8:	6879      	ldr	r1, [r7, #4]
 80062aa:	4613      	mov	r3, r2
 80062ac:	011b      	lsls	r3, r3, #4
 80062ae:	1a9b      	subs	r3, r3, r2
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	440b      	add	r3, r1
 80062b4:	334d      	adds	r3, #77	@ 0x4d
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	2b07      	cmp	r3, #7
 80062ba:	d00b      	beq.n	80062d4 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80062bc:	78fa      	ldrb	r2, [r7, #3]
 80062be:	6879      	ldr	r1, [r7, #4]
 80062c0:	4613      	mov	r3, r2
 80062c2:	011b      	lsls	r3, r3, #4
 80062c4:	1a9b      	subs	r3, r3, r2
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	440b      	add	r3, r1
 80062ca:	334d      	adds	r3, #77	@ 0x4d
 80062cc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80062ce:	2b09      	cmp	r3, #9
 80062d0:	f040 80a6 	bne.w	8006420 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80062d4:	78fa      	ldrb	r2, [r7, #3]
 80062d6:	6879      	ldr	r1, [r7, #4]
 80062d8:	4613      	mov	r3, r2
 80062da:	011b      	lsls	r3, r3, #4
 80062dc:	1a9b      	subs	r3, r3, r2
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	440b      	add	r3, r1
 80062e2:	334d      	adds	r3, #77	@ 0x4d
 80062e4:	2202      	movs	r2, #2
 80062e6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80062e8:	78fa      	ldrb	r2, [r7, #3]
 80062ea:	6879      	ldr	r1, [r7, #4]
 80062ec:	4613      	mov	r3, r2
 80062ee:	011b      	lsls	r3, r3, #4
 80062f0:	1a9b      	subs	r3, r3, r2
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	440b      	add	r3, r1
 80062f6:	3344      	adds	r3, #68	@ 0x44
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	1c59      	adds	r1, r3, #1
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	4613      	mov	r3, r2
 8006300:	011b      	lsls	r3, r3, #4
 8006302:	1a9b      	subs	r3, r3, r2
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	4403      	add	r3, r0
 8006308:	3344      	adds	r3, #68	@ 0x44
 800630a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800630c:	78fa      	ldrb	r2, [r7, #3]
 800630e:	6879      	ldr	r1, [r7, #4]
 8006310:	4613      	mov	r3, r2
 8006312:	011b      	lsls	r3, r3, #4
 8006314:	1a9b      	subs	r3, r3, r2
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	440b      	add	r3, r1
 800631a:	3344      	adds	r3, #68	@ 0x44
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2b02      	cmp	r3, #2
 8006320:	d943      	bls.n	80063aa <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8006322:	78fa      	ldrb	r2, [r7, #3]
 8006324:	6879      	ldr	r1, [r7, #4]
 8006326:	4613      	mov	r3, r2
 8006328:	011b      	lsls	r3, r3, #4
 800632a:	1a9b      	subs	r3, r3, r2
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	440b      	add	r3, r1
 8006330:	3344      	adds	r3, #68	@ 0x44
 8006332:	2200      	movs	r2, #0
 8006334:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8006336:	78fa      	ldrb	r2, [r7, #3]
 8006338:	6879      	ldr	r1, [r7, #4]
 800633a:	4613      	mov	r3, r2
 800633c:	011b      	lsls	r3, r3, #4
 800633e:	1a9b      	subs	r3, r3, r2
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	440b      	add	r3, r1
 8006344:	331a      	adds	r3, #26
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	2b01      	cmp	r3, #1
 800634a:	d123      	bne.n	8006394 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800634c:	78fa      	ldrb	r2, [r7, #3]
 800634e:	6879      	ldr	r1, [r7, #4]
 8006350:	4613      	mov	r3, r2
 8006352:	011b      	lsls	r3, r3, #4
 8006354:	1a9b      	subs	r3, r3, r2
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	440b      	add	r3, r1
 800635a:	331b      	adds	r3, #27
 800635c:	2200      	movs	r2, #0
 800635e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8006360:	78fa      	ldrb	r2, [r7, #3]
 8006362:	6879      	ldr	r1, [r7, #4]
 8006364:	4613      	mov	r3, r2
 8006366:	011b      	lsls	r3, r3, #4
 8006368:	1a9b      	subs	r3, r3, r2
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	440b      	add	r3, r1
 800636e:	331c      	adds	r3, #28
 8006370:	2200      	movs	r2, #0
 8006372:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006374:	78fb      	ldrb	r3, [r7, #3]
 8006376:	015a      	lsls	r2, r3, #5
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	4413      	add	r3, r2
 800637c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	78fa      	ldrb	r2, [r7, #3]
 8006384:	0151      	lsls	r1, r2, #5
 8006386:	693a      	ldr	r2, [r7, #16]
 8006388:	440a      	add	r2, r1
 800638a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800638e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006392:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006394:	78fa      	ldrb	r2, [r7, #3]
 8006396:	6879      	ldr	r1, [r7, #4]
 8006398:	4613      	mov	r3, r2
 800639a:	011b      	lsls	r3, r3, #4
 800639c:	1a9b      	subs	r3, r3, r2
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	440b      	add	r3, r1
 80063a2:	334c      	adds	r3, #76	@ 0x4c
 80063a4:	2204      	movs	r2, #4
 80063a6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80063a8:	e229      	b.n	80067fe <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80063aa:	78fa      	ldrb	r2, [r7, #3]
 80063ac:	6879      	ldr	r1, [r7, #4]
 80063ae:	4613      	mov	r3, r2
 80063b0:	011b      	lsls	r3, r3, #4
 80063b2:	1a9b      	subs	r3, r3, r2
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	440b      	add	r3, r1
 80063b8:	334c      	adds	r3, #76	@ 0x4c
 80063ba:	2202      	movs	r2, #2
 80063bc:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80063be:	78fa      	ldrb	r2, [r7, #3]
 80063c0:	6879      	ldr	r1, [r7, #4]
 80063c2:	4613      	mov	r3, r2
 80063c4:	011b      	lsls	r3, r3, #4
 80063c6:	1a9b      	subs	r3, r3, r2
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	440b      	add	r3, r1
 80063cc:	3326      	adds	r3, #38	@ 0x26
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00b      	beq.n	80063ec <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80063d4:	78fa      	ldrb	r2, [r7, #3]
 80063d6:	6879      	ldr	r1, [r7, #4]
 80063d8:	4613      	mov	r3, r2
 80063da:	011b      	lsls	r3, r3, #4
 80063dc:	1a9b      	subs	r3, r3, r2
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	440b      	add	r3, r1
 80063e2:	3326      	adds	r3, #38	@ 0x26
 80063e4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	f040 8209 	bne.w	80067fe <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80063ec:	78fb      	ldrb	r3, [r7, #3]
 80063ee:	015a      	lsls	r2, r3, #5
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	4413      	add	r3, r2
 80063f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006402:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800640a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800640c:	78fb      	ldrb	r3, [r7, #3]
 800640e:	015a      	lsls	r2, r3, #5
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	4413      	add	r3, r2
 8006414:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006418:	461a      	mov	r2, r3
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800641e:	e1ee      	b.n	80067fe <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8006420:	78fa      	ldrb	r2, [r7, #3]
 8006422:	6879      	ldr	r1, [r7, #4]
 8006424:	4613      	mov	r3, r2
 8006426:	011b      	lsls	r3, r3, #4
 8006428:	1a9b      	subs	r3, r3, r2
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	440b      	add	r3, r1
 800642e:	334d      	adds	r3, #77	@ 0x4d
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	2b05      	cmp	r3, #5
 8006434:	f040 80c8 	bne.w	80065c8 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006438:	78fa      	ldrb	r2, [r7, #3]
 800643a:	6879      	ldr	r1, [r7, #4]
 800643c:	4613      	mov	r3, r2
 800643e:	011b      	lsls	r3, r3, #4
 8006440:	1a9b      	subs	r3, r3, r2
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	440b      	add	r3, r1
 8006446:	334d      	adds	r3, #77	@ 0x4d
 8006448:	2202      	movs	r2, #2
 800644a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800644c:	78fa      	ldrb	r2, [r7, #3]
 800644e:	6879      	ldr	r1, [r7, #4]
 8006450:	4613      	mov	r3, r2
 8006452:	011b      	lsls	r3, r3, #4
 8006454:	1a9b      	subs	r3, r3, r2
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	440b      	add	r3, r1
 800645a:	331b      	adds	r3, #27
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	2b01      	cmp	r3, #1
 8006460:	f040 81ce 	bne.w	8006800 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8006464:	78fa      	ldrb	r2, [r7, #3]
 8006466:	6879      	ldr	r1, [r7, #4]
 8006468:	4613      	mov	r3, r2
 800646a:	011b      	lsls	r3, r3, #4
 800646c:	1a9b      	subs	r3, r3, r2
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	440b      	add	r3, r1
 8006472:	3326      	adds	r3, #38	@ 0x26
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	2b03      	cmp	r3, #3
 8006478:	d16b      	bne.n	8006552 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800647a:	78fa      	ldrb	r2, [r7, #3]
 800647c:	6879      	ldr	r1, [r7, #4]
 800647e:	4613      	mov	r3, r2
 8006480:	011b      	lsls	r3, r3, #4
 8006482:	1a9b      	subs	r3, r3, r2
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	440b      	add	r3, r1
 8006488:	3348      	adds	r3, #72	@ 0x48
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	1c59      	adds	r1, r3, #1
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	4613      	mov	r3, r2
 8006492:	011b      	lsls	r3, r3, #4
 8006494:	1a9b      	subs	r3, r3, r2
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	4403      	add	r3, r0
 800649a:	3348      	adds	r3, #72	@ 0x48
 800649c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800649e:	78fa      	ldrb	r2, [r7, #3]
 80064a0:	6879      	ldr	r1, [r7, #4]
 80064a2:	4613      	mov	r3, r2
 80064a4:	011b      	lsls	r3, r3, #4
 80064a6:	1a9b      	subs	r3, r3, r2
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	440b      	add	r3, r1
 80064ac:	3348      	adds	r3, #72	@ 0x48
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d943      	bls.n	800653c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80064b4:	78fa      	ldrb	r2, [r7, #3]
 80064b6:	6879      	ldr	r1, [r7, #4]
 80064b8:	4613      	mov	r3, r2
 80064ba:	011b      	lsls	r3, r3, #4
 80064bc:	1a9b      	subs	r3, r3, r2
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	440b      	add	r3, r1
 80064c2:	3348      	adds	r3, #72	@ 0x48
 80064c4:	2200      	movs	r2, #0
 80064c6:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80064c8:	78fa      	ldrb	r2, [r7, #3]
 80064ca:	6879      	ldr	r1, [r7, #4]
 80064cc:	4613      	mov	r3, r2
 80064ce:	011b      	lsls	r3, r3, #4
 80064d0:	1a9b      	subs	r3, r3, r2
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	440b      	add	r3, r1
 80064d6:	331b      	adds	r3, #27
 80064d8:	2200      	movs	r2, #0
 80064da:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80064dc:	78fa      	ldrb	r2, [r7, #3]
 80064de:	6879      	ldr	r1, [r7, #4]
 80064e0:	4613      	mov	r3, r2
 80064e2:	011b      	lsls	r3, r3, #4
 80064e4:	1a9b      	subs	r3, r3, r2
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	440b      	add	r3, r1
 80064ea:	3344      	adds	r3, #68	@ 0x44
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	2b02      	cmp	r3, #2
 80064f0:	d809      	bhi.n	8006506 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80064f2:	78fa      	ldrb	r2, [r7, #3]
 80064f4:	6879      	ldr	r1, [r7, #4]
 80064f6:	4613      	mov	r3, r2
 80064f8:	011b      	lsls	r3, r3, #4
 80064fa:	1a9b      	subs	r3, r3, r2
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	440b      	add	r3, r1
 8006500:	331c      	adds	r3, #28
 8006502:	2201      	movs	r2, #1
 8006504:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006506:	78fb      	ldrb	r3, [r7, #3]
 8006508:	015a      	lsls	r2, r3, #5
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	4413      	add	r3, r2
 800650e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	78fa      	ldrb	r2, [r7, #3]
 8006516:	0151      	lsls	r1, r2, #5
 8006518:	693a      	ldr	r2, [r7, #16]
 800651a:	440a      	add	r2, r1
 800651c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006520:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006524:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8006526:	78fa      	ldrb	r2, [r7, #3]
 8006528:	6879      	ldr	r1, [r7, #4]
 800652a:	4613      	mov	r3, r2
 800652c:	011b      	lsls	r3, r3, #4
 800652e:	1a9b      	subs	r3, r3, r2
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	440b      	add	r3, r1
 8006534:	334c      	adds	r3, #76	@ 0x4c
 8006536:	2204      	movs	r2, #4
 8006538:	701a      	strb	r2, [r3, #0]
 800653a:	e014      	b.n	8006566 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800653c:	78fa      	ldrb	r2, [r7, #3]
 800653e:	6879      	ldr	r1, [r7, #4]
 8006540:	4613      	mov	r3, r2
 8006542:	011b      	lsls	r3, r3, #4
 8006544:	1a9b      	subs	r3, r3, r2
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	440b      	add	r3, r1
 800654a:	334c      	adds	r3, #76	@ 0x4c
 800654c:	2202      	movs	r2, #2
 800654e:	701a      	strb	r2, [r3, #0]
 8006550:	e009      	b.n	8006566 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006552:	78fa      	ldrb	r2, [r7, #3]
 8006554:	6879      	ldr	r1, [r7, #4]
 8006556:	4613      	mov	r3, r2
 8006558:	011b      	lsls	r3, r3, #4
 800655a:	1a9b      	subs	r3, r3, r2
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	440b      	add	r3, r1
 8006560:	334c      	adds	r3, #76	@ 0x4c
 8006562:	2202      	movs	r2, #2
 8006564:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006566:	78fa      	ldrb	r2, [r7, #3]
 8006568:	6879      	ldr	r1, [r7, #4]
 800656a:	4613      	mov	r3, r2
 800656c:	011b      	lsls	r3, r3, #4
 800656e:	1a9b      	subs	r3, r3, r2
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	440b      	add	r3, r1
 8006574:	3326      	adds	r3, #38	@ 0x26
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d00b      	beq.n	8006594 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800657c:	78fa      	ldrb	r2, [r7, #3]
 800657e:	6879      	ldr	r1, [r7, #4]
 8006580:	4613      	mov	r3, r2
 8006582:	011b      	lsls	r3, r3, #4
 8006584:	1a9b      	subs	r3, r3, r2
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	440b      	add	r3, r1
 800658a:	3326      	adds	r3, #38	@ 0x26
 800658c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800658e:	2b02      	cmp	r3, #2
 8006590:	f040 8136 	bne.w	8006800 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8006594:	78fb      	ldrb	r3, [r7, #3]
 8006596:	015a      	lsls	r2, r3, #5
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	4413      	add	r3, r2
 800659c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80065aa:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80065b2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80065b4:	78fb      	ldrb	r3, [r7, #3]
 80065b6:	015a      	lsls	r2, r3, #5
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	4413      	add	r3, r2
 80065bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065c0:	461a      	mov	r2, r3
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6013      	str	r3, [r2, #0]
 80065c6:	e11b      	b.n	8006800 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80065c8:	78fa      	ldrb	r2, [r7, #3]
 80065ca:	6879      	ldr	r1, [r7, #4]
 80065cc:	4613      	mov	r3, r2
 80065ce:	011b      	lsls	r3, r3, #4
 80065d0:	1a9b      	subs	r3, r3, r2
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	440b      	add	r3, r1
 80065d6:	334d      	adds	r3, #77	@ 0x4d
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	2b03      	cmp	r3, #3
 80065dc:	f040 8081 	bne.w	80066e2 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80065e0:	78fa      	ldrb	r2, [r7, #3]
 80065e2:	6879      	ldr	r1, [r7, #4]
 80065e4:	4613      	mov	r3, r2
 80065e6:	011b      	lsls	r3, r3, #4
 80065e8:	1a9b      	subs	r3, r3, r2
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	440b      	add	r3, r1
 80065ee:	334d      	adds	r3, #77	@ 0x4d
 80065f0:	2202      	movs	r2, #2
 80065f2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80065f4:	78fa      	ldrb	r2, [r7, #3]
 80065f6:	6879      	ldr	r1, [r7, #4]
 80065f8:	4613      	mov	r3, r2
 80065fa:	011b      	lsls	r3, r3, #4
 80065fc:	1a9b      	subs	r3, r3, r2
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	440b      	add	r3, r1
 8006602:	331b      	adds	r3, #27
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	2b01      	cmp	r3, #1
 8006608:	f040 80fa 	bne.w	8006800 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800660c:	78fa      	ldrb	r2, [r7, #3]
 800660e:	6879      	ldr	r1, [r7, #4]
 8006610:	4613      	mov	r3, r2
 8006612:	011b      	lsls	r3, r3, #4
 8006614:	1a9b      	subs	r3, r3, r2
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	440b      	add	r3, r1
 800661a:	334c      	adds	r3, #76	@ 0x4c
 800661c:	2202      	movs	r2, #2
 800661e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006620:	78fb      	ldrb	r3, [r7, #3]
 8006622:	015a      	lsls	r2, r3, #5
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	4413      	add	r3, r2
 8006628:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	78fa      	ldrb	r2, [r7, #3]
 8006630:	0151      	lsls	r1, r2, #5
 8006632:	693a      	ldr	r2, [r7, #16]
 8006634:	440a      	add	r2, r1
 8006636:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800663a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800663e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006640:	78fb      	ldrb	r3, [r7, #3]
 8006642:	015a      	lsls	r2, r3, #5
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	4413      	add	r3, r2
 8006648:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	78fa      	ldrb	r2, [r7, #3]
 8006650:	0151      	lsls	r1, r2, #5
 8006652:	693a      	ldr	r2, [r7, #16]
 8006654:	440a      	add	r2, r1
 8006656:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800665a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800665e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8006660:	78fb      	ldrb	r3, [r7, #3]
 8006662:	015a      	lsls	r2, r3, #5
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	4413      	add	r3, r2
 8006668:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	78fa      	ldrb	r2, [r7, #3]
 8006670:	0151      	lsls	r1, r2, #5
 8006672:	693a      	ldr	r2, [r7, #16]
 8006674:	440a      	add	r2, r1
 8006676:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800667a:	f023 0320 	bic.w	r3, r3, #32
 800667e:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006680:	78fa      	ldrb	r2, [r7, #3]
 8006682:	6879      	ldr	r1, [r7, #4]
 8006684:	4613      	mov	r3, r2
 8006686:	011b      	lsls	r3, r3, #4
 8006688:	1a9b      	subs	r3, r3, r2
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	440b      	add	r3, r1
 800668e:	3326      	adds	r3, #38	@ 0x26
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00b      	beq.n	80066ae <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006696:	78fa      	ldrb	r2, [r7, #3]
 8006698:	6879      	ldr	r1, [r7, #4]
 800669a:	4613      	mov	r3, r2
 800669c:	011b      	lsls	r3, r3, #4
 800669e:	1a9b      	subs	r3, r3, r2
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	440b      	add	r3, r1
 80066a4:	3326      	adds	r3, #38	@ 0x26
 80066a6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80066a8:	2b02      	cmp	r3, #2
 80066aa:	f040 80a9 	bne.w	8006800 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80066ae:	78fb      	ldrb	r3, [r7, #3]
 80066b0:	015a      	lsls	r2, r3, #5
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	4413      	add	r3, r2
 80066b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80066c4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80066cc:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80066ce:	78fb      	ldrb	r3, [r7, #3]
 80066d0:	015a      	lsls	r2, r3, #5
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	4413      	add	r3, r2
 80066d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066da:	461a      	mov	r2, r3
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6013      	str	r3, [r2, #0]
 80066e0:	e08e      	b.n	8006800 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80066e2:	78fa      	ldrb	r2, [r7, #3]
 80066e4:	6879      	ldr	r1, [r7, #4]
 80066e6:	4613      	mov	r3, r2
 80066e8:	011b      	lsls	r3, r3, #4
 80066ea:	1a9b      	subs	r3, r3, r2
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	440b      	add	r3, r1
 80066f0:	334d      	adds	r3, #77	@ 0x4d
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	2b04      	cmp	r3, #4
 80066f6:	d143      	bne.n	8006780 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80066f8:	78fa      	ldrb	r2, [r7, #3]
 80066fa:	6879      	ldr	r1, [r7, #4]
 80066fc:	4613      	mov	r3, r2
 80066fe:	011b      	lsls	r3, r3, #4
 8006700:	1a9b      	subs	r3, r3, r2
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	440b      	add	r3, r1
 8006706:	334d      	adds	r3, #77	@ 0x4d
 8006708:	2202      	movs	r2, #2
 800670a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800670c:	78fa      	ldrb	r2, [r7, #3]
 800670e:	6879      	ldr	r1, [r7, #4]
 8006710:	4613      	mov	r3, r2
 8006712:	011b      	lsls	r3, r3, #4
 8006714:	1a9b      	subs	r3, r3, r2
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	440b      	add	r3, r1
 800671a:	334c      	adds	r3, #76	@ 0x4c
 800671c:	2202      	movs	r2, #2
 800671e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006720:	78fa      	ldrb	r2, [r7, #3]
 8006722:	6879      	ldr	r1, [r7, #4]
 8006724:	4613      	mov	r3, r2
 8006726:	011b      	lsls	r3, r3, #4
 8006728:	1a9b      	subs	r3, r3, r2
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	440b      	add	r3, r1
 800672e:	3326      	adds	r3, #38	@ 0x26
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00a      	beq.n	800674c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006736:	78fa      	ldrb	r2, [r7, #3]
 8006738:	6879      	ldr	r1, [r7, #4]
 800673a:	4613      	mov	r3, r2
 800673c:	011b      	lsls	r3, r3, #4
 800673e:	1a9b      	subs	r3, r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	440b      	add	r3, r1
 8006744:	3326      	adds	r3, #38	@ 0x26
 8006746:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006748:	2b02      	cmp	r3, #2
 800674a:	d159      	bne.n	8006800 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800674c:	78fb      	ldrb	r3, [r7, #3]
 800674e:	015a      	lsls	r2, r3, #5
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	4413      	add	r3, r2
 8006754:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006762:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800676a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800676c:	78fb      	ldrb	r3, [r7, #3]
 800676e:	015a      	lsls	r2, r3, #5
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	4413      	add	r3, r2
 8006774:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006778:	461a      	mov	r2, r3
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6013      	str	r3, [r2, #0]
 800677e:	e03f      	b.n	8006800 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8006780:	78fa      	ldrb	r2, [r7, #3]
 8006782:	6879      	ldr	r1, [r7, #4]
 8006784:	4613      	mov	r3, r2
 8006786:	011b      	lsls	r3, r3, #4
 8006788:	1a9b      	subs	r3, r3, r2
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	440b      	add	r3, r1
 800678e:	334d      	adds	r3, #77	@ 0x4d
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	2b08      	cmp	r3, #8
 8006794:	d126      	bne.n	80067e4 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006796:	78fa      	ldrb	r2, [r7, #3]
 8006798:	6879      	ldr	r1, [r7, #4]
 800679a:	4613      	mov	r3, r2
 800679c:	011b      	lsls	r3, r3, #4
 800679e:	1a9b      	subs	r3, r3, r2
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	440b      	add	r3, r1
 80067a4:	334d      	adds	r3, #77	@ 0x4d
 80067a6:	2202      	movs	r2, #2
 80067a8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80067aa:	78fa      	ldrb	r2, [r7, #3]
 80067ac:	6879      	ldr	r1, [r7, #4]
 80067ae:	4613      	mov	r3, r2
 80067b0:	011b      	lsls	r3, r3, #4
 80067b2:	1a9b      	subs	r3, r3, r2
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	440b      	add	r3, r1
 80067b8:	3344      	adds	r3, #68	@ 0x44
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	1c59      	adds	r1, r3, #1
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	4613      	mov	r3, r2
 80067c2:	011b      	lsls	r3, r3, #4
 80067c4:	1a9b      	subs	r3, r3, r2
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	4403      	add	r3, r0
 80067ca:	3344      	adds	r3, #68	@ 0x44
 80067cc:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80067ce:	78fa      	ldrb	r2, [r7, #3]
 80067d0:	6879      	ldr	r1, [r7, #4]
 80067d2:	4613      	mov	r3, r2
 80067d4:	011b      	lsls	r3, r3, #4
 80067d6:	1a9b      	subs	r3, r3, r2
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	440b      	add	r3, r1
 80067dc:	334c      	adds	r3, #76	@ 0x4c
 80067de:	2204      	movs	r2, #4
 80067e0:	701a      	strb	r2, [r3, #0]
 80067e2:	e00d      	b.n	8006800 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80067e4:	78fa      	ldrb	r2, [r7, #3]
 80067e6:	6879      	ldr	r1, [r7, #4]
 80067e8:	4613      	mov	r3, r2
 80067ea:	011b      	lsls	r3, r3, #4
 80067ec:	1a9b      	subs	r3, r3, r2
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	440b      	add	r3, r1
 80067f2:	334d      	adds	r3, #77	@ 0x4d
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	f000 8100 	beq.w	80069fc <HCD_HC_IN_IRQHandler+0xcca>
 80067fc:	e000      	b.n	8006800 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80067fe:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006800:	78fa      	ldrb	r2, [r7, #3]
 8006802:	6879      	ldr	r1, [r7, #4]
 8006804:	4613      	mov	r3, r2
 8006806:	011b      	lsls	r3, r3, #4
 8006808:	1a9b      	subs	r3, r3, r2
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	440b      	add	r3, r1
 800680e:	334c      	adds	r3, #76	@ 0x4c
 8006810:	781a      	ldrb	r2, [r3, #0]
 8006812:	78fb      	ldrb	r3, [r7, #3]
 8006814:	4619      	mov	r1, r3
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f007 ffca 	bl	800e7b0 <HAL_HCD_HC_NotifyURBChange_Callback>
 800681c:	e0ef      	b.n	80069fe <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	78fa      	ldrb	r2, [r7, #3]
 8006824:	4611      	mov	r1, r2
 8006826:	4618      	mov	r0, r3
 8006828:	f004 f921 	bl	800aa6e <USB_ReadChInterrupts>
 800682c:	4603      	mov	r3, r0
 800682e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006832:	2b40      	cmp	r3, #64	@ 0x40
 8006834:	d12f      	bne.n	8006896 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8006836:	78fb      	ldrb	r3, [r7, #3]
 8006838:	015a      	lsls	r2, r3, #5
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	4413      	add	r3, r2
 800683e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006842:	461a      	mov	r2, r3
 8006844:	2340      	movs	r3, #64	@ 0x40
 8006846:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8006848:	78fa      	ldrb	r2, [r7, #3]
 800684a:	6879      	ldr	r1, [r7, #4]
 800684c:	4613      	mov	r3, r2
 800684e:	011b      	lsls	r3, r3, #4
 8006850:	1a9b      	subs	r3, r3, r2
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	440b      	add	r3, r1
 8006856:	334d      	adds	r3, #77	@ 0x4d
 8006858:	2205      	movs	r2, #5
 800685a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800685c:	78fa      	ldrb	r2, [r7, #3]
 800685e:	6879      	ldr	r1, [r7, #4]
 8006860:	4613      	mov	r3, r2
 8006862:	011b      	lsls	r3, r3, #4
 8006864:	1a9b      	subs	r3, r3, r2
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	440b      	add	r3, r1
 800686a:	331a      	adds	r3, #26
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d109      	bne.n	8006886 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8006872:	78fa      	ldrb	r2, [r7, #3]
 8006874:	6879      	ldr	r1, [r7, #4]
 8006876:	4613      	mov	r3, r2
 8006878:	011b      	lsls	r3, r3, #4
 800687a:	1a9b      	subs	r3, r3, r2
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	440b      	add	r3, r1
 8006880:	3344      	adds	r3, #68	@ 0x44
 8006882:	2200      	movs	r2, #0
 8006884:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	78fa      	ldrb	r2, [r7, #3]
 800688c:	4611      	mov	r1, r2
 800688e:	4618      	mov	r0, r3
 8006890:	f004 feb7 	bl	800b602 <USB_HC_Halt>
 8006894:	e0b3      	b.n	80069fe <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	78fa      	ldrb	r2, [r7, #3]
 800689c:	4611      	mov	r1, r2
 800689e:	4618      	mov	r0, r3
 80068a0:	f004 f8e5 	bl	800aa6e <USB_ReadChInterrupts>
 80068a4:	4603      	mov	r3, r0
 80068a6:	f003 0310 	and.w	r3, r3, #16
 80068aa:	2b10      	cmp	r3, #16
 80068ac:	f040 80a7 	bne.w	80069fe <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80068b0:	78fa      	ldrb	r2, [r7, #3]
 80068b2:	6879      	ldr	r1, [r7, #4]
 80068b4:	4613      	mov	r3, r2
 80068b6:	011b      	lsls	r3, r3, #4
 80068b8:	1a9b      	subs	r3, r3, r2
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	440b      	add	r3, r1
 80068be:	3326      	adds	r3, #38	@ 0x26
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	2b03      	cmp	r3, #3
 80068c4:	d11b      	bne.n	80068fe <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80068c6:	78fa      	ldrb	r2, [r7, #3]
 80068c8:	6879      	ldr	r1, [r7, #4]
 80068ca:	4613      	mov	r3, r2
 80068cc:	011b      	lsls	r3, r3, #4
 80068ce:	1a9b      	subs	r3, r3, r2
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	440b      	add	r3, r1
 80068d4:	3344      	adds	r3, #68	@ 0x44
 80068d6:	2200      	movs	r2, #0
 80068d8:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80068da:	78fa      	ldrb	r2, [r7, #3]
 80068dc:	6879      	ldr	r1, [r7, #4]
 80068de:	4613      	mov	r3, r2
 80068e0:	011b      	lsls	r3, r3, #4
 80068e2:	1a9b      	subs	r3, r3, r2
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	440b      	add	r3, r1
 80068e8:	334d      	adds	r3, #77	@ 0x4d
 80068ea:	2204      	movs	r2, #4
 80068ec:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	78fa      	ldrb	r2, [r7, #3]
 80068f4:	4611      	mov	r1, r2
 80068f6:	4618      	mov	r0, r3
 80068f8:	f004 fe83 	bl	800b602 <USB_HC_Halt>
 80068fc:	e03f      	b.n	800697e <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80068fe:	78fa      	ldrb	r2, [r7, #3]
 8006900:	6879      	ldr	r1, [r7, #4]
 8006902:	4613      	mov	r3, r2
 8006904:	011b      	lsls	r3, r3, #4
 8006906:	1a9b      	subs	r3, r3, r2
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	440b      	add	r3, r1
 800690c:	3326      	adds	r3, #38	@ 0x26
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d00a      	beq.n	800692a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006914:	78fa      	ldrb	r2, [r7, #3]
 8006916:	6879      	ldr	r1, [r7, #4]
 8006918:	4613      	mov	r3, r2
 800691a:	011b      	lsls	r3, r3, #4
 800691c:	1a9b      	subs	r3, r3, r2
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	440b      	add	r3, r1
 8006922:	3326      	adds	r3, #38	@ 0x26
 8006924:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006926:	2b02      	cmp	r3, #2
 8006928:	d129      	bne.n	800697e <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800692a:	78fa      	ldrb	r2, [r7, #3]
 800692c:	6879      	ldr	r1, [r7, #4]
 800692e:	4613      	mov	r3, r2
 8006930:	011b      	lsls	r3, r3, #4
 8006932:	1a9b      	subs	r3, r3, r2
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	440b      	add	r3, r1
 8006938:	3344      	adds	r3, #68	@ 0x44
 800693a:	2200      	movs	r2, #0
 800693c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	799b      	ldrb	r3, [r3, #6]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d00a      	beq.n	800695c <HCD_HC_IN_IRQHandler+0xc2a>
 8006946:	78fa      	ldrb	r2, [r7, #3]
 8006948:	6879      	ldr	r1, [r7, #4]
 800694a:	4613      	mov	r3, r2
 800694c:	011b      	lsls	r3, r3, #4
 800694e:	1a9b      	subs	r3, r3, r2
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	440b      	add	r3, r1
 8006954:	331b      	adds	r3, #27
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	2b01      	cmp	r3, #1
 800695a:	d110      	bne.n	800697e <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800695c:	78fa      	ldrb	r2, [r7, #3]
 800695e:	6879      	ldr	r1, [r7, #4]
 8006960:	4613      	mov	r3, r2
 8006962:	011b      	lsls	r3, r3, #4
 8006964:	1a9b      	subs	r3, r3, r2
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	440b      	add	r3, r1
 800696a:	334d      	adds	r3, #77	@ 0x4d
 800696c:	2204      	movs	r2, #4
 800696e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	78fa      	ldrb	r2, [r7, #3]
 8006976:	4611      	mov	r1, r2
 8006978:	4618      	mov	r0, r3
 800697a:	f004 fe42 	bl	800b602 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800697e:	78fa      	ldrb	r2, [r7, #3]
 8006980:	6879      	ldr	r1, [r7, #4]
 8006982:	4613      	mov	r3, r2
 8006984:	011b      	lsls	r3, r3, #4
 8006986:	1a9b      	subs	r3, r3, r2
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	440b      	add	r3, r1
 800698c:	331b      	adds	r3, #27
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	2b01      	cmp	r3, #1
 8006992:	d129      	bne.n	80069e8 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8006994:	78fa      	ldrb	r2, [r7, #3]
 8006996:	6879      	ldr	r1, [r7, #4]
 8006998:	4613      	mov	r3, r2
 800699a:	011b      	lsls	r3, r3, #4
 800699c:	1a9b      	subs	r3, r3, r2
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	440b      	add	r3, r1
 80069a2:	331b      	adds	r3, #27
 80069a4:	2200      	movs	r2, #0
 80069a6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80069a8:	78fb      	ldrb	r3, [r7, #3]
 80069aa:	015a      	lsls	r2, r3, #5
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	4413      	add	r3, r2
 80069b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	78fa      	ldrb	r2, [r7, #3]
 80069b8:	0151      	lsls	r1, r2, #5
 80069ba:	693a      	ldr	r2, [r7, #16]
 80069bc:	440a      	add	r2, r1
 80069be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80069c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069c6:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80069c8:	78fb      	ldrb	r3, [r7, #3]
 80069ca:	015a      	lsls	r2, r3, #5
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	4413      	add	r3, r2
 80069d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	78fa      	ldrb	r2, [r7, #3]
 80069d8:	0151      	lsls	r1, r2, #5
 80069da:	693a      	ldr	r2, [r7, #16]
 80069dc:	440a      	add	r2, r1
 80069de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80069e2:	f043 0320 	orr.w	r3, r3, #32
 80069e6:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80069e8:	78fb      	ldrb	r3, [r7, #3]
 80069ea:	015a      	lsls	r2, r3, #5
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	4413      	add	r3, r2
 80069f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069f4:	461a      	mov	r2, r3
 80069f6:	2310      	movs	r3, #16
 80069f8:	6093      	str	r3, [r2, #8]
 80069fa:	e000      	b.n	80069fe <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80069fc:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80069fe:	3718      	adds	r7, #24
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b086      	sub	sp, #24
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	78fa      	ldrb	r2, [r7, #3]
 8006a20:	4611      	mov	r1, r2
 8006a22:	4618      	mov	r0, r3
 8006a24:	f004 f823 	bl	800aa6e <USB_ReadChInterrupts>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	f003 0304 	and.w	r3, r3, #4
 8006a2e:	2b04      	cmp	r3, #4
 8006a30:	d11b      	bne.n	8006a6a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8006a32:	78fb      	ldrb	r3, [r7, #3]
 8006a34:	015a      	lsls	r2, r3, #5
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	4413      	add	r3, r2
 8006a3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a3e:	461a      	mov	r2, r3
 8006a40:	2304      	movs	r3, #4
 8006a42:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8006a44:	78fa      	ldrb	r2, [r7, #3]
 8006a46:	6879      	ldr	r1, [r7, #4]
 8006a48:	4613      	mov	r3, r2
 8006a4a:	011b      	lsls	r3, r3, #4
 8006a4c:	1a9b      	subs	r3, r3, r2
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	440b      	add	r3, r1
 8006a52:	334d      	adds	r3, #77	@ 0x4d
 8006a54:	2207      	movs	r2, #7
 8006a56:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	78fa      	ldrb	r2, [r7, #3]
 8006a5e:	4611      	mov	r1, r2
 8006a60:	4618      	mov	r0, r3
 8006a62:	f004 fdce 	bl	800b602 <USB_HC_Halt>
 8006a66:	f000 bc6f 	b.w	8007348 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	78fa      	ldrb	r2, [r7, #3]
 8006a70:	4611      	mov	r1, r2
 8006a72:	4618      	mov	r0, r3
 8006a74:	f003 fffb 	bl	800aa6e <USB_ReadChInterrupts>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	f003 0320 	and.w	r3, r3, #32
 8006a7e:	2b20      	cmp	r3, #32
 8006a80:	f040 8082 	bne.w	8006b88 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8006a84:	78fb      	ldrb	r3, [r7, #3]
 8006a86:	015a      	lsls	r2, r3, #5
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	4413      	add	r3, r2
 8006a8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a90:	461a      	mov	r2, r3
 8006a92:	2320      	movs	r3, #32
 8006a94:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8006a96:	78fa      	ldrb	r2, [r7, #3]
 8006a98:	6879      	ldr	r1, [r7, #4]
 8006a9a:	4613      	mov	r3, r2
 8006a9c:	011b      	lsls	r3, r3, #4
 8006a9e:	1a9b      	subs	r3, r3, r2
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	440b      	add	r3, r1
 8006aa4:	3319      	adds	r3, #25
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d124      	bne.n	8006af6 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8006aac:	78fa      	ldrb	r2, [r7, #3]
 8006aae:	6879      	ldr	r1, [r7, #4]
 8006ab0:	4613      	mov	r3, r2
 8006ab2:	011b      	lsls	r3, r3, #4
 8006ab4:	1a9b      	subs	r3, r3, r2
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	440b      	add	r3, r1
 8006aba:	3319      	adds	r3, #25
 8006abc:	2200      	movs	r2, #0
 8006abe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006ac0:	78fa      	ldrb	r2, [r7, #3]
 8006ac2:	6879      	ldr	r1, [r7, #4]
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	011b      	lsls	r3, r3, #4
 8006ac8:	1a9b      	subs	r3, r3, r2
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	440b      	add	r3, r1
 8006ace:	334c      	adds	r3, #76	@ 0x4c
 8006ad0:	2202      	movs	r2, #2
 8006ad2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8006ad4:	78fa      	ldrb	r2, [r7, #3]
 8006ad6:	6879      	ldr	r1, [r7, #4]
 8006ad8:	4613      	mov	r3, r2
 8006ada:	011b      	lsls	r3, r3, #4
 8006adc:	1a9b      	subs	r3, r3, r2
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	440b      	add	r3, r1
 8006ae2:	334d      	adds	r3, #77	@ 0x4d
 8006ae4:	2203      	movs	r2, #3
 8006ae6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	78fa      	ldrb	r2, [r7, #3]
 8006aee:	4611      	mov	r1, r2
 8006af0:	4618      	mov	r0, r3
 8006af2:	f004 fd86 	bl	800b602 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8006af6:	78fa      	ldrb	r2, [r7, #3]
 8006af8:	6879      	ldr	r1, [r7, #4]
 8006afa:	4613      	mov	r3, r2
 8006afc:	011b      	lsls	r3, r3, #4
 8006afe:	1a9b      	subs	r3, r3, r2
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	440b      	add	r3, r1
 8006b04:	331a      	adds	r3, #26
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	f040 841d 	bne.w	8007348 <HCD_HC_OUT_IRQHandler+0x944>
 8006b0e:	78fa      	ldrb	r2, [r7, #3]
 8006b10:	6879      	ldr	r1, [r7, #4]
 8006b12:	4613      	mov	r3, r2
 8006b14:	011b      	lsls	r3, r3, #4
 8006b16:	1a9b      	subs	r3, r3, r2
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	440b      	add	r3, r1
 8006b1c:	331b      	adds	r3, #27
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	f040 8411 	bne.w	8007348 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8006b26:	78fa      	ldrb	r2, [r7, #3]
 8006b28:	6879      	ldr	r1, [r7, #4]
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	011b      	lsls	r3, r3, #4
 8006b2e:	1a9b      	subs	r3, r3, r2
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	440b      	add	r3, r1
 8006b34:	3326      	adds	r3, #38	@ 0x26
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d009      	beq.n	8006b50 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8006b3c:	78fa      	ldrb	r2, [r7, #3]
 8006b3e:	6879      	ldr	r1, [r7, #4]
 8006b40:	4613      	mov	r3, r2
 8006b42:	011b      	lsls	r3, r3, #4
 8006b44:	1a9b      	subs	r3, r3, r2
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	440b      	add	r3, r1
 8006b4a:	331b      	adds	r3, #27
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8006b50:	78fa      	ldrb	r2, [r7, #3]
 8006b52:	6879      	ldr	r1, [r7, #4]
 8006b54:	4613      	mov	r3, r2
 8006b56:	011b      	lsls	r3, r3, #4
 8006b58:	1a9b      	subs	r3, r3, r2
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	440b      	add	r3, r1
 8006b5e:	334d      	adds	r3, #77	@ 0x4d
 8006b60:	2203      	movs	r2, #3
 8006b62:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	78fa      	ldrb	r2, [r7, #3]
 8006b6a:	4611      	mov	r1, r2
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f004 fd48 	bl	800b602 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8006b72:	78fa      	ldrb	r2, [r7, #3]
 8006b74:	6879      	ldr	r1, [r7, #4]
 8006b76:	4613      	mov	r3, r2
 8006b78:	011b      	lsls	r3, r3, #4
 8006b7a:	1a9b      	subs	r3, r3, r2
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	440b      	add	r3, r1
 8006b80:	3344      	adds	r3, #68	@ 0x44
 8006b82:	2200      	movs	r2, #0
 8006b84:	601a      	str	r2, [r3, #0]
 8006b86:	e3df      	b.n	8007348 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	78fa      	ldrb	r2, [r7, #3]
 8006b8e:	4611      	mov	r1, r2
 8006b90:	4618      	mov	r0, r3
 8006b92:	f003 ff6c 	bl	800aa6e <USB_ReadChInterrupts>
 8006b96:	4603      	mov	r3, r0
 8006b98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ba0:	d111      	bne.n	8006bc6 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8006ba2:	78fb      	ldrb	r3, [r7, #3]
 8006ba4:	015a      	lsls	r2, r3, #5
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	4413      	add	r3, r2
 8006baa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bae:	461a      	mov	r2, r3
 8006bb0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006bb4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	78fa      	ldrb	r2, [r7, #3]
 8006bbc:	4611      	mov	r1, r2
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f004 fd1f 	bl	800b602 <USB_HC_Halt>
 8006bc4:	e3c0      	b.n	8007348 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	78fa      	ldrb	r2, [r7, #3]
 8006bcc:	4611      	mov	r1, r2
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f003 ff4d 	bl	800aa6e <USB_ReadChInterrupts>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	f003 0301 	and.w	r3, r3, #1
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d168      	bne.n	8006cb0 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8006bde:	78fa      	ldrb	r2, [r7, #3]
 8006be0:	6879      	ldr	r1, [r7, #4]
 8006be2:	4613      	mov	r3, r2
 8006be4:	011b      	lsls	r3, r3, #4
 8006be6:	1a9b      	subs	r3, r3, r2
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	440b      	add	r3, r1
 8006bec:	3344      	adds	r3, #68	@ 0x44
 8006bee:	2200      	movs	r2, #0
 8006bf0:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	78fa      	ldrb	r2, [r7, #3]
 8006bf8:	4611      	mov	r1, r2
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f003 ff37 	bl	800aa6e <USB_ReadChInterrupts>
 8006c00:	4603      	mov	r3, r0
 8006c02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c06:	2b40      	cmp	r3, #64	@ 0x40
 8006c08:	d112      	bne.n	8006c30 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8006c0a:	78fa      	ldrb	r2, [r7, #3]
 8006c0c:	6879      	ldr	r1, [r7, #4]
 8006c0e:	4613      	mov	r3, r2
 8006c10:	011b      	lsls	r3, r3, #4
 8006c12:	1a9b      	subs	r3, r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	440b      	add	r3, r1
 8006c18:	3319      	adds	r3, #25
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8006c1e:	78fb      	ldrb	r3, [r7, #3]
 8006c20:	015a      	lsls	r2, r3, #5
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	4413      	add	r3, r2
 8006c26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	2340      	movs	r3, #64	@ 0x40
 8006c2e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8006c30:	78fa      	ldrb	r2, [r7, #3]
 8006c32:	6879      	ldr	r1, [r7, #4]
 8006c34:	4613      	mov	r3, r2
 8006c36:	011b      	lsls	r3, r3, #4
 8006c38:	1a9b      	subs	r3, r3, r2
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	440b      	add	r3, r1
 8006c3e:	331b      	adds	r3, #27
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d019      	beq.n	8006c7a <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8006c46:	78fa      	ldrb	r2, [r7, #3]
 8006c48:	6879      	ldr	r1, [r7, #4]
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	011b      	lsls	r3, r3, #4
 8006c4e:	1a9b      	subs	r3, r3, r2
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	440b      	add	r3, r1
 8006c54:	331b      	adds	r3, #27
 8006c56:	2200      	movs	r2, #0
 8006c58:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006c5a:	78fb      	ldrb	r3, [r7, #3]
 8006c5c:	015a      	lsls	r2, r3, #5
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	4413      	add	r3, r2
 8006c62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	78fa      	ldrb	r2, [r7, #3]
 8006c6a:	0151      	lsls	r1, r2, #5
 8006c6c:	693a      	ldr	r2, [r7, #16]
 8006c6e:	440a      	add	r2, r1
 8006c70:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c78:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8006c7a:	78fb      	ldrb	r3, [r7, #3]
 8006c7c:	015a      	lsls	r2, r3, #5
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	4413      	add	r3, r2
 8006c82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c86:	461a      	mov	r2, r3
 8006c88:	2301      	movs	r3, #1
 8006c8a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8006c8c:	78fa      	ldrb	r2, [r7, #3]
 8006c8e:	6879      	ldr	r1, [r7, #4]
 8006c90:	4613      	mov	r3, r2
 8006c92:	011b      	lsls	r3, r3, #4
 8006c94:	1a9b      	subs	r3, r3, r2
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	440b      	add	r3, r1
 8006c9a:	334d      	adds	r3, #77	@ 0x4d
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	78fa      	ldrb	r2, [r7, #3]
 8006ca6:	4611      	mov	r1, r2
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f004 fcaa 	bl	800b602 <USB_HC_Halt>
 8006cae:	e34b      	b.n	8007348 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	78fa      	ldrb	r2, [r7, #3]
 8006cb6:	4611      	mov	r1, r2
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f003 fed8 	bl	800aa6e <USB_ReadChInterrupts>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cc4:	2b40      	cmp	r3, #64	@ 0x40
 8006cc6:	d139      	bne.n	8006d3c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8006cc8:	78fa      	ldrb	r2, [r7, #3]
 8006cca:	6879      	ldr	r1, [r7, #4]
 8006ccc:	4613      	mov	r3, r2
 8006cce:	011b      	lsls	r3, r3, #4
 8006cd0:	1a9b      	subs	r3, r3, r2
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	440b      	add	r3, r1
 8006cd6:	334d      	adds	r3, #77	@ 0x4d
 8006cd8:	2205      	movs	r2, #5
 8006cda:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8006cdc:	78fa      	ldrb	r2, [r7, #3]
 8006cde:	6879      	ldr	r1, [r7, #4]
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	011b      	lsls	r3, r3, #4
 8006ce4:	1a9b      	subs	r3, r3, r2
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	440b      	add	r3, r1
 8006cea:	331a      	adds	r3, #26
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d109      	bne.n	8006d06 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8006cf2:	78fa      	ldrb	r2, [r7, #3]
 8006cf4:	6879      	ldr	r1, [r7, #4]
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	011b      	lsls	r3, r3, #4
 8006cfa:	1a9b      	subs	r3, r3, r2
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	440b      	add	r3, r1
 8006d00:	3319      	adds	r3, #25
 8006d02:	2201      	movs	r2, #1
 8006d04:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8006d06:	78fa      	ldrb	r2, [r7, #3]
 8006d08:	6879      	ldr	r1, [r7, #4]
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	011b      	lsls	r3, r3, #4
 8006d0e:	1a9b      	subs	r3, r3, r2
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	440b      	add	r3, r1
 8006d14:	3344      	adds	r3, #68	@ 0x44
 8006d16:	2200      	movs	r2, #0
 8006d18:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	78fa      	ldrb	r2, [r7, #3]
 8006d20:	4611      	mov	r1, r2
 8006d22:	4618      	mov	r0, r3
 8006d24:	f004 fc6d 	bl	800b602 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8006d28:	78fb      	ldrb	r3, [r7, #3]
 8006d2a:	015a      	lsls	r2, r3, #5
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	4413      	add	r3, r2
 8006d30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d34:	461a      	mov	r2, r3
 8006d36:	2340      	movs	r3, #64	@ 0x40
 8006d38:	6093      	str	r3, [r2, #8]
 8006d3a:	e305      	b.n	8007348 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	78fa      	ldrb	r2, [r7, #3]
 8006d42:	4611      	mov	r1, r2
 8006d44:	4618      	mov	r0, r3
 8006d46:	f003 fe92 	bl	800aa6e <USB_ReadChInterrupts>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	f003 0308 	and.w	r3, r3, #8
 8006d50:	2b08      	cmp	r3, #8
 8006d52:	d11a      	bne.n	8006d8a <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8006d54:	78fb      	ldrb	r3, [r7, #3]
 8006d56:	015a      	lsls	r2, r3, #5
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	4413      	add	r3, r2
 8006d5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d60:	461a      	mov	r2, r3
 8006d62:	2308      	movs	r3, #8
 8006d64:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8006d66:	78fa      	ldrb	r2, [r7, #3]
 8006d68:	6879      	ldr	r1, [r7, #4]
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	011b      	lsls	r3, r3, #4
 8006d6e:	1a9b      	subs	r3, r3, r2
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	440b      	add	r3, r1
 8006d74:	334d      	adds	r3, #77	@ 0x4d
 8006d76:	2206      	movs	r2, #6
 8006d78:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	78fa      	ldrb	r2, [r7, #3]
 8006d80:	4611      	mov	r1, r2
 8006d82:	4618      	mov	r0, r3
 8006d84:	f004 fc3d 	bl	800b602 <USB_HC_Halt>
 8006d88:	e2de      	b.n	8007348 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	78fa      	ldrb	r2, [r7, #3]
 8006d90:	4611      	mov	r1, r2
 8006d92:	4618      	mov	r0, r3
 8006d94:	f003 fe6b 	bl	800aa6e <USB_ReadChInterrupts>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	f003 0310 	and.w	r3, r3, #16
 8006d9e:	2b10      	cmp	r3, #16
 8006da0:	d144      	bne.n	8006e2c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8006da2:	78fa      	ldrb	r2, [r7, #3]
 8006da4:	6879      	ldr	r1, [r7, #4]
 8006da6:	4613      	mov	r3, r2
 8006da8:	011b      	lsls	r3, r3, #4
 8006daa:	1a9b      	subs	r3, r3, r2
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	440b      	add	r3, r1
 8006db0:	3344      	adds	r3, #68	@ 0x44
 8006db2:	2200      	movs	r2, #0
 8006db4:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8006db6:	78fa      	ldrb	r2, [r7, #3]
 8006db8:	6879      	ldr	r1, [r7, #4]
 8006dba:	4613      	mov	r3, r2
 8006dbc:	011b      	lsls	r3, r3, #4
 8006dbe:	1a9b      	subs	r3, r3, r2
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	440b      	add	r3, r1
 8006dc4:	334d      	adds	r3, #77	@ 0x4d
 8006dc6:	2204      	movs	r2, #4
 8006dc8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8006dca:	78fa      	ldrb	r2, [r7, #3]
 8006dcc:	6879      	ldr	r1, [r7, #4]
 8006dce:	4613      	mov	r3, r2
 8006dd0:	011b      	lsls	r3, r3, #4
 8006dd2:	1a9b      	subs	r3, r3, r2
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	440b      	add	r3, r1
 8006dd8:	3319      	adds	r3, #25
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d114      	bne.n	8006e0a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8006de0:	78fa      	ldrb	r2, [r7, #3]
 8006de2:	6879      	ldr	r1, [r7, #4]
 8006de4:	4613      	mov	r3, r2
 8006de6:	011b      	lsls	r3, r3, #4
 8006de8:	1a9b      	subs	r3, r3, r2
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	440b      	add	r3, r1
 8006dee:	3318      	adds	r3, #24
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d109      	bne.n	8006e0a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8006df6:	78fa      	ldrb	r2, [r7, #3]
 8006df8:	6879      	ldr	r1, [r7, #4]
 8006dfa:	4613      	mov	r3, r2
 8006dfc:	011b      	lsls	r3, r3, #4
 8006dfe:	1a9b      	subs	r3, r3, r2
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	440b      	add	r3, r1
 8006e04:	3319      	adds	r3, #25
 8006e06:	2201      	movs	r2, #1
 8006e08:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	78fa      	ldrb	r2, [r7, #3]
 8006e10:	4611      	mov	r1, r2
 8006e12:	4618      	mov	r0, r3
 8006e14:	f004 fbf5 	bl	800b602 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8006e18:	78fb      	ldrb	r3, [r7, #3]
 8006e1a:	015a      	lsls	r2, r3, #5
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	4413      	add	r3, r2
 8006e20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e24:	461a      	mov	r2, r3
 8006e26:	2310      	movs	r3, #16
 8006e28:	6093      	str	r3, [r2, #8]
 8006e2a:	e28d      	b.n	8007348 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	78fa      	ldrb	r2, [r7, #3]
 8006e32:	4611      	mov	r1, r2
 8006e34:	4618      	mov	r0, r3
 8006e36:	f003 fe1a 	bl	800aa6e <USB_ReadChInterrupts>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e40:	2b80      	cmp	r3, #128	@ 0x80
 8006e42:	d169      	bne.n	8006f18 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	799b      	ldrb	r3, [r3, #6]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d111      	bne.n	8006e70 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8006e4c:	78fa      	ldrb	r2, [r7, #3]
 8006e4e:	6879      	ldr	r1, [r7, #4]
 8006e50:	4613      	mov	r3, r2
 8006e52:	011b      	lsls	r3, r3, #4
 8006e54:	1a9b      	subs	r3, r3, r2
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	440b      	add	r3, r1
 8006e5a:	334d      	adds	r3, #77	@ 0x4d
 8006e5c:	2207      	movs	r2, #7
 8006e5e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	78fa      	ldrb	r2, [r7, #3]
 8006e66:	4611      	mov	r1, r2
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f004 fbca 	bl	800b602 <USB_HC_Halt>
 8006e6e:	e049      	b.n	8006f04 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8006e70:	78fa      	ldrb	r2, [r7, #3]
 8006e72:	6879      	ldr	r1, [r7, #4]
 8006e74:	4613      	mov	r3, r2
 8006e76:	011b      	lsls	r3, r3, #4
 8006e78:	1a9b      	subs	r3, r3, r2
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	440b      	add	r3, r1
 8006e7e:	3344      	adds	r3, #68	@ 0x44
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	1c59      	adds	r1, r3, #1
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	4613      	mov	r3, r2
 8006e88:	011b      	lsls	r3, r3, #4
 8006e8a:	1a9b      	subs	r3, r3, r2
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	4403      	add	r3, r0
 8006e90:	3344      	adds	r3, #68	@ 0x44
 8006e92:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006e94:	78fa      	ldrb	r2, [r7, #3]
 8006e96:	6879      	ldr	r1, [r7, #4]
 8006e98:	4613      	mov	r3, r2
 8006e9a:	011b      	lsls	r3, r3, #4
 8006e9c:	1a9b      	subs	r3, r3, r2
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	440b      	add	r3, r1
 8006ea2:	3344      	adds	r3, #68	@ 0x44
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d922      	bls.n	8006ef0 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8006eaa:	78fa      	ldrb	r2, [r7, #3]
 8006eac:	6879      	ldr	r1, [r7, #4]
 8006eae:	4613      	mov	r3, r2
 8006eb0:	011b      	lsls	r3, r3, #4
 8006eb2:	1a9b      	subs	r3, r3, r2
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	440b      	add	r3, r1
 8006eb8:	3344      	adds	r3, #68	@ 0x44
 8006eba:	2200      	movs	r2, #0
 8006ebc:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006ebe:	78fa      	ldrb	r2, [r7, #3]
 8006ec0:	6879      	ldr	r1, [r7, #4]
 8006ec2:	4613      	mov	r3, r2
 8006ec4:	011b      	lsls	r3, r3, #4
 8006ec6:	1a9b      	subs	r3, r3, r2
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	440b      	add	r3, r1
 8006ecc:	334c      	adds	r3, #76	@ 0x4c
 8006ece:	2204      	movs	r2, #4
 8006ed0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006ed2:	78fa      	ldrb	r2, [r7, #3]
 8006ed4:	6879      	ldr	r1, [r7, #4]
 8006ed6:	4613      	mov	r3, r2
 8006ed8:	011b      	lsls	r3, r3, #4
 8006eda:	1a9b      	subs	r3, r3, r2
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	440b      	add	r3, r1
 8006ee0:	334c      	adds	r3, #76	@ 0x4c
 8006ee2:	781a      	ldrb	r2, [r3, #0]
 8006ee4:	78fb      	ldrb	r3, [r7, #3]
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f007 fc61 	bl	800e7b0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006eee:	e009      	b.n	8006f04 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006ef0:	78fa      	ldrb	r2, [r7, #3]
 8006ef2:	6879      	ldr	r1, [r7, #4]
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	011b      	lsls	r3, r3, #4
 8006ef8:	1a9b      	subs	r3, r3, r2
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	440b      	add	r3, r1
 8006efe:	334c      	adds	r3, #76	@ 0x4c
 8006f00:	2202      	movs	r2, #2
 8006f02:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8006f04:	78fb      	ldrb	r3, [r7, #3]
 8006f06:	015a      	lsls	r2, r3, #5
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f10:	461a      	mov	r2, r3
 8006f12:	2380      	movs	r3, #128	@ 0x80
 8006f14:	6093      	str	r3, [r2, #8]
 8006f16:	e217      	b.n	8007348 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	78fa      	ldrb	r2, [r7, #3]
 8006f1e:	4611      	mov	r1, r2
 8006f20:	4618      	mov	r0, r3
 8006f22:	f003 fda4 	bl	800aa6e <USB_ReadChInterrupts>
 8006f26:	4603      	mov	r3, r0
 8006f28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f30:	d11b      	bne.n	8006f6a <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8006f32:	78fa      	ldrb	r2, [r7, #3]
 8006f34:	6879      	ldr	r1, [r7, #4]
 8006f36:	4613      	mov	r3, r2
 8006f38:	011b      	lsls	r3, r3, #4
 8006f3a:	1a9b      	subs	r3, r3, r2
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	440b      	add	r3, r1
 8006f40:	334d      	adds	r3, #77	@ 0x4d
 8006f42:	2209      	movs	r2, #9
 8006f44:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	78fa      	ldrb	r2, [r7, #3]
 8006f4c:	4611      	mov	r1, r2
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f004 fb57 	bl	800b602 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8006f54:	78fb      	ldrb	r3, [r7, #3]
 8006f56:	015a      	lsls	r2, r3, #5
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f60:	461a      	mov	r2, r3
 8006f62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006f66:	6093      	str	r3, [r2, #8]
 8006f68:	e1ee      	b.n	8007348 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	78fa      	ldrb	r2, [r7, #3]
 8006f70:	4611      	mov	r1, r2
 8006f72:	4618      	mov	r0, r3
 8006f74:	f003 fd7b 	bl	800aa6e <USB_ReadChInterrupts>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	f003 0302 	and.w	r3, r3, #2
 8006f7e:	2b02      	cmp	r3, #2
 8006f80:	f040 81df 	bne.w	8007342 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8006f84:	78fb      	ldrb	r3, [r7, #3]
 8006f86:	015a      	lsls	r2, r3, #5
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f90:	461a      	mov	r2, r3
 8006f92:	2302      	movs	r3, #2
 8006f94:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8006f96:	78fa      	ldrb	r2, [r7, #3]
 8006f98:	6879      	ldr	r1, [r7, #4]
 8006f9a:	4613      	mov	r3, r2
 8006f9c:	011b      	lsls	r3, r3, #4
 8006f9e:	1a9b      	subs	r3, r3, r2
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	440b      	add	r3, r1
 8006fa4:	334d      	adds	r3, #77	@ 0x4d
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	f040 8093 	bne.w	80070d4 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006fae:	78fa      	ldrb	r2, [r7, #3]
 8006fb0:	6879      	ldr	r1, [r7, #4]
 8006fb2:	4613      	mov	r3, r2
 8006fb4:	011b      	lsls	r3, r3, #4
 8006fb6:	1a9b      	subs	r3, r3, r2
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	440b      	add	r3, r1
 8006fbc:	334d      	adds	r3, #77	@ 0x4d
 8006fbe:	2202      	movs	r2, #2
 8006fc0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8006fc2:	78fa      	ldrb	r2, [r7, #3]
 8006fc4:	6879      	ldr	r1, [r7, #4]
 8006fc6:	4613      	mov	r3, r2
 8006fc8:	011b      	lsls	r3, r3, #4
 8006fca:	1a9b      	subs	r3, r3, r2
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	440b      	add	r3, r1
 8006fd0:	334c      	adds	r3, #76	@ 0x4c
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8006fd6:	78fa      	ldrb	r2, [r7, #3]
 8006fd8:	6879      	ldr	r1, [r7, #4]
 8006fda:	4613      	mov	r3, r2
 8006fdc:	011b      	lsls	r3, r3, #4
 8006fde:	1a9b      	subs	r3, r3, r2
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	440b      	add	r3, r1
 8006fe4:	3326      	adds	r3, #38	@ 0x26
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	d00b      	beq.n	8007004 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8006fec:	78fa      	ldrb	r2, [r7, #3]
 8006fee:	6879      	ldr	r1, [r7, #4]
 8006ff0:	4613      	mov	r3, r2
 8006ff2:	011b      	lsls	r3, r3, #4
 8006ff4:	1a9b      	subs	r3, r3, r2
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	440b      	add	r3, r1
 8006ffa:	3326      	adds	r3, #38	@ 0x26
 8006ffc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8006ffe:	2b03      	cmp	r3, #3
 8007000:	f040 8190 	bne.w	8007324 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	799b      	ldrb	r3, [r3, #6]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d115      	bne.n	8007038 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800700c:	78fa      	ldrb	r2, [r7, #3]
 800700e:	6879      	ldr	r1, [r7, #4]
 8007010:	4613      	mov	r3, r2
 8007012:	011b      	lsls	r3, r3, #4
 8007014:	1a9b      	subs	r3, r3, r2
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	440b      	add	r3, r1
 800701a:	333d      	adds	r3, #61	@ 0x3d
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	78fa      	ldrb	r2, [r7, #3]
 8007020:	f083 0301 	eor.w	r3, r3, #1
 8007024:	b2d8      	uxtb	r0, r3
 8007026:	6879      	ldr	r1, [r7, #4]
 8007028:	4613      	mov	r3, r2
 800702a:	011b      	lsls	r3, r3, #4
 800702c:	1a9b      	subs	r3, r3, r2
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	440b      	add	r3, r1
 8007032:	333d      	adds	r3, #61	@ 0x3d
 8007034:	4602      	mov	r2, r0
 8007036:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	799b      	ldrb	r3, [r3, #6]
 800703c:	2b01      	cmp	r3, #1
 800703e:	f040 8171 	bne.w	8007324 <HCD_HC_OUT_IRQHandler+0x920>
 8007042:	78fa      	ldrb	r2, [r7, #3]
 8007044:	6879      	ldr	r1, [r7, #4]
 8007046:	4613      	mov	r3, r2
 8007048:	011b      	lsls	r3, r3, #4
 800704a:	1a9b      	subs	r3, r3, r2
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	440b      	add	r3, r1
 8007050:	3334      	adds	r3, #52	@ 0x34
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2b00      	cmp	r3, #0
 8007056:	f000 8165 	beq.w	8007324 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800705a:	78fa      	ldrb	r2, [r7, #3]
 800705c:	6879      	ldr	r1, [r7, #4]
 800705e:	4613      	mov	r3, r2
 8007060:	011b      	lsls	r3, r3, #4
 8007062:	1a9b      	subs	r3, r3, r2
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	440b      	add	r3, r1
 8007068:	3334      	adds	r3, #52	@ 0x34
 800706a:	6819      	ldr	r1, [r3, #0]
 800706c:	78fa      	ldrb	r2, [r7, #3]
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	4613      	mov	r3, r2
 8007072:	011b      	lsls	r3, r3, #4
 8007074:	1a9b      	subs	r3, r3, r2
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	4403      	add	r3, r0
 800707a:	3328      	adds	r3, #40	@ 0x28
 800707c:	881b      	ldrh	r3, [r3, #0]
 800707e:	440b      	add	r3, r1
 8007080:	1e59      	subs	r1, r3, #1
 8007082:	78fa      	ldrb	r2, [r7, #3]
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	4613      	mov	r3, r2
 8007088:	011b      	lsls	r3, r3, #4
 800708a:	1a9b      	subs	r3, r3, r2
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	4403      	add	r3, r0
 8007090:	3328      	adds	r3, #40	@ 0x28
 8007092:	881b      	ldrh	r3, [r3, #0]
 8007094:	fbb1 f3f3 	udiv	r3, r1, r3
 8007098:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	f003 0301 	and.w	r3, r3, #1
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	f000 813f 	beq.w	8007324 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80070a6:	78fa      	ldrb	r2, [r7, #3]
 80070a8:	6879      	ldr	r1, [r7, #4]
 80070aa:	4613      	mov	r3, r2
 80070ac:	011b      	lsls	r3, r3, #4
 80070ae:	1a9b      	subs	r3, r3, r2
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	440b      	add	r3, r1
 80070b4:	333d      	adds	r3, #61	@ 0x3d
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	78fa      	ldrb	r2, [r7, #3]
 80070ba:	f083 0301 	eor.w	r3, r3, #1
 80070be:	b2d8      	uxtb	r0, r3
 80070c0:	6879      	ldr	r1, [r7, #4]
 80070c2:	4613      	mov	r3, r2
 80070c4:	011b      	lsls	r3, r3, #4
 80070c6:	1a9b      	subs	r3, r3, r2
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	440b      	add	r3, r1
 80070cc:	333d      	adds	r3, #61	@ 0x3d
 80070ce:	4602      	mov	r2, r0
 80070d0:	701a      	strb	r2, [r3, #0]
 80070d2:	e127      	b.n	8007324 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80070d4:	78fa      	ldrb	r2, [r7, #3]
 80070d6:	6879      	ldr	r1, [r7, #4]
 80070d8:	4613      	mov	r3, r2
 80070da:	011b      	lsls	r3, r3, #4
 80070dc:	1a9b      	subs	r3, r3, r2
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	440b      	add	r3, r1
 80070e2:	334d      	adds	r3, #77	@ 0x4d
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	2b03      	cmp	r3, #3
 80070e8:	d120      	bne.n	800712c <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80070ea:	78fa      	ldrb	r2, [r7, #3]
 80070ec:	6879      	ldr	r1, [r7, #4]
 80070ee:	4613      	mov	r3, r2
 80070f0:	011b      	lsls	r3, r3, #4
 80070f2:	1a9b      	subs	r3, r3, r2
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	440b      	add	r3, r1
 80070f8:	334d      	adds	r3, #77	@ 0x4d
 80070fa:	2202      	movs	r2, #2
 80070fc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80070fe:	78fa      	ldrb	r2, [r7, #3]
 8007100:	6879      	ldr	r1, [r7, #4]
 8007102:	4613      	mov	r3, r2
 8007104:	011b      	lsls	r3, r3, #4
 8007106:	1a9b      	subs	r3, r3, r2
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	440b      	add	r3, r1
 800710c:	331b      	adds	r3, #27
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	2b01      	cmp	r3, #1
 8007112:	f040 8107 	bne.w	8007324 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007116:	78fa      	ldrb	r2, [r7, #3]
 8007118:	6879      	ldr	r1, [r7, #4]
 800711a:	4613      	mov	r3, r2
 800711c:	011b      	lsls	r3, r3, #4
 800711e:	1a9b      	subs	r3, r3, r2
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	440b      	add	r3, r1
 8007124:	334c      	adds	r3, #76	@ 0x4c
 8007126:	2202      	movs	r2, #2
 8007128:	701a      	strb	r2, [r3, #0]
 800712a:	e0fb      	b.n	8007324 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800712c:	78fa      	ldrb	r2, [r7, #3]
 800712e:	6879      	ldr	r1, [r7, #4]
 8007130:	4613      	mov	r3, r2
 8007132:	011b      	lsls	r3, r3, #4
 8007134:	1a9b      	subs	r3, r3, r2
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	440b      	add	r3, r1
 800713a:	334d      	adds	r3, #77	@ 0x4d
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	2b04      	cmp	r3, #4
 8007140:	d13a      	bne.n	80071b8 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007142:	78fa      	ldrb	r2, [r7, #3]
 8007144:	6879      	ldr	r1, [r7, #4]
 8007146:	4613      	mov	r3, r2
 8007148:	011b      	lsls	r3, r3, #4
 800714a:	1a9b      	subs	r3, r3, r2
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	440b      	add	r3, r1
 8007150:	334d      	adds	r3, #77	@ 0x4d
 8007152:	2202      	movs	r2, #2
 8007154:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007156:	78fa      	ldrb	r2, [r7, #3]
 8007158:	6879      	ldr	r1, [r7, #4]
 800715a:	4613      	mov	r3, r2
 800715c:	011b      	lsls	r3, r3, #4
 800715e:	1a9b      	subs	r3, r3, r2
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	440b      	add	r3, r1
 8007164:	334c      	adds	r3, #76	@ 0x4c
 8007166:	2202      	movs	r2, #2
 8007168:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800716a:	78fa      	ldrb	r2, [r7, #3]
 800716c:	6879      	ldr	r1, [r7, #4]
 800716e:	4613      	mov	r3, r2
 8007170:	011b      	lsls	r3, r3, #4
 8007172:	1a9b      	subs	r3, r3, r2
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	440b      	add	r3, r1
 8007178:	331b      	adds	r3, #27
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	2b01      	cmp	r3, #1
 800717e:	f040 80d1 	bne.w	8007324 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8007182:	78fa      	ldrb	r2, [r7, #3]
 8007184:	6879      	ldr	r1, [r7, #4]
 8007186:	4613      	mov	r3, r2
 8007188:	011b      	lsls	r3, r3, #4
 800718a:	1a9b      	subs	r3, r3, r2
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	440b      	add	r3, r1
 8007190:	331b      	adds	r3, #27
 8007192:	2200      	movs	r2, #0
 8007194:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8007196:	78fb      	ldrb	r3, [r7, #3]
 8007198:	015a      	lsls	r2, r3, #5
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	4413      	add	r3, r2
 800719e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	78fa      	ldrb	r2, [r7, #3]
 80071a6:	0151      	lsls	r1, r2, #5
 80071a8:	693a      	ldr	r2, [r7, #16]
 80071aa:	440a      	add	r2, r1
 80071ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80071b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80071b4:	6053      	str	r3, [r2, #4]
 80071b6:	e0b5      	b.n	8007324 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80071b8:	78fa      	ldrb	r2, [r7, #3]
 80071ba:	6879      	ldr	r1, [r7, #4]
 80071bc:	4613      	mov	r3, r2
 80071be:	011b      	lsls	r3, r3, #4
 80071c0:	1a9b      	subs	r3, r3, r2
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	440b      	add	r3, r1
 80071c6:	334d      	adds	r3, #77	@ 0x4d
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	2b05      	cmp	r3, #5
 80071cc:	d114      	bne.n	80071f8 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80071ce:	78fa      	ldrb	r2, [r7, #3]
 80071d0:	6879      	ldr	r1, [r7, #4]
 80071d2:	4613      	mov	r3, r2
 80071d4:	011b      	lsls	r3, r3, #4
 80071d6:	1a9b      	subs	r3, r3, r2
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	440b      	add	r3, r1
 80071dc:	334d      	adds	r3, #77	@ 0x4d
 80071de:	2202      	movs	r2, #2
 80071e0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80071e2:	78fa      	ldrb	r2, [r7, #3]
 80071e4:	6879      	ldr	r1, [r7, #4]
 80071e6:	4613      	mov	r3, r2
 80071e8:	011b      	lsls	r3, r3, #4
 80071ea:	1a9b      	subs	r3, r3, r2
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	440b      	add	r3, r1
 80071f0:	334c      	adds	r3, #76	@ 0x4c
 80071f2:	2202      	movs	r2, #2
 80071f4:	701a      	strb	r2, [r3, #0]
 80071f6:	e095      	b.n	8007324 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80071f8:	78fa      	ldrb	r2, [r7, #3]
 80071fa:	6879      	ldr	r1, [r7, #4]
 80071fc:	4613      	mov	r3, r2
 80071fe:	011b      	lsls	r3, r3, #4
 8007200:	1a9b      	subs	r3, r3, r2
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	440b      	add	r3, r1
 8007206:	334d      	adds	r3, #77	@ 0x4d
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	2b06      	cmp	r3, #6
 800720c:	d114      	bne.n	8007238 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800720e:	78fa      	ldrb	r2, [r7, #3]
 8007210:	6879      	ldr	r1, [r7, #4]
 8007212:	4613      	mov	r3, r2
 8007214:	011b      	lsls	r3, r3, #4
 8007216:	1a9b      	subs	r3, r3, r2
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	440b      	add	r3, r1
 800721c:	334d      	adds	r3, #77	@ 0x4d
 800721e:	2202      	movs	r2, #2
 8007220:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8007222:	78fa      	ldrb	r2, [r7, #3]
 8007224:	6879      	ldr	r1, [r7, #4]
 8007226:	4613      	mov	r3, r2
 8007228:	011b      	lsls	r3, r3, #4
 800722a:	1a9b      	subs	r3, r3, r2
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	440b      	add	r3, r1
 8007230:	334c      	adds	r3, #76	@ 0x4c
 8007232:	2205      	movs	r2, #5
 8007234:	701a      	strb	r2, [r3, #0]
 8007236:	e075      	b.n	8007324 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8007238:	78fa      	ldrb	r2, [r7, #3]
 800723a:	6879      	ldr	r1, [r7, #4]
 800723c:	4613      	mov	r3, r2
 800723e:	011b      	lsls	r3, r3, #4
 8007240:	1a9b      	subs	r3, r3, r2
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	440b      	add	r3, r1
 8007246:	334d      	adds	r3, #77	@ 0x4d
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	2b07      	cmp	r3, #7
 800724c:	d00a      	beq.n	8007264 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800724e:	78fa      	ldrb	r2, [r7, #3]
 8007250:	6879      	ldr	r1, [r7, #4]
 8007252:	4613      	mov	r3, r2
 8007254:	011b      	lsls	r3, r3, #4
 8007256:	1a9b      	subs	r3, r3, r2
 8007258:	009b      	lsls	r3, r3, #2
 800725a:	440b      	add	r3, r1
 800725c:	334d      	adds	r3, #77	@ 0x4d
 800725e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8007260:	2b09      	cmp	r3, #9
 8007262:	d170      	bne.n	8007346 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007264:	78fa      	ldrb	r2, [r7, #3]
 8007266:	6879      	ldr	r1, [r7, #4]
 8007268:	4613      	mov	r3, r2
 800726a:	011b      	lsls	r3, r3, #4
 800726c:	1a9b      	subs	r3, r3, r2
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	440b      	add	r3, r1
 8007272:	334d      	adds	r3, #77	@ 0x4d
 8007274:	2202      	movs	r2, #2
 8007276:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8007278:	78fa      	ldrb	r2, [r7, #3]
 800727a:	6879      	ldr	r1, [r7, #4]
 800727c:	4613      	mov	r3, r2
 800727e:	011b      	lsls	r3, r3, #4
 8007280:	1a9b      	subs	r3, r3, r2
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	440b      	add	r3, r1
 8007286:	3344      	adds	r3, #68	@ 0x44
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	1c59      	adds	r1, r3, #1
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	4613      	mov	r3, r2
 8007290:	011b      	lsls	r3, r3, #4
 8007292:	1a9b      	subs	r3, r3, r2
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	4403      	add	r3, r0
 8007298:	3344      	adds	r3, #68	@ 0x44
 800729a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800729c:	78fa      	ldrb	r2, [r7, #3]
 800729e:	6879      	ldr	r1, [r7, #4]
 80072a0:	4613      	mov	r3, r2
 80072a2:	011b      	lsls	r3, r3, #4
 80072a4:	1a9b      	subs	r3, r3, r2
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	440b      	add	r3, r1
 80072aa:	3344      	adds	r3, #68	@ 0x44
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	2b02      	cmp	r3, #2
 80072b0:	d914      	bls.n	80072dc <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80072b2:	78fa      	ldrb	r2, [r7, #3]
 80072b4:	6879      	ldr	r1, [r7, #4]
 80072b6:	4613      	mov	r3, r2
 80072b8:	011b      	lsls	r3, r3, #4
 80072ba:	1a9b      	subs	r3, r3, r2
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	440b      	add	r3, r1
 80072c0:	3344      	adds	r3, #68	@ 0x44
 80072c2:	2200      	movs	r2, #0
 80072c4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80072c6:	78fa      	ldrb	r2, [r7, #3]
 80072c8:	6879      	ldr	r1, [r7, #4]
 80072ca:	4613      	mov	r3, r2
 80072cc:	011b      	lsls	r3, r3, #4
 80072ce:	1a9b      	subs	r3, r3, r2
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	440b      	add	r3, r1
 80072d4:	334c      	adds	r3, #76	@ 0x4c
 80072d6:	2204      	movs	r2, #4
 80072d8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80072da:	e022      	b.n	8007322 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80072dc:	78fa      	ldrb	r2, [r7, #3]
 80072de:	6879      	ldr	r1, [r7, #4]
 80072e0:	4613      	mov	r3, r2
 80072e2:	011b      	lsls	r3, r3, #4
 80072e4:	1a9b      	subs	r3, r3, r2
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	440b      	add	r3, r1
 80072ea:	334c      	adds	r3, #76	@ 0x4c
 80072ec:	2202      	movs	r2, #2
 80072ee:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80072f0:	78fb      	ldrb	r3, [r7, #3]
 80072f2:	015a      	lsls	r2, r3, #5
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	4413      	add	r3, r2
 80072f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007306:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800730e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8007310:	78fb      	ldrb	r3, [r7, #3]
 8007312:	015a      	lsls	r2, r3, #5
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	4413      	add	r3, r2
 8007318:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800731c:	461a      	mov	r2, r3
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007322:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8007324:	78fa      	ldrb	r2, [r7, #3]
 8007326:	6879      	ldr	r1, [r7, #4]
 8007328:	4613      	mov	r3, r2
 800732a:	011b      	lsls	r3, r3, #4
 800732c:	1a9b      	subs	r3, r3, r2
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	440b      	add	r3, r1
 8007332:	334c      	adds	r3, #76	@ 0x4c
 8007334:	781a      	ldrb	r2, [r3, #0]
 8007336:	78fb      	ldrb	r3, [r7, #3]
 8007338:	4619      	mov	r1, r3
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f007 fa38 	bl	800e7b0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8007340:	e002      	b.n	8007348 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8007342:	bf00      	nop
 8007344:	e000      	b.n	8007348 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8007346:	bf00      	nop
  }
}
 8007348:	3718      	adds	r7, #24
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}

0800734e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800734e:	b580      	push	{r7, lr}
 8007350:	b08a      	sub	sp, #40	@ 0x28
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800735c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800735e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	6a1b      	ldr	r3, [r3, #32]
 8007366:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8007368:	69fb      	ldr	r3, [r7, #28]
 800736a:	f003 030f 	and.w	r3, r3, #15
 800736e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8007370:	69fb      	ldr	r3, [r7, #28]
 8007372:	0c5b      	lsrs	r3, r3, #17
 8007374:	f003 030f 	and.w	r3, r3, #15
 8007378:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	091b      	lsrs	r3, r3, #4
 800737e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007382:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	2b02      	cmp	r3, #2
 8007388:	d004      	beq.n	8007394 <HCD_RXQLVL_IRQHandler+0x46>
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	2b05      	cmp	r3, #5
 800738e:	f000 80b6 	beq.w	80074fe <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8007392:	e0b7      	b.n	8007504 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	2b00      	cmp	r3, #0
 8007398:	f000 80b3 	beq.w	8007502 <HCD_RXQLVL_IRQHandler+0x1b4>
 800739c:	6879      	ldr	r1, [r7, #4]
 800739e:	69ba      	ldr	r2, [r7, #24]
 80073a0:	4613      	mov	r3, r2
 80073a2:	011b      	lsls	r3, r3, #4
 80073a4:	1a9b      	subs	r3, r3, r2
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	440b      	add	r3, r1
 80073aa:	332c      	adds	r3, #44	@ 0x2c
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	f000 80a7 	beq.w	8007502 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80073b4:	6879      	ldr	r1, [r7, #4]
 80073b6:	69ba      	ldr	r2, [r7, #24]
 80073b8:	4613      	mov	r3, r2
 80073ba:	011b      	lsls	r3, r3, #4
 80073bc:	1a9b      	subs	r3, r3, r2
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	440b      	add	r3, r1
 80073c2:	3338      	adds	r3, #56	@ 0x38
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	18d1      	adds	r1, r2, r3
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	69ba      	ldr	r2, [r7, #24]
 80073ce:	4613      	mov	r3, r2
 80073d0:	011b      	lsls	r3, r3, #4
 80073d2:	1a9b      	subs	r3, r3, r2
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	4403      	add	r3, r0
 80073d8:	3334      	adds	r3, #52	@ 0x34
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4299      	cmp	r1, r3
 80073de:	f200 8083 	bhi.w	80074e8 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6818      	ldr	r0, [r3, #0]
 80073e6:	6879      	ldr	r1, [r7, #4]
 80073e8:	69ba      	ldr	r2, [r7, #24]
 80073ea:	4613      	mov	r3, r2
 80073ec:	011b      	lsls	r3, r3, #4
 80073ee:	1a9b      	subs	r3, r3, r2
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	440b      	add	r3, r1
 80073f4:	332c      	adds	r3, #44	@ 0x2c
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	693a      	ldr	r2, [r7, #16]
 80073fa:	b292      	uxth	r2, r2
 80073fc:	4619      	mov	r1, r3
 80073fe:	f003 facb 	bl	800a998 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8007402:	6879      	ldr	r1, [r7, #4]
 8007404:	69ba      	ldr	r2, [r7, #24]
 8007406:	4613      	mov	r3, r2
 8007408:	011b      	lsls	r3, r3, #4
 800740a:	1a9b      	subs	r3, r3, r2
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	440b      	add	r3, r1
 8007410:	332c      	adds	r3, #44	@ 0x2c
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	18d1      	adds	r1, r2, r3
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	69ba      	ldr	r2, [r7, #24]
 800741c:	4613      	mov	r3, r2
 800741e:	011b      	lsls	r3, r3, #4
 8007420:	1a9b      	subs	r3, r3, r2
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	4403      	add	r3, r0
 8007426:	332c      	adds	r3, #44	@ 0x2c
 8007428:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800742a:	6879      	ldr	r1, [r7, #4]
 800742c:	69ba      	ldr	r2, [r7, #24]
 800742e:	4613      	mov	r3, r2
 8007430:	011b      	lsls	r3, r3, #4
 8007432:	1a9b      	subs	r3, r3, r2
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	440b      	add	r3, r1
 8007438:	3338      	adds	r3, #56	@ 0x38
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	18d1      	adds	r1, r2, r3
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	69ba      	ldr	r2, [r7, #24]
 8007444:	4613      	mov	r3, r2
 8007446:	011b      	lsls	r3, r3, #4
 8007448:	1a9b      	subs	r3, r3, r2
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	4403      	add	r3, r0
 800744e:	3338      	adds	r3, #56	@ 0x38
 8007450:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8007452:	69bb      	ldr	r3, [r7, #24]
 8007454:	015a      	lsls	r2, r3, #5
 8007456:	6a3b      	ldr	r3, [r7, #32]
 8007458:	4413      	add	r3, r2
 800745a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800745e:	691b      	ldr	r3, [r3, #16]
 8007460:	0cdb      	lsrs	r3, r3, #19
 8007462:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007466:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8007468:	6879      	ldr	r1, [r7, #4]
 800746a:	69ba      	ldr	r2, [r7, #24]
 800746c:	4613      	mov	r3, r2
 800746e:	011b      	lsls	r3, r3, #4
 8007470:	1a9b      	subs	r3, r3, r2
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	440b      	add	r3, r1
 8007476:	3328      	adds	r3, #40	@ 0x28
 8007478:	881b      	ldrh	r3, [r3, #0]
 800747a:	461a      	mov	r2, r3
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	4293      	cmp	r3, r2
 8007480:	d13f      	bne.n	8007502 <HCD_RXQLVL_IRQHandler+0x1b4>
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d03c      	beq.n	8007502 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	015a      	lsls	r2, r3, #5
 800748c:	6a3b      	ldr	r3, [r7, #32]
 800748e:	4413      	add	r3, r2
 8007490:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800749e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80074a6:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80074a8:	69bb      	ldr	r3, [r7, #24]
 80074aa:	015a      	lsls	r2, r3, #5
 80074ac:	6a3b      	ldr	r3, [r7, #32]
 80074ae:	4413      	add	r3, r2
 80074b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074b4:	461a      	mov	r2, r3
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80074ba:	6879      	ldr	r1, [r7, #4]
 80074bc:	69ba      	ldr	r2, [r7, #24]
 80074be:	4613      	mov	r3, r2
 80074c0:	011b      	lsls	r3, r3, #4
 80074c2:	1a9b      	subs	r3, r3, r2
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	440b      	add	r3, r1
 80074c8:	333c      	adds	r3, #60	@ 0x3c
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	f083 0301 	eor.w	r3, r3, #1
 80074d0:	b2d8      	uxtb	r0, r3
 80074d2:	6879      	ldr	r1, [r7, #4]
 80074d4:	69ba      	ldr	r2, [r7, #24]
 80074d6:	4613      	mov	r3, r2
 80074d8:	011b      	lsls	r3, r3, #4
 80074da:	1a9b      	subs	r3, r3, r2
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	440b      	add	r3, r1
 80074e0:	333c      	adds	r3, #60	@ 0x3c
 80074e2:	4602      	mov	r2, r0
 80074e4:	701a      	strb	r2, [r3, #0]
      break;
 80074e6:	e00c      	b.n	8007502 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80074e8:	6879      	ldr	r1, [r7, #4]
 80074ea:	69ba      	ldr	r2, [r7, #24]
 80074ec:	4613      	mov	r3, r2
 80074ee:	011b      	lsls	r3, r3, #4
 80074f0:	1a9b      	subs	r3, r3, r2
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	440b      	add	r3, r1
 80074f6:	334c      	adds	r3, #76	@ 0x4c
 80074f8:	2204      	movs	r2, #4
 80074fa:	701a      	strb	r2, [r3, #0]
      break;
 80074fc:	e001      	b.n	8007502 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80074fe:	bf00      	nop
 8007500:	e000      	b.n	8007504 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8007502:	bf00      	nop
  }
}
 8007504:	bf00      	nop
 8007506:	3728      	adds	r7, #40	@ 0x28
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b086      	sub	sp, #24
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007538:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f003 0302 	and.w	r3, r3, #2
 8007540:	2b02      	cmp	r3, #2
 8007542:	d10b      	bne.n	800755c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f003 0301 	and.w	r3, r3, #1
 800754a:	2b01      	cmp	r3, #1
 800754c:	d102      	bne.n	8007554 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f007 f912 	bl	800e778 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	f043 0302 	orr.w	r3, r3, #2
 800755a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f003 0308 	and.w	r3, r3, #8
 8007562:	2b08      	cmp	r3, #8
 8007564:	d132      	bne.n	80075cc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	f043 0308 	orr.w	r3, r3, #8
 800756c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f003 0304 	and.w	r3, r3, #4
 8007574:	2b04      	cmp	r3, #4
 8007576:	d126      	bne.n	80075c6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	7a5b      	ldrb	r3, [r3, #9]
 800757c:	2b02      	cmp	r3, #2
 800757e:	d113      	bne.n	80075a8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8007586:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800758a:	d106      	bne.n	800759a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	2102      	movs	r1, #2
 8007592:	4618      	mov	r0, r3
 8007594:	f003 fbb6 	bl	800ad04 <USB_InitFSLSPClkSel>
 8007598:	e011      	b.n	80075be <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2101      	movs	r1, #1
 80075a0:	4618      	mov	r0, r3
 80075a2:	f003 fbaf 	bl	800ad04 <USB_InitFSLSPClkSel>
 80075a6:	e00a      	b.n	80075be <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	79db      	ldrb	r3, [r3, #7]
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d106      	bne.n	80075be <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80075b6:	461a      	mov	r2, r3
 80075b8:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80075bc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f007 f904 	bl	800e7cc <HAL_HCD_PortEnabled_Callback>
 80075c4:	e002      	b.n	80075cc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f007 f90e 	bl	800e7e8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f003 0320 	and.w	r3, r3, #32
 80075d2:	2b20      	cmp	r3, #32
 80075d4:	d103      	bne.n	80075de <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	f043 0320 	orr.w	r3, r3, #32
 80075dc:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80075e4:	461a      	mov	r2, r3
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	6013      	str	r3, [r2, #0]
}
 80075ea:	bf00      	nop
 80075ec:	3718      	adds	r7, #24
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
	...

080075f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b082      	sub	sp, #8
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d101      	bne.n	8007606 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	e08b      	b.n	800771e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800760c:	b2db      	uxtb	r3, r3
 800760e:	2b00      	cmp	r3, #0
 8007610:	d106      	bne.n	8007620 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 f8b5 	bl	800778a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2224      	movs	r2, #36	@ 0x24
 8007624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f022 0201 	bic.w	r2, r2, #1
 8007636:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	685a      	ldr	r2, [r3, #4]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007644:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	689a      	ldr	r2, [r3, #8]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007654:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	68db      	ldr	r3, [r3, #12]
 800765a:	2b01      	cmp	r3, #1
 800765c:	d107      	bne.n	800766e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	689a      	ldr	r2, [r3, #8]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800766a:	609a      	str	r2, [r3, #8]
 800766c:	e006      	b.n	800767c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	689a      	ldr	r2, [r3, #8]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800767a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	2b02      	cmp	r3, #2
 8007682:	d108      	bne.n	8007696 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	685a      	ldr	r2, [r3, #4]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007692:	605a      	str	r2, [r3, #4]
 8007694:	e007      	b.n	80076a6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	685a      	ldr	r2, [r3, #4]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80076a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	6859      	ldr	r1, [r3, #4]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	4b1d      	ldr	r3, [pc, #116]	@ (8007728 <HAL_I2C_Init+0x134>)
 80076b2:	430b      	orrs	r3, r1
 80076b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	68da      	ldr	r2, [r3, #12]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80076c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	691a      	ldr	r2, [r3, #16]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	695b      	ldr	r3, [r3, #20]
 80076ce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	699b      	ldr	r3, [r3, #24]
 80076d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	430a      	orrs	r2, r1
 80076de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	69d9      	ldr	r1, [r3, #28]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6a1a      	ldr	r2, [r3, #32]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	430a      	orrs	r2, r1
 80076ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f042 0201 	orr.w	r2, r2, #1
 80076fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2200      	movs	r2, #0
 8007704:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2220      	movs	r2, #32
 800770a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800771c:	2300      	movs	r3, #0
}
 800771e:	4618      	mov	r0, r3
 8007720:	3708      	adds	r7, #8
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	02008000 	.word	0x02008000

0800772c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b082      	sub	sp, #8
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d101      	bne.n	800773e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	e021      	b.n	8007782 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2224      	movs	r2, #36	@ 0x24
 8007742:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	681a      	ldr	r2, [r3, #0]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f022 0201 	bic.w	r2, r2, #1
 8007754:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 f821 	bl	800779e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3708      	adds	r7, #8
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}

0800778a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800778a:	b480      	push	{r7}
 800778c:	b083      	sub	sp, #12
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8007792:	bf00      	nop
 8007794:	370c      	adds	r7, #12
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr

0800779e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800779e:	b480      	push	{r7}
 80077a0:	b083      	sub	sp, #12
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80077a6:	bf00      	nop
 80077a8:	370c      	adds	r7, #12
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr
	...

080077b4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b088      	sub	sp, #32
 80077b8:	af02      	add	r7, sp, #8
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	4608      	mov	r0, r1
 80077be:	4611      	mov	r1, r2
 80077c0:	461a      	mov	r2, r3
 80077c2:	4603      	mov	r3, r0
 80077c4:	817b      	strh	r3, [r7, #10]
 80077c6:	460b      	mov	r3, r1
 80077c8:	813b      	strh	r3, [r7, #8]
 80077ca:	4613      	mov	r3, r2
 80077cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	2b20      	cmp	r3, #32
 80077d8:	f040 80f9 	bne.w	80079ce <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80077dc:	6a3b      	ldr	r3, [r7, #32]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d002      	beq.n	80077e8 <HAL_I2C_Mem_Write+0x34>
 80077e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d105      	bne.n	80077f4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80077ee:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80077f0:	2301      	movs	r3, #1
 80077f2:	e0ed      	b.n	80079d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d101      	bne.n	8007802 <HAL_I2C_Mem_Write+0x4e>
 80077fe:	2302      	movs	r3, #2
 8007800:	e0e6      	b.n	80079d0 <HAL_I2C_Mem_Write+0x21c>
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2201      	movs	r2, #1
 8007806:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800780a:	f7fa fb1b 	bl	8001e44 <HAL_GetTick>
 800780e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	9300      	str	r3, [sp, #0]
 8007814:	2319      	movs	r3, #25
 8007816:	2201      	movs	r2, #1
 8007818:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800781c:	68f8      	ldr	r0, [r7, #12]
 800781e:	f000 fadd 	bl	8007ddc <I2C_WaitOnFlagUntilTimeout>
 8007822:	4603      	mov	r3, r0
 8007824:	2b00      	cmp	r3, #0
 8007826:	d001      	beq.n	800782c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	e0d1      	b.n	80079d0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2221      	movs	r2, #33	@ 0x21
 8007830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2240      	movs	r2, #64	@ 0x40
 8007838:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2200      	movs	r2, #0
 8007840:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	6a3a      	ldr	r2, [r7, #32]
 8007846:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800784c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2200      	movs	r2, #0
 8007852:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007854:	88f8      	ldrh	r0, [r7, #6]
 8007856:	893a      	ldrh	r2, [r7, #8]
 8007858:	8979      	ldrh	r1, [r7, #10]
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	9301      	str	r3, [sp, #4]
 800785e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007860:	9300      	str	r3, [sp, #0]
 8007862:	4603      	mov	r3, r0
 8007864:	68f8      	ldr	r0, [r7, #12]
 8007866:	f000 f9ed 	bl	8007c44 <I2C_RequestMemoryWrite>
 800786a:	4603      	mov	r3, r0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d005      	beq.n	800787c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2200      	movs	r2, #0
 8007874:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007878:	2301      	movs	r3, #1
 800787a:	e0a9      	b.n	80079d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007880:	b29b      	uxth	r3, r3
 8007882:	2bff      	cmp	r3, #255	@ 0xff
 8007884:	d90e      	bls.n	80078a4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	22ff      	movs	r2, #255	@ 0xff
 800788a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007890:	b2da      	uxtb	r2, r3
 8007892:	8979      	ldrh	r1, [r7, #10]
 8007894:	2300      	movs	r3, #0
 8007896:	9300      	str	r3, [sp, #0]
 8007898:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800789c:	68f8      	ldr	r0, [r7, #12]
 800789e:	f000 fc61 	bl	8008164 <I2C_TransferConfig>
 80078a2:	e00f      	b.n	80078c4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078a8:	b29a      	uxth	r2, r3
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078b2:	b2da      	uxtb	r2, r3
 80078b4:	8979      	ldrh	r1, [r7, #10]
 80078b6:	2300      	movs	r3, #0
 80078b8:	9300      	str	r3, [sp, #0]
 80078ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80078be:	68f8      	ldr	r0, [r7, #12]
 80078c0:	f000 fc50 	bl	8008164 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80078c4:	697a      	ldr	r2, [r7, #20]
 80078c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80078c8:	68f8      	ldr	r0, [r7, #12]
 80078ca:	f000 fae0 	bl	8007e8e <I2C_WaitOnTXISFlagUntilTimeout>
 80078ce:	4603      	mov	r3, r0
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d001      	beq.n	80078d8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80078d4:	2301      	movs	r3, #1
 80078d6:	e07b      	b.n	80079d0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078dc:	781a      	ldrb	r2, [r3, #0]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078e8:	1c5a      	adds	r2, r3, #1
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	3b01      	subs	r3, #1
 80078f6:	b29a      	uxth	r2, r3
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007900:	3b01      	subs	r3, #1
 8007902:	b29a      	uxth	r2, r3
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800790c:	b29b      	uxth	r3, r3
 800790e:	2b00      	cmp	r3, #0
 8007910:	d034      	beq.n	800797c <HAL_I2C_Mem_Write+0x1c8>
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007916:	2b00      	cmp	r3, #0
 8007918:	d130      	bne.n	800797c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	9300      	str	r3, [sp, #0]
 800791e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007920:	2200      	movs	r2, #0
 8007922:	2180      	movs	r1, #128	@ 0x80
 8007924:	68f8      	ldr	r0, [r7, #12]
 8007926:	f000 fa59 	bl	8007ddc <I2C_WaitOnFlagUntilTimeout>
 800792a:	4603      	mov	r3, r0
 800792c:	2b00      	cmp	r3, #0
 800792e:	d001      	beq.n	8007934 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007930:	2301      	movs	r3, #1
 8007932:	e04d      	b.n	80079d0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007938:	b29b      	uxth	r3, r3
 800793a:	2bff      	cmp	r3, #255	@ 0xff
 800793c:	d90e      	bls.n	800795c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	22ff      	movs	r2, #255	@ 0xff
 8007942:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007948:	b2da      	uxtb	r2, r3
 800794a:	8979      	ldrh	r1, [r7, #10]
 800794c:	2300      	movs	r3, #0
 800794e:	9300      	str	r3, [sp, #0]
 8007950:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007954:	68f8      	ldr	r0, [r7, #12]
 8007956:	f000 fc05 	bl	8008164 <I2C_TransferConfig>
 800795a:	e00f      	b.n	800797c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007960:	b29a      	uxth	r2, r3
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800796a:	b2da      	uxtb	r2, r3
 800796c:	8979      	ldrh	r1, [r7, #10]
 800796e:	2300      	movs	r3, #0
 8007970:	9300      	str	r3, [sp, #0]
 8007972:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007976:	68f8      	ldr	r0, [r7, #12]
 8007978:	f000 fbf4 	bl	8008164 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007980:	b29b      	uxth	r3, r3
 8007982:	2b00      	cmp	r3, #0
 8007984:	d19e      	bne.n	80078c4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007986:	697a      	ldr	r2, [r7, #20]
 8007988:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800798a:	68f8      	ldr	r0, [r7, #12]
 800798c:	f000 fac6 	bl	8007f1c <I2C_WaitOnSTOPFlagUntilTimeout>
 8007990:	4603      	mov	r3, r0
 8007992:	2b00      	cmp	r3, #0
 8007994:	d001      	beq.n	800799a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007996:	2301      	movs	r3, #1
 8007998:	e01a      	b.n	80079d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2220      	movs	r2, #32
 80079a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	6859      	ldr	r1, [r3, #4]
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	4b0a      	ldr	r3, [pc, #40]	@ (80079d8 <HAL_I2C_Mem_Write+0x224>)
 80079ae:	400b      	ands	r3, r1
 80079b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2220      	movs	r2, #32
 80079b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2200      	movs	r2, #0
 80079be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80079ca:	2300      	movs	r3, #0
 80079cc:	e000      	b.n	80079d0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80079ce:	2302      	movs	r3, #2
  }
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3718      	adds	r7, #24
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}
 80079d8:	fe00e800 	.word	0xfe00e800

080079dc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b088      	sub	sp, #32
 80079e0:	af02      	add	r7, sp, #8
 80079e2:	60f8      	str	r0, [r7, #12]
 80079e4:	4608      	mov	r0, r1
 80079e6:	4611      	mov	r1, r2
 80079e8:	461a      	mov	r2, r3
 80079ea:	4603      	mov	r3, r0
 80079ec:	817b      	strh	r3, [r7, #10]
 80079ee:	460b      	mov	r3, r1
 80079f0:	813b      	strh	r3, [r7, #8]
 80079f2:	4613      	mov	r3, r2
 80079f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	2b20      	cmp	r3, #32
 8007a00:	f040 80fd 	bne.w	8007bfe <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a04:	6a3b      	ldr	r3, [r7, #32]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d002      	beq.n	8007a10 <HAL_I2C_Mem_Read+0x34>
 8007a0a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d105      	bne.n	8007a1c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007a16:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	e0f1      	b.n	8007c00 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d101      	bne.n	8007a2a <HAL_I2C_Mem_Read+0x4e>
 8007a26:	2302      	movs	r3, #2
 8007a28:	e0ea      	b.n	8007c00 <HAL_I2C_Mem_Read+0x224>
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007a32:	f7fa fa07 	bl	8001e44 <HAL_GetTick>
 8007a36:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	9300      	str	r3, [sp, #0]
 8007a3c:	2319      	movs	r3, #25
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007a44:	68f8      	ldr	r0, [r7, #12]
 8007a46:	f000 f9c9 	bl	8007ddc <I2C_WaitOnFlagUntilTimeout>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d001      	beq.n	8007a54 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007a50:	2301      	movs	r3, #1
 8007a52:	e0d5      	b.n	8007c00 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2222      	movs	r2, #34	@ 0x22
 8007a58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2240      	movs	r2, #64	@ 0x40
 8007a60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2200      	movs	r2, #0
 8007a68:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	6a3a      	ldr	r2, [r7, #32]
 8007a6e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007a74:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007a7c:	88f8      	ldrh	r0, [r7, #6]
 8007a7e:	893a      	ldrh	r2, [r7, #8]
 8007a80:	8979      	ldrh	r1, [r7, #10]
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	9301      	str	r3, [sp, #4]
 8007a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a88:	9300      	str	r3, [sp, #0]
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	68f8      	ldr	r0, [r7, #12]
 8007a8e:	f000 f92d 	bl	8007cec <I2C_RequestMemoryRead>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d005      	beq.n	8007aa4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	e0ad      	b.n	8007c00 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	2bff      	cmp	r3, #255	@ 0xff
 8007aac:	d90e      	bls.n	8007acc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	22ff      	movs	r2, #255	@ 0xff
 8007ab2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ab8:	b2da      	uxtb	r2, r3
 8007aba:	8979      	ldrh	r1, [r7, #10]
 8007abc:	4b52      	ldr	r3, [pc, #328]	@ (8007c08 <HAL_I2C_Mem_Read+0x22c>)
 8007abe:	9300      	str	r3, [sp, #0]
 8007ac0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007ac4:	68f8      	ldr	r0, [r7, #12]
 8007ac6:	f000 fb4d 	bl	8008164 <I2C_TransferConfig>
 8007aca:	e00f      	b.n	8007aec <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ad0:	b29a      	uxth	r2, r3
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ada:	b2da      	uxtb	r2, r3
 8007adc:	8979      	ldrh	r1, [r7, #10]
 8007ade:	4b4a      	ldr	r3, [pc, #296]	@ (8007c08 <HAL_I2C_Mem_Read+0x22c>)
 8007ae0:	9300      	str	r3, [sp, #0]
 8007ae2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007ae6:	68f8      	ldr	r0, [r7, #12]
 8007ae8:	f000 fb3c 	bl	8008164 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	9300      	str	r3, [sp, #0]
 8007af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007af2:	2200      	movs	r2, #0
 8007af4:	2104      	movs	r1, #4
 8007af6:	68f8      	ldr	r0, [r7, #12]
 8007af8:	f000 f970 	bl	8007ddc <I2C_WaitOnFlagUntilTimeout>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d001      	beq.n	8007b06 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	e07c      	b.n	8007c00 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b10:	b2d2      	uxtb	r2, r2
 8007b12:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b18:	1c5a      	adds	r2, r3, #1
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b22:	3b01      	subs	r3, #1
 8007b24:	b29a      	uxth	r2, r3
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	3b01      	subs	r3, #1
 8007b32:	b29a      	uxth	r2, r3
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d034      	beq.n	8007bac <HAL_I2C_Mem_Read+0x1d0>
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d130      	bne.n	8007bac <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	9300      	str	r3, [sp, #0]
 8007b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b50:	2200      	movs	r2, #0
 8007b52:	2180      	movs	r1, #128	@ 0x80
 8007b54:	68f8      	ldr	r0, [r7, #12]
 8007b56:	f000 f941 	bl	8007ddc <I2C_WaitOnFlagUntilTimeout>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d001      	beq.n	8007b64 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	e04d      	b.n	8007c00 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	2bff      	cmp	r3, #255	@ 0xff
 8007b6c:	d90e      	bls.n	8007b8c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	22ff      	movs	r2, #255	@ 0xff
 8007b72:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b78:	b2da      	uxtb	r2, r3
 8007b7a:	8979      	ldrh	r1, [r7, #10]
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	9300      	str	r3, [sp, #0]
 8007b80:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007b84:	68f8      	ldr	r0, [r7, #12]
 8007b86:	f000 faed 	bl	8008164 <I2C_TransferConfig>
 8007b8a:	e00f      	b.n	8007bac <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b90:	b29a      	uxth	r2, r3
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b9a:	b2da      	uxtb	r2, r3
 8007b9c:	8979      	ldrh	r1, [r7, #10]
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	9300      	str	r3, [sp, #0]
 8007ba2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007ba6:	68f8      	ldr	r0, [r7, #12]
 8007ba8:	f000 fadc 	bl	8008164 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d19a      	bne.n	8007aec <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007bb6:	697a      	ldr	r2, [r7, #20]
 8007bb8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007bba:	68f8      	ldr	r0, [r7, #12]
 8007bbc:	f000 f9ae 	bl	8007f1c <I2C_WaitOnSTOPFlagUntilTimeout>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d001      	beq.n	8007bca <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	e01a      	b.n	8007c00 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	2220      	movs	r2, #32
 8007bd0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	6859      	ldr	r1, [r3, #4]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8007c0c <HAL_I2C_Mem_Read+0x230>)
 8007bde:	400b      	ands	r3, r1
 8007be0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2220      	movs	r2, #32
 8007be6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2200      	movs	r2, #0
 8007bee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	e000      	b.n	8007c00 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007bfe:	2302      	movs	r3, #2
  }
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3718      	adds	r7, #24
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	80002400 	.word	0x80002400
 8007c0c:	fe00e800 	.word	0xfe00e800

08007c10 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c1e:	b2db      	uxtb	r3, r3
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr

08007c2c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b083      	sub	sp, #12
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b086      	sub	sp, #24
 8007c48:	af02      	add	r7, sp, #8
 8007c4a:	60f8      	str	r0, [r7, #12]
 8007c4c:	4608      	mov	r0, r1
 8007c4e:	4611      	mov	r1, r2
 8007c50:	461a      	mov	r2, r3
 8007c52:	4603      	mov	r3, r0
 8007c54:	817b      	strh	r3, [r7, #10]
 8007c56:	460b      	mov	r3, r1
 8007c58:	813b      	strh	r3, [r7, #8]
 8007c5a:	4613      	mov	r3, r2
 8007c5c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007c5e:	88fb      	ldrh	r3, [r7, #6]
 8007c60:	b2da      	uxtb	r2, r3
 8007c62:	8979      	ldrh	r1, [r7, #10]
 8007c64:	4b20      	ldr	r3, [pc, #128]	@ (8007ce8 <I2C_RequestMemoryWrite+0xa4>)
 8007c66:	9300      	str	r3, [sp, #0]
 8007c68:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007c6c:	68f8      	ldr	r0, [r7, #12]
 8007c6e:	f000 fa79 	bl	8008164 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c72:	69fa      	ldr	r2, [r7, #28]
 8007c74:	69b9      	ldr	r1, [r7, #24]
 8007c76:	68f8      	ldr	r0, [r7, #12]
 8007c78:	f000 f909 	bl	8007e8e <I2C_WaitOnTXISFlagUntilTimeout>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d001      	beq.n	8007c86 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	e02c      	b.n	8007ce0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007c86:	88fb      	ldrh	r3, [r7, #6]
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d105      	bne.n	8007c98 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007c8c:	893b      	ldrh	r3, [r7, #8]
 8007c8e:	b2da      	uxtb	r2, r3
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	629a      	str	r2, [r3, #40]	@ 0x28
 8007c96:	e015      	b.n	8007cc4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007c98:	893b      	ldrh	r3, [r7, #8]
 8007c9a:	0a1b      	lsrs	r3, r3, #8
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	b2da      	uxtb	r2, r3
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ca6:	69fa      	ldr	r2, [r7, #28]
 8007ca8:	69b9      	ldr	r1, [r7, #24]
 8007caa:	68f8      	ldr	r0, [r7, #12]
 8007cac:	f000 f8ef 	bl	8007e8e <I2C_WaitOnTXISFlagUntilTimeout>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d001      	beq.n	8007cba <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e012      	b.n	8007ce0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007cba:	893b      	ldrh	r3, [r7, #8]
 8007cbc:	b2da      	uxtb	r2, r3
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007cc4:	69fb      	ldr	r3, [r7, #28]
 8007cc6:	9300      	str	r3, [sp, #0]
 8007cc8:	69bb      	ldr	r3, [r7, #24]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	2180      	movs	r1, #128	@ 0x80
 8007cce:	68f8      	ldr	r0, [r7, #12]
 8007cd0:	f000 f884 	bl	8007ddc <I2C_WaitOnFlagUntilTimeout>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d001      	beq.n	8007cde <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	e000      	b.n	8007ce0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3710      	adds	r7, #16
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	80002000 	.word	0x80002000

08007cec <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b086      	sub	sp, #24
 8007cf0:	af02      	add	r7, sp, #8
 8007cf2:	60f8      	str	r0, [r7, #12]
 8007cf4:	4608      	mov	r0, r1
 8007cf6:	4611      	mov	r1, r2
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	817b      	strh	r3, [r7, #10]
 8007cfe:	460b      	mov	r3, r1
 8007d00:	813b      	strh	r3, [r7, #8]
 8007d02:	4613      	mov	r3, r2
 8007d04:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007d06:	88fb      	ldrh	r3, [r7, #6]
 8007d08:	b2da      	uxtb	r2, r3
 8007d0a:	8979      	ldrh	r1, [r7, #10]
 8007d0c:	4b20      	ldr	r3, [pc, #128]	@ (8007d90 <I2C_RequestMemoryRead+0xa4>)
 8007d0e:	9300      	str	r3, [sp, #0]
 8007d10:	2300      	movs	r3, #0
 8007d12:	68f8      	ldr	r0, [r7, #12]
 8007d14:	f000 fa26 	bl	8008164 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d18:	69fa      	ldr	r2, [r7, #28]
 8007d1a:	69b9      	ldr	r1, [r7, #24]
 8007d1c:	68f8      	ldr	r0, [r7, #12]
 8007d1e:	f000 f8b6 	bl	8007e8e <I2C_WaitOnTXISFlagUntilTimeout>
 8007d22:	4603      	mov	r3, r0
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d001      	beq.n	8007d2c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	e02c      	b.n	8007d86 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007d2c:	88fb      	ldrh	r3, [r7, #6]
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d105      	bne.n	8007d3e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007d32:	893b      	ldrh	r3, [r7, #8]
 8007d34:	b2da      	uxtb	r2, r3
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	629a      	str	r2, [r3, #40]	@ 0x28
 8007d3c:	e015      	b.n	8007d6a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007d3e:	893b      	ldrh	r3, [r7, #8]
 8007d40:	0a1b      	lsrs	r3, r3, #8
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	b2da      	uxtb	r2, r3
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d4c:	69fa      	ldr	r2, [r7, #28]
 8007d4e:	69b9      	ldr	r1, [r7, #24]
 8007d50:	68f8      	ldr	r0, [r7, #12]
 8007d52:	f000 f89c 	bl	8007e8e <I2C_WaitOnTXISFlagUntilTimeout>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d001      	beq.n	8007d60 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e012      	b.n	8007d86 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007d60:	893b      	ldrh	r3, [r7, #8]
 8007d62:	b2da      	uxtb	r2, r3
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007d6a:	69fb      	ldr	r3, [r7, #28]
 8007d6c:	9300      	str	r3, [sp, #0]
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	2200      	movs	r2, #0
 8007d72:	2140      	movs	r1, #64	@ 0x40
 8007d74:	68f8      	ldr	r0, [r7, #12]
 8007d76:	f000 f831 	bl	8007ddc <I2C_WaitOnFlagUntilTimeout>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d001      	beq.n	8007d84 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	e000      	b.n	8007d86 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007d84:	2300      	movs	r3, #0
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3710      	adds	r7, #16
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
 8007d8e:	bf00      	nop
 8007d90:	80002000 	.word	0x80002000

08007d94 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	699b      	ldr	r3, [r3, #24]
 8007da2:	f003 0302 	and.w	r3, r3, #2
 8007da6:	2b02      	cmp	r3, #2
 8007da8:	d103      	bne.n	8007db2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2200      	movs	r2, #0
 8007db0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	699b      	ldr	r3, [r3, #24]
 8007db8:	f003 0301 	and.w	r3, r3, #1
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d007      	beq.n	8007dd0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	699a      	ldr	r2, [r3, #24]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f042 0201 	orr.w	r2, r2, #1
 8007dce:	619a      	str	r2, [r3, #24]
  }
}
 8007dd0:	bf00      	nop
 8007dd2:	370c      	adds	r7, #12
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr

08007ddc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	60b9      	str	r1, [r7, #8]
 8007de6:	603b      	str	r3, [r7, #0]
 8007de8:	4613      	mov	r3, r2
 8007dea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007dec:	e03b      	b.n	8007e66 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007dee:	69ba      	ldr	r2, [r7, #24]
 8007df0:	6839      	ldr	r1, [r7, #0]
 8007df2:	68f8      	ldr	r0, [r7, #12]
 8007df4:	f000 f8d6 	bl	8007fa4 <I2C_IsErrorOccurred>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d001      	beq.n	8007e02 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e041      	b.n	8007e86 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e08:	d02d      	beq.n	8007e66 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e0a:	f7fa f81b 	bl	8001e44 <HAL_GetTick>
 8007e0e:	4602      	mov	r2, r0
 8007e10:	69bb      	ldr	r3, [r7, #24]
 8007e12:	1ad3      	subs	r3, r2, r3
 8007e14:	683a      	ldr	r2, [r7, #0]
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d302      	bcc.n	8007e20 <I2C_WaitOnFlagUntilTimeout+0x44>
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d122      	bne.n	8007e66 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	699a      	ldr	r2, [r3, #24]
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	4013      	ands	r3, r2
 8007e2a:	68ba      	ldr	r2, [r7, #8]
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	bf0c      	ite	eq
 8007e30:	2301      	moveq	r3, #1
 8007e32:	2300      	movne	r3, #0
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	461a      	mov	r2, r3
 8007e38:	79fb      	ldrb	r3, [r7, #7]
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d113      	bne.n	8007e66 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e42:	f043 0220 	orr.w	r2, r3, #32
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2220      	movs	r2, #32
 8007e4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2200      	movs	r2, #0
 8007e56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8007e62:	2301      	movs	r3, #1
 8007e64:	e00f      	b.n	8007e86 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	699a      	ldr	r2, [r3, #24]
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	4013      	ands	r3, r2
 8007e70:	68ba      	ldr	r2, [r7, #8]
 8007e72:	429a      	cmp	r2, r3
 8007e74:	bf0c      	ite	eq
 8007e76:	2301      	moveq	r3, #1
 8007e78:	2300      	movne	r3, #0
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	79fb      	ldrb	r3, [r7, #7]
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d0b4      	beq.n	8007dee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e84:	2300      	movs	r3, #0
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3710      	adds	r7, #16
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}

08007e8e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007e8e:	b580      	push	{r7, lr}
 8007e90:	b084      	sub	sp, #16
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	60f8      	str	r0, [r7, #12]
 8007e96:	60b9      	str	r1, [r7, #8]
 8007e98:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007e9a:	e033      	b.n	8007f04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	68b9      	ldr	r1, [r7, #8]
 8007ea0:	68f8      	ldr	r0, [r7, #12]
 8007ea2:	f000 f87f 	bl	8007fa4 <I2C_IsErrorOccurred>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d001      	beq.n	8007eb0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007eac:	2301      	movs	r3, #1
 8007eae:	e031      	b.n	8007f14 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007eb6:	d025      	beq.n	8007f04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007eb8:	f7f9 ffc4 	bl	8001e44 <HAL_GetTick>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	1ad3      	subs	r3, r2, r3
 8007ec2:	68ba      	ldr	r2, [r7, #8]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d302      	bcc.n	8007ece <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d11a      	bne.n	8007f04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	699b      	ldr	r3, [r3, #24]
 8007ed4:	f003 0302 	and.w	r3, r3, #2
 8007ed8:	2b02      	cmp	r3, #2
 8007eda:	d013      	beq.n	8007f04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ee0:	f043 0220 	orr.w	r2, r3, #32
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2220      	movs	r2, #32
 8007eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2200      	movs	r2, #0
 8007efc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007f00:	2301      	movs	r3, #1
 8007f02:	e007      	b.n	8007f14 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	699b      	ldr	r3, [r3, #24]
 8007f0a:	f003 0302 	and.w	r3, r3, #2
 8007f0e:	2b02      	cmp	r3, #2
 8007f10:	d1c4      	bne.n	8007e9c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007f12:	2300      	movs	r3, #0
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3710      	adds	r7, #16
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b084      	sub	sp, #16
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	60b9      	str	r1, [r7, #8]
 8007f26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007f28:	e02f      	b.n	8007f8a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	68b9      	ldr	r1, [r7, #8]
 8007f2e:	68f8      	ldr	r0, [r7, #12]
 8007f30:	f000 f838 	bl	8007fa4 <I2C_IsErrorOccurred>
 8007f34:	4603      	mov	r3, r0
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d001      	beq.n	8007f3e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e02d      	b.n	8007f9a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f3e:	f7f9 ff81 	bl	8001e44 <HAL_GetTick>
 8007f42:	4602      	mov	r2, r0
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	1ad3      	subs	r3, r2, r3
 8007f48:	68ba      	ldr	r2, [r7, #8]
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d302      	bcc.n	8007f54 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d11a      	bne.n	8007f8a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	699b      	ldr	r3, [r3, #24]
 8007f5a:	f003 0320 	and.w	r3, r3, #32
 8007f5e:	2b20      	cmp	r3, #32
 8007f60:	d013      	beq.n	8007f8a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f66:	f043 0220 	orr.w	r2, r3, #32
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2220      	movs	r2, #32
 8007f72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2200      	movs	r2, #0
 8007f82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	e007      	b.n	8007f9a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	699b      	ldr	r3, [r3, #24]
 8007f90:	f003 0320 	and.w	r3, r3, #32
 8007f94:	2b20      	cmp	r3, #32
 8007f96:	d1c8      	bne.n	8007f2a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007f98:	2300      	movs	r3, #0
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3710      	adds	r7, #16
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
	...

08007fa4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b08a      	sub	sp, #40	@ 0x28
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	60b9      	str	r1, [r7, #8]
 8007fae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	699b      	ldr	r3, [r3, #24]
 8007fbc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007fc6:	69bb      	ldr	r3, [r7, #24]
 8007fc8:	f003 0310 	and.w	r3, r3, #16
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d068      	beq.n	80080a2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	2210      	movs	r2, #16
 8007fd6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007fd8:	e049      	b.n	800806e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007fe0:	d045      	beq.n	800806e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007fe2:	f7f9 ff2f 	bl	8001e44 <HAL_GetTick>
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	1ad3      	subs	r3, r2, r3
 8007fec:	68ba      	ldr	r2, [r7, #8]
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d302      	bcc.n	8007ff8 <I2C_IsErrorOccurred+0x54>
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d13a      	bne.n	800806e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008002:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800800a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	699b      	ldr	r3, [r3, #24]
 8008012:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008016:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800801a:	d121      	bne.n	8008060 <I2C_IsErrorOccurred+0xbc>
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008022:	d01d      	beq.n	8008060 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008024:	7cfb      	ldrb	r3, [r7, #19]
 8008026:	2b20      	cmp	r3, #32
 8008028:	d01a      	beq.n	8008060 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	685a      	ldr	r2, [r3, #4]
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008038:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800803a:	f7f9 ff03 	bl	8001e44 <HAL_GetTick>
 800803e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008040:	e00e      	b.n	8008060 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008042:	f7f9 feff 	bl	8001e44 <HAL_GetTick>
 8008046:	4602      	mov	r2, r0
 8008048:	69fb      	ldr	r3, [r7, #28]
 800804a:	1ad3      	subs	r3, r2, r3
 800804c:	2b19      	cmp	r3, #25
 800804e:	d907      	bls.n	8008060 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008050:	6a3b      	ldr	r3, [r7, #32]
 8008052:	f043 0320 	orr.w	r3, r3, #32
 8008056:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008058:	2301      	movs	r3, #1
 800805a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800805e:	e006      	b.n	800806e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	699b      	ldr	r3, [r3, #24]
 8008066:	f003 0320 	and.w	r3, r3, #32
 800806a:	2b20      	cmp	r3, #32
 800806c:	d1e9      	bne.n	8008042 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	699b      	ldr	r3, [r3, #24]
 8008074:	f003 0320 	and.w	r3, r3, #32
 8008078:	2b20      	cmp	r3, #32
 800807a:	d003      	beq.n	8008084 <I2C_IsErrorOccurred+0xe0>
 800807c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008080:	2b00      	cmp	r3, #0
 8008082:	d0aa      	beq.n	8007fda <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008084:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008088:	2b00      	cmp	r3, #0
 800808a:	d103      	bne.n	8008094 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	2220      	movs	r2, #32
 8008092:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008094:	6a3b      	ldr	r3, [r7, #32]
 8008096:	f043 0304 	orr.w	r3, r3, #4
 800809a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800809c:	2301      	movs	r3, #1
 800809e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	699b      	ldr	r3, [r3, #24]
 80080a8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80080aa:	69bb      	ldr	r3, [r7, #24]
 80080ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d00b      	beq.n	80080cc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80080b4:	6a3b      	ldr	r3, [r7, #32]
 80080b6:	f043 0301 	orr.w	r3, r3, #1
 80080ba:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80080c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80080c6:	2301      	movs	r3, #1
 80080c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80080cc:	69bb      	ldr	r3, [r7, #24]
 80080ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d00b      	beq.n	80080ee <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80080d6:	6a3b      	ldr	r3, [r7, #32]
 80080d8:	f043 0308 	orr.w	r3, r3, #8
 80080dc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80080e6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80080e8:	2301      	movs	r3, #1
 80080ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80080ee:	69bb      	ldr	r3, [r7, #24]
 80080f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d00b      	beq.n	8008110 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80080f8:	6a3b      	ldr	r3, [r7, #32]
 80080fa:	f043 0302 	orr.w	r3, r3, #2
 80080fe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008108:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800810a:	2301      	movs	r3, #1
 800810c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8008110:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008114:	2b00      	cmp	r3, #0
 8008116:	d01c      	beq.n	8008152 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008118:	68f8      	ldr	r0, [r7, #12]
 800811a:	f7ff fe3b 	bl	8007d94 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	6859      	ldr	r1, [r3, #4]
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	4b0d      	ldr	r3, [pc, #52]	@ (8008160 <I2C_IsErrorOccurred+0x1bc>)
 800812a:	400b      	ands	r3, r1
 800812c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008132:	6a3b      	ldr	r3, [r7, #32]
 8008134:	431a      	orrs	r2, r3
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2220      	movs	r2, #32
 800813e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2200      	movs	r2, #0
 8008146:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2200      	movs	r2, #0
 800814e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8008152:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008156:	4618      	mov	r0, r3
 8008158:	3728      	adds	r7, #40	@ 0x28
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
 800815e:	bf00      	nop
 8008160:	fe00e800 	.word	0xfe00e800

08008164 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008164:	b480      	push	{r7}
 8008166:	b087      	sub	sp, #28
 8008168:	af00      	add	r7, sp, #0
 800816a:	60f8      	str	r0, [r7, #12]
 800816c:	607b      	str	r3, [r7, #4]
 800816e:	460b      	mov	r3, r1
 8008170:	817b      	strh	r3, [r7, #10]
 8008172:	4613      	mov	r3, r2
 8008174:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008176:	897b      	ldrh	r3, [r7, #10]
 8008178:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800817c:	7a7b      	ldrb	r3, [r7, #9]
 800817e:	041b      	lsls	r3, r3, #16
 8008180:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008184:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800818a:	6a3b      	ldr	r3, [r7, #32]
 800818c:	4313      	orrs	r3, r2
 800818e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008192:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	685a      	ldr	r2, [r3, #4]
 800819a:	6a3b      	ldr	r3, [r7, #32]
 800819c:	0d5b      	lsrs	r3, r3, #21
 800819e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80081a2:	4b08      	ldr	r3, [pc, #32]	@ (80081c4 <I2C_TransferConfig+0x60>)
 80081a4:	430b      	orrs	r3, r1
 80081a6:	43db      	mvns	r3, r3
 80081a8:	ea02 0103 	and.w	r1, r2, r3
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	697a      	ldr	r2, [r7, #20]
 80081b2:	430a      	orrs	r2, r1
 80081b4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80081b6:	bf00      	nop
 80081b8:	371c      	adds	r7, #28
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr
 80081c2:	bf00      	nop
 80081c4:	03ff63ff 	.word	0x03ff63ff

080081c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b083      	sub	sp, #12
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	2b20      	cmp	r3, #32
 80081dc:	d138      	bne.n	8008250 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d101      	bne.n	80081ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80081e8:	2302      	movs	r3, #2
 80081ea:	e032      	b.n	8008252 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2201      	movs	r2, #1
 80081f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2224      	movs	r2, #36	@ 0x24
 80081f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f022 0201 	bic.w	r2, r2, #1
 800820a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	681a      	ldr	r2, [r3, #0]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800821a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	6819      	ldr	r1, [r3, #0]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	683a      	ldr	r2, [r7, #0]
 8008228:	430a      	orrs	r2, r1
 800822a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f042 0201 	orr.w	r2, r2, #1
 800823a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2220      	movs	r2, #32
 8008240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800824c:	2300      	movs	r3, #0
 800824e:	e000      	b.n	8008252 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008250:	2302      	movs	r3, #2
  }
}
 8008252:	4618      	mov	r0, r3
 8008254:	370c      	adds	r7, #12
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr

0800825e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800825e:	b480      	push	{r7}
 8008260:	b085      	sub	sp, #20
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
 8008266:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800826e:	b2db      	uxtb	r3, r3
 8008270:	2b20      	cmp	r3, #32
 8008272:	d139      	bne.n	80082e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800827a:	2b01      	cmp	r3, #1
 800827c:	d101      	bne.n	8008282 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800827e:	2302      	movs	r3, #2
 8008280:	e033      	b.n	80082ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2201      	movs	r2, #1
 8008286:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2224      	movs	r2, #36	@ 0x24
 800828e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f022 0201 	bic.w	r2, r2, #1
 80082a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80082b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	021b      	lsls	r3, r3, #8
 80082b6:	68fa      	ldr	r2, [r7, #12]
 80082b8:	4313      	orrs	r3, r2
 80082ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	68fa      	ldr	r2, [r7, #12]
 80082c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f042 0201 	orr.w	r2, r2, #1
 80082d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2220      	movs	r2, #32
 80082d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2200      	movs	r2, #0
 80082e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80082e4:	2300      	movs	r3, #0
 80082e6:	e000      	b.n	80082ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80082e8:	2302      	movs	r3, #2
  }
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3714      	adds	r7, #20
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr
	...

080082f8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableUSBVoltageDetector(void)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Enable the USB voltage detector */
  SET_BIT(PWR->CSR2, PWR_CSR2_USB33DEN);
 80082fe:	4b0f      	ldr	r3, [pc, #60]	@ (800833c <HAL_PWREx_EnableUSBVoltageDetector+0x44>)
 8008300:	68db      	ldr	r3, [r3, #12]
 8008302:	4a0e      	ldr	r2, [pc, #56]	@ (800833c <HAL_PWREx_EnableUSBVoltageDetector+0x44>)
 8008304:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008308:	60d3      	str	r3, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800830a:	f7f9 fd9b 	bl	8001e44 <HAL_GetTick>
 800830e:	6078      	str	r0, [r7, #4]

  /* Wait till the USB regulator ready flag is set */
  while ((PWR->CSR2 & PWR_CSR2_USB33RDY) == 0U)
 8008310:	e009      	b.n	8008326 <HAL_PWREx_EnableUSBVoltageDetector+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008312:	f7f9 fd97 	bl	8001e44 <HAL_GetTick>
 8008316:	4602      	mov	r2, r0
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	1ad3      	subs	r3, r2, r3
 800831c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008320:	d901      	bls.n	8008326 <HAL_PWREx_EnableUSBVoltageDetector+0x2e>
    {
      return HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	e006      	b.n	8008334 <HAL_PWREx_EnableUSBVoltageDetector+0x3c>
  while ((PWR->CSR2 & PWR_CSR2_USB33RDY) == 0U)
 8008326:	4b05      	ldr	r3, [pc, #20]	@ (800833c <HAL_PWREx_EnableUSBVoltageDetector+0x44>)
 8008328:	68db      	ldr	r3, [r3, #12]
 800832a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800832e:	2b00      	cmp	r3, #0
 8008330:	d0ef      	beq.n	8008312 <HAL_PWREx_EnableUSBVoltageDetector+0x1a>
    }
  }
  return HAL_OK;
 8008332:	2300      	movs	r3, #0
}
 8008334:	4618      	mov	r0, r3
 8008336:	3708      	adds	r7, #8
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}
 800833c:	58024800 	.word	0x58024800

08008340 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008340:	b480      	push	{r7}
 8008342:	b08b      	sub	sp, #44	@ 0x2c
 8008344:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t prescaler;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008346:	4baa      	ldr	r3, [pc, #680]	@ (80085f0 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8008348:	691b      	ldr	r3, [r3, #16]
 800834a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800834e:	2b18      	cmp	r3, #24
 8008350:	f200 8136 	bhi.w	80085c0 <HAL_RCC_GetSysClockFreq+0x280>
 8008354:	a201      	add	r2, pc, #4	@ (adr r2, 800835c <HAL_RCC_GetSysClockFreq+0x1c>)
 8008356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800835a:	bf00      	nop
 800835c:	080083c1 	.word	0x080083c1
 8008360:	080085c1 	.word	0x080085c1
 8008364:	080085c1 	.word	0x080085c1
 8008368:	080085c1 	.word	0x080085c1
 800836c:	080085c1 	.word	0x080085c1
 8008370:	080085c1 	.word	0x080085c1
 8008374:	080085c1 	.word	0x080085c1
 8008378:	080085c1 	.word	0x080085c1
 800837c:	080083e7 	.word	0x080083e7
 8008380:	080085c1 	.word	0x080085c1
 8008384:	080085c1 	.word	0x080085c1
 8008388:	080085c1 	.word	0x080085c1
 800838c:	080085c1 	.word	0x080085c1
 8008390:	080085c1 	.word	0x080085c1
 8008394:	080085c1 	.word	0x080085c1
 8008398:	080085c1 	.word	0x080085c1
 800839c:	080083ed 	.word	0x080083ed
 80083a0:	080085c1 	.word	0x080085c1
 80083a4:	080085c1 	.word	0x080085c1
 80083a8:	080085c1 	.word	0x080085c1
 80083ac:	080085c1 	.word	0x080085c1
 80083b0:	080085c1 	.word	0x080085c1
 80083b4:	080085c1 	.word	0x080085c1
 80083b8:	080085c1 	.word	0x080085c1
 80083bc:	080083f3 	.word	0x080083f3
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */

      if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 80083c0:	4b8b      	ldr	r3, [pc, #556]	@ (80085f0 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f003 0320 	and.w	r3, r3, #32
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d009      	beq.n	80083e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80083cc:	4b88      	ldr	r3, [pc, #544]	@ (80085f0 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	08db      	lsrs	r3, r3, #3
 80083d2:	f003 0303 	and.w	r3, r3, #3
 80083d6:	4a87      	ldr	r2, [pc, #540]	@ (80085f4 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80083d8:	fa22 f303 	lsr.w	r3, r2, r3
 80083dc:	623b      	str	r3, [r7, #32]
      {
        /* Can't retrieve HSIDIV value */
        sysclockfreq = 0U;
      }

      break;
 80083de:	e0f2      	b.n	80085c6 <HAL_RCC_GetSysClockFreq+0x286>
        sysclockfreq = 0U;
 80083e0:	2300      	movs	r3, #0
 80083e2:	623b      	str	r3, [r7, #32]
      break;
 80083e4:	e0ef      	b.n	80085c6 <HAL_RCC_GetSysClockFreq+0x286>

    case RCC_SYSCLKSOURCE_STATUS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80083e6:	4b84      	ldr	r3, [pc, #528]	@ (80085f8 <HAL_RCC_GetSysClockFreq+0x2b8>)
 80083e8:	623b      	str	r3, [r7, #32]
      break;
 80083ea:	e0ec      	b.n	80085c6 <HAL_RCC_GetSysClockFreq+0x286>

    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80083ec:	4b83      	ldr	r3, [pc, #524]	@ (80085fc <HAL_RCC_GetSysClockFreq+0x2bc>)
 80083ee:	623b      	str	r3, [r7, #32]
      break;
 80083f0:	e0e9      	b.n	80085c6 <HAL_RCC_GetSysClockFreq+0x286>
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80083f2:	4b7f      	ldr	r3, [pc, #508]	@ (80085f0 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80083f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083f6:	f003 0303 	and.w	r3, r3, #3
 80083fa:	61fb      	str	r3, [r7, #28]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos)  ;
 80083fc:	4b7c      	ldr	r3, [pc, #496]	@ (80085f0 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80083fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008400:	091b      	lsrs	r3, r3, #4
 8008402:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008406:	61bb      	str	r3, [r7, #24]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008408:	4b79      	ldr	r3, [pc, #484]	@ (80085f0 <HAL_RCC_GetSysClockFreq+0x2b0>)
 800840a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800840c:	f003 0301 	and.w	r3, r3, #1
 8008410:	617b      	str	r3, [r7, #20]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN) >> 3));
 8008412:	4b77      	ldr	r3, [pc, #476]	@ (80085f0 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8008414:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008416:	08db      	lsrs	r3, r3, #3
 8008418:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800841c:	697a      	ldr	r2, [r7, #20]
 800841e:	fb02 f303 	mul.w	r3, r2, r3
 8008422:	ee07 3a90 	vmov	s15, r3
 8008426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800842a:	edc7 7a04 	vstr	s15, [r7, #16]

      if (pllm != 0U)
 800842e:	69bb      	ldr	r3, [r7, #24]
 8008430:	2b00      	cmp	r3, #0
 8008432:	f000 80c2 	beq.w	80085ba <HAL_RCC_GetSysClockFreq+0x27a>
 8008436:	69fb      	ldr	r3, [r7, #28]
 8008438:	2b02      	cmp	r3, #2
 800843a:	d064      	beq.n	8008506 <HAL_RCC_GetSysClockFreq+0x1c6>
 800843c:	69fb      	ldr	r3, [r7, #28]
 800843e:	2b02      	cmp	r3, #2
 8008440:	f200 8083 	bhi.w	800854a <HAL_RCC_GetSysClockFreq+0x20a>
 8008444:	69fb      	ldr	r3, [r7, #28]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d003      	beq.n	8008452 <HAL_RCC_GetSysClockFreq+0x112>
 800844a:	69fb      	ldr	r3, [r7, #28]
 800844c:	2b01      	cmp	r3, #1
 800844e:	d038      	beq.n	80084c2 <HAL_RCC_GetSysClockFreq+0x182>
 8008450:	e07b      	b.n	800854a <HAL_RCC_GetSysClockFreq+0x20a>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8008452:	4b67      	ldr	r3, [pc, #412]	@ (80085f0 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f003 0320 	and.w	r3, r3, #32
 800845a:	2b00      	cmp	r3, #0
 800845c:	d02d      	beq.n	80084ba <HAL_RCC_GetSysClockFreq+0x17a>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800845e:	4b64      	ldr	r3, [pc, #400]	@ (80085f0 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	08db      	lsrs	r3, r3, #3
 8008464:	f003 0303 	and.w	r3, r3, #3
 8008468:	4a62      	ldr	r2, [pc, #392]	@ (80085f4 <HAL_RCC_GetSysClockFreq+0x2b4>)
 800846a:	fa22 f303 	lsr.w	r3, r2, r3
 800846e:	60fb      	str	r3, [r7, #12]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	ee07 3a90 	vmov	s15, r3
 8008476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800847a:	69bb      	ldr	r3, [r7, #24]
 800847c:	ee07 3a90 	vmov	s15, r3
 8008480:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008484:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008488:	4b59      	ldr	r3, [pc, #356]	@ (80085f0 <HAL_RCC_GetSysClockFreq+0x2b0>)
 800848a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800848c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008490:	ee07 3a90 	vmov	s15, r3
 8008494:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008498:	ed97 6a04 	vldr	s12, [r7, #16]
 800849c:	eddf 5a58 	vldr	s11, [pc, #352]	@ 8008600 <HAL_RCC_GetSysClockFreq+0x2c0>
 80084a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084b4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            else
            {
              /* Can't retrieve HSIDIV value */
              pllvco = (float_t)0;
            }
            break;
 80084b8:	e069      	b.n	800858e <HAL_RCC_GetSysClockFreq+0x24e>
              pllvco = (float_t)0;
 80084ba:	f04f 0300 	mov.w	r3, #0
 80084be:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80084c0:	e065      	b.n	800858e <HAL_RCC_GetSysClockFreq+0x24e>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80084c2:	69bb      	ldr	r3, [r7, #24]
 80084c4:	ee07 3a90 	vmov	s15, r3
 80084c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084cc:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 8008604 <HAL_RCC_GetSysClockFreq+0x2c4>
 80084d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084d4:	4b46      	ldr	r3, [pc, #280]	@ (80085f0 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80084d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084dc:	ee07 3a90 	vmov	s15, r3
 80084e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084e4:	ed97 6a04 	vldr	s12, [r7, #16]
 80084e8:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008600 <HAL_RCC_GetSysClockFreq+0x2c0>
 80084ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008500:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            break;
 8008504:	e043      	b.n	800858e <HAL_RCC_GetSysClockFreq+0x24e>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	ee07 3a90 	vmov	s15, r3
 800850c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008510:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008608 <HAL_RCC_GetSysClockFreq+0x2c8>
 8008514:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008518:	4b35      	ldr	r3, [pc, #212]	@ (80085f0 <HAL_RCC_GetSysClockFreq+0x2b0>)
 800851a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800851c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008520:	ee07 3a90 	vmov	s15, r3
 8008524:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008528:	ed97 6a04 	vldr	s12, [r7, #16]
 800852c:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008600 <HAL_RCC_GetSysClockFreq+0x2c0>
 8008530:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008534:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008538:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800853c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008540:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008544:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            break;
 8008548:	e021      	b.n	800858e <HAL_RCC_GetSysClockFreq+0x24e>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800854a:	69bb      	ldr	r3, [r7, #24]
 800854c:	ee07 3a90 	vmov	s15, r3
 8008550:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008554:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8008604 <HAL_RCC_GetSysClockFreq+0x2c4>
 8008558:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800855c:	4b24      	ldr	r3, [pc, #144]	@ (80085f0 <HAL_RCC_GetSysClockFreq+0x2b0>)
 800855e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008564:	ee07 3a90 	vmov	s15, r3
 8008568:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800856c:	ed97 6a04 	vldr	s12, [r7, #16]
 8008570:	eddf 5a23 	vldr	s11, [pc, #140]	@ 8008600 <HAL_RCC_GetSysClockFreq+0x2c0>
 8008574:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008578:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800857c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008580:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008584:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008588:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            break;
 800858c:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVP) >> RCC_PLL1DIVR1_DIVP_Pos) + 1U) ;
 800858e:	4b18      	ldr	r3, [pc, #96]	@ (80085f0 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8008590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008592:	0a5b      	lsrs	r3, r3, #9
 8008594:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008598:	3301      	adds	r3, #1
 800859a:	60bb      	str	r3, [r7, #8]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	ee07 3a90 	vmov	s15, r3
 80085a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80085a6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80085aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085b2:	ee17 3a90 	vmov	r3, s15
 80085b6:	623b      	str	r3, [r7, #32]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80085b8:	e005      	b.n	80085c6 <HAL_RCC_GetSysClockFreq+0x286>
        sysclockfreq = 0U;
 80085ba:	2300      	movs	r3, #0
 80085bc:	623b      	str	r3, [r7, #32]
      break;
 80085be:	e002      	b.n	80085c6 <HAL_RCC_GetSysClockFreq+0x286>

    default:
      sysclockfreq = CSI_VALUE;
 80085c0:	4b0d      	ldr	r3, [pc, #52]	@ (80085f8 <HAL_RCC_GetSysClockFreq+0x2b8>)
 80085c2:	623b      	str	r3, [r7, #32]
      break;
 80085c4:	bf00      	nop
  }

  prescaler = RCC->CDCFGR & RCC_CDCFGR_CPRE;
 80085c6:	4b0a      	ldr	r3, [pc, #40]	@ (80085f0 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80085c8:	699b      	ldr	r3, [r3, #24]
 80085ca:	f003 030f 	and.w	r3, r3, #15
 80085ce:	607b      	str	r3, [r7, #4]
  if (prescaler >= 8U)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2b07      	cmp	r3, #7
 80085d4:	d905      	bls.n	80085e2 <HAL_RCC_GetSysClockFreq+0x2a2>
  {
    sysclockfreq = sysclockfreq >> (prescaler - RCC_CDCFGR_CPRE_3 + 1U);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	3b07      	subs	r3, #7
 80085da:	6a3a      	ldr	r2, [r7, #32]
 80085dc:	fa22 f303 	lsr.w	r3, r2, r3
 80085e0:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80085e2:	6a3b      	ldr	r3, [r7, #32]
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	372c      	adds	r7, #44	@ 0x2c
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr
 80085f0:	58024400 	.word	0x58024400
 80085f4:	03d09000 	.word	0x03d09000
 80085f8:	003d0900 	.word	0x003d0900
 80085fc:	016e3600 	.word	0x016e3600
 8008600:	46000000 	.word	0x46000000
 8008604:	4a742400 	.word	0x4a742400
 8008608:	4bb71b00 	.word	0x4bb71b00

0800860c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b084      	sub	sp, #16
 8008610:	af00      	add	r7, sp, #0
  uint32_t clock;
  uint32_t prescaler;
  const uint8_t AHBPrescTable[8] = {1U, 2U, 3U, 4U, 6U, 7U, 8U, 9U};
 8008612:	4a10      	ldr	r2, [pc, #64]	@ (8008654 <HAL_RCC_GetHCLKFreq+0x48>)
 8008614:	463b      	mov	r3, r7
 8008616:	e892 0003 	ldmia.w	r2, {r0, r1}
 800861a:	e883 0003 	stmia.w	r3, {r0, r1}

  /* SysClk */
  clock = HAL_RCC_GetSysClockFreq();
 800861e:	f7ff fe8f 	bl	8008340 <HAL_RCC_GetSysClockFreq>
 8008622:	60f8      	str	r0, [r7, #12]
  /* Bus matrix divider */
  prescaler = (RCC->BMCFGR & RCC_BMCFGR_BMPRE) >> RCC_BMCFGR_BMPRE_Pos;
 8008624:	4b0c      	ldr	r3, [pc, #48]	@ (8008658 <HAL_RCC_GetHCLKFreq+0x4c>)
 8008626:	69db      	ldr	r3, [r3, #28]
 8008628:	f003 030f 	and.w	r3, r3, #15
 800862c:	60bb      	str	r3, [r7, #8]
  if (prescaler >= 8U)
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	2b07      	cmp	r3, #7
 8008632:	d909      	bls.n	8008648 <HAL_RCC_GetHCLKFreq+0x3c>
  {
    clock = clock >> AHBPrescTable[prescaler - 8U];
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	3b08      	subs	r3, #8
 8008638:	3310      	adds	r3, #16
 800863a:	443b      	add	r3, r7
 800863c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8008640:	461a      	mov	r2, r3
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	40d3      	lsrs	r3, r2
 8008646:	60fb      	str	r3, [r7, #12]
  }
  return (clock);
 8008648:	68fb      	ldr	r3, [r7, #12]
}
 800864a:	4618      	mov	r0, r3
 800864c:	3710      	adds	r7, #16
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
 8008652:	bf00      	nop
 8008654:	0800ee64 	.word	0x0800ee64
 8008658:	58024400 	.word	0x58024400

0800865c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
  uint32_t clock;
  uint32_t prescaler;
  /* Get HCLK source and compute PCLK1 frequency ---------------------------*/
  clock = HAL_RCC_GetHCLKFreq();
 8008662:	f7ff ffd3 	bl	800860c <HAL_RCC_GetHCLKFreq>
 8008666:	6078      	str	r0, [r7, #4]
  /* APB1 prescaler */
  prescaler = (RCC->APBCFGR & RCC_APBCFGR_PPRE1) >> RCC_APBCFGR_PPRE1_Pos;
 8008668:	4b09      	ldr	r3, [pc, #36]	@ (8008690 <HAL_RCC_GetPCLK1Freq+0x34>)
 800866a:	6a1b      	ldr	r3, [r3, #32]
 800866c:	f003 0307 	and.w	r3, r3, #7
 8008670:	603b      	str	r3, [r7, #0]
  if (prescaler >= 4U)
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	2b03      	cmp	r3, #3
 8008676:	d905      	bls.n	8008684 <HAL_RCC_GetPCLK1Freq+0x28>
  {
    clock = clock >> (prescaler - 3U);
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	3b03      	subs	r3, #3
 800867c:	687a      	ldr	r2, [r7, #4]
 800867e:	fa22 f303 	lsr.w	r3, r2, r3
 8008682:	607b      	str	r3, [r7, #4]
  }
  return (clock);
 8008684:	687b      	ldr	r3, [r7, #4]
}
 8008686:	4618      	mov	r0, r3
 8008688:	3708      	adds	r7, #8
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop
 8008690:	58024400 	.word	0x58024400

08008694 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b082      	sub	sp, #8
 8008698:	af00      	add	r7, sp, #0
  uint32_t clock;
  uint32_t prescaler;
  /* Get HCLK source and compute PCLK2 frequency ---------------------------*/
  clock = HAL_RCC_GetHCLKFreq();
 800869a:	f7ff ffb7 	bl	800860c <HAL_RCC_GetHCLKFreq>
 800869e:	6078      	str	r0, [r7, #4]
  /* APB2 prescaler */
  prescaler = (RCC->APBCFGR & RCC_APBCFGR_PPRE2) >> RCC_APBCFGR_PPRE2_Pos;
 80086a0:	4b09      	ldr	r3, [pc, #36]	@ (80086c8 <HAL_RCC_GetPCLK2Freq+0x34>)
 80086a2:	6a1b      	ldr	r3, [r3, #32]
 80086a4:	091b      	lsrs	r3, r3, #4
 80086a6:	f003 0307 	and.w	r3, r3, #7
 80086aa:	603b      	str	r3, [r7, #0]
  if (prescaler >= 4U)
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	2b03      	cmp	r3, #3
 80086b0:	d905      	bls.n	80086be <HAL_RCC_GetPCLK2Freq+0x2a>
  {
    clock = clock >> (prescaler - 3U);
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	3b03      	subs	r3, #3
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	fa22 f303 	lsr.w	r3, r2, r3
 80086bc:	607b      	str	r3, [r7, #4]
  }
  return (clock);
 80086be:	687b      	ldr	r3, [r7, #4]
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3708      	adds	r7, #8
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}
 80086c8:	58024400 	.word	0x58024400

080086cc <HAL_RCC_GetPCLK4Freq>:
  * @note   Each time PCLK4 changes, this function must be called to update the
  *         right PCLK4 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK4 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK4Freq(void)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
  uint32_t clock;
  uint32_t prescaler;
  /* Get HCLK source and compute PCLK4 frequency ---------------------------*/
  clock = HAL_RCC_GetHCLKFreq();
 80086d2:	f7ff ff9b 	bl	800860c <HAL_RCC_GetHCLKFreq>
 80086d6:	6078      	str	r0, [r7, #4]
  /* APB4 prescaler */
  prescaler = (RCC->APBCFGR & RCC_APBCFGR_PPRE4) >> RCC_APBCFGR_PPRE4_Pos;
 80086d8:	4b09      	ldr	r3, [pc, #36]	@ (8008700 <HAL_RCC_GetPCLK4Freq+0x34>)
 80086da:	6a1b      	ldr	r3, [r3, #32]
 80086dc:	0a1b      	lsrs	r3, r3, #8
 80086de:	f003 0307 	and.w	r3, r3, #7
 80086e2:	603b      	str	r3, [r7, #0]
  if (prescaler >= 4U)
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	2b03      	cmp	r3, #3
 80086e8:	d905      	bls.n	80086f6 <HAL_RCC_GetPCLK4Freq+0x2a>
  {
    clock = clock >> (prescaler - 3U);
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	3b03      	subs	r3, #3
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	fa22 f303 	lsr.w	r3, r2, r3
 80086f4:	607b      	str	r3, [r7, #4]
  }
  return (clock);
 80086f6:	687b      	ldr	r3, [r7, #4]
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3708      	adds	r7, #8
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}
 8008700:	58024400 	.word	0x58024400

08008704 <HAL_RCC_GetPLL2QFreq>:
/**
  * @brief  Return the PLL2Q frequency.
  * @retval PLL2Q frequency in Hz
  */
uint32_t HAL_RCC_GetPLL2QFreq(void)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
  uint32_t pllq;

  /* PLL2Q divider */
  pllq = ((RCC->PLL2DIVR1 & RCC_PLL2DIVR1_DIVQ) >> RCC_PLL2DIVR1_DIVQ_Pos) + 1U;
 800870a:	4b08      	ldr	r3, [pc, #32]	@ (800872c <HAL_RCC_GetPLL2QFreq+0x28>)
 800870c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800870e:	0c1b      	lsrs	r3, r3, #16
 8008710:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008714:	3301      	adds	r3, #1
 8008716:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL2Q one */
  return ((uint32_t)RCC_PLL2_GetVCOOutputFreq() / pllq);
 8008718:	f000 f820 	bl	800875c <RCC_PLL2_GetVCOOutputFreq>
 800871c:	4602      	mov	r2, r0
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8008724:	4618      	mov	r0, r3
 8008726:	3708      	adds	r7, #8
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}
 800872c:	58024400 	.word	0x58024400

08008730 <HAL_RCC_GetPLL3QFreq>:
/**
  * @brief  Return the PLL3Q frequency.
  * @retval PLL3Q frequency in Hz
  */
uint32_t HAL_RCC_GetPLL3QFreq(void)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b082      	sub	sp, #8
 8008734:	af00      	add	r7, sp, #0
  uint32_t pllq;

  /* PLL3Q divider */
  pllq = ((RCC->PLL3DIVR1 & RCC_PLL3DIVR1_DIVQ) >> RCC_PLL3DIVR1_DIVQ_Pos) + 1U;
 8008736:	4b08      	ldr	r3, [pc, #32]	@ (8008758 <HAL_RCC_GetPLL3QFreq+0x28>)
 8008738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800873a:	0c1b      	lsrs	r3, r3, #16
 800873c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008740:	3301      	adds	r3, #1
 8008742:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL3Q one */
  return ((uint32_t)RCC_PLL3_GetVCOOutputFreq() / pllq);
 8008744:	f000 f890 	bl	8008868 <RCC_PLL3_GetVCOOutputFreq>
 8008748:	4602      	mov	r2, r0
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8008750:	4618      	mov	r0, r3
 8008752:	3708      	adds	r7, #8
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}
 8008758:	58024400 	.word	0x58024400

0800875c <RCC_PLL2_GetVCOOutputFreq>:
/**
  * @brief  Compute PLL2 VCO output frequency
  * @retval Value of PLL2 VCO output frequency
  */
static uint32_t RCC_PLL2_GetVCOOutputFreq(void)
{
 800875c:	b480      	push	{r7}
 800875e:	b089      	sub	sp, #36	@ 0x24
 8008760:	af00      	add	r7, sp, #0
  uint32_t plln;
  uint32_t pllfracn;
  float_t frequency;

  /* Get PLL2 CKSELR and DIVR register values */
  tmpreg1 = RCC->PLLCKSELR;
 8008762:	4b3c      	ldr	r3, [pc, #240]	@ (8008854 <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 8008764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008766:	617b      	str	r3, [r7, #20]
  tmpreg2 = RCC->PLL2DIVR1;
 8008768:	4b3a      	ldr	r3, [pc, #232]	@ (8008854 <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 800876a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800876c:	613b      	str	r3, [r7, #16]

  /* Retrieve PLL2 multiplication factor and divider */
  pllm = (tmpreg1 & RCC_PLLCKSELR_DIVM2) >> RCC_PLLCKSELR_DIVM2_Pos;
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	0b1b      	lsrs	r3, r3, #12
 8008772:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008776:	60fb      	str	r3, [r7, #12]
  plln = (tmpreg2 & RCC_PLL2DIVR1_DIVN) + 1U;
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800877e:	3301      	adds	r3, #1
 8008780:	60bb      	str	r3, [r7, #8]

  if (pllm == 0U)
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d101      	bne.n	800878c <RCC_PLL2_GetVCOOutputFreq+0x30>
  {
    /* Prescaler disabled */
    return 0U;
 8008788:	2300      	movs	r3, #0
 800878a:	e05c      	b.n	8008846 <RCC_PLL2_GetVCOOutputFreq+0xea>
  }

  /* Check if fractional part is enable */
  if ((RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) != 0U)
 800878c:	4b31      	ldr	r3, [pc, #196]	@ (8008854 <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 800878e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008790:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008794:	2b00      	cmp	r3, #0
 8008796:	d006      	beq.n	80087a6 <RCC_PLL2_GetVCOOutputFreq+0x4a>
  {
    pllfracn = (RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN) >> RCC_PLL2FRACR_FRACN_Pos;
 8008798:	4b2e      	ldr	r3, [pc, #184]	@ (8008854 <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 800879a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800879c:	08db      	lsrs	r3, r3, #3
 800879e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80087a2:	61bb      	str	r3, [r7, #24]
 80087a4:	e001      	b.n	80087aa <RCC_PLL2_GetVCOOutputFreq+0x4e>
  }
  else
  {
    pllfracn = 0U;
 80087a6:	2300      	movs	r3, #0
 80087a8:	61bb      	str	r3, [r7, #24]
  }

  /* determine PLL source */
  switch (tmpreg1 & RCC_PLLCKSELR_PLLSRC)
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	f003 0303 	and.w	r3, r3, #3
 80087b0:	2b02      	cmp	r3, #2
 80087b2:	d019      	beq.n	80087e8 <RCC_PLL2_GetVCOOutputFreq+0x8c>
 80087b4:	2b02      	cmp	r3, #2
 80087b6:	d81d      	bhi.n	80087f4 <RCC_PLL2_GetVCOOutputFreq+0x98>
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d002      	beq.n	80087c2 <RCC_PLL2_GetVCOOutputFreq+0x66>
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d016      	beq.n	80087ee <RCC_PLL2_GetVCOOutputFreq+0x92>
 80087c0:	e018      	b.n	80087f4 <RCC_PLL2_GetVCOOutputFreq+0x98>
  {
    /* HSI used as PLL2 clock source */
    case RCC_PLLSOURCE_HSI:
      if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 80087c2:	4b24      	ldr	r3, [pc, #144]	@ (8008854 <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f003 0320 	and.w	r3, r3, #32
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d009      	beq.n	80087e2 <RCC_PLL2_GetVCOOutputFreq+0x86>
      {
        pllsrc = HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV) >> RCC_CR_HSIDIV_Pos);
 80087ce:	4b21      	ldr	r3, [pc, #132]	@ (8008854 <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	08db      	lsrs	r3, r3, #3
 80087d4:	f003 0303 	and.w	r3, r3, #3
 80087d8:	4a1f      	ldr	r2, [pc, #124]	@ (8008858 <RCC_PLL2_GetVCOOutputFreq+0xfc>)
 80087da:	fa22 f303 	lsr.w	r3, r2, r3
 80087de:	61fb      	str	r3, [r7, #28]
      else
      {
        /* Can't retrieve HSIDIV value */
        pllsrc = 0U;
      }
      break;
 80087e0:	e00b      	b.n	80087fa <RCC_PLL2_GetVCOOutputFreq+0x9e>
        pllsrc = 0U;
 80087e2:	2300      	movs	r3, #0
 80087e4:	61fb      	str	r3, [r7, #28]
      break;
 80087e6:	e008      	b.n	80087fa <RCC_PLL2_GetVCOOutputFreq+0x9e>

    /* HSE used as PLL2 clock source */
    case RCC_PLLSOURCE_HSE:
      pllsrc = HSE_VALUE;
 80087e8:	4b1c      	ldr	r3, [pc, #112]	@ (800885c <RCC_PLL2_GetVCOOutputFreq+0x100>)
 80087ea:	61fb      	str	r3, [r7, #28]
      break;
 80087ec:	e005      	b.n	80087fa <RCC_PLL2_GetVCOOutputFreq+0x9e>

    /* CSI used as PLL2 clock source */
    case RCC_PLLSOURCE_CSI:
      pllsrc = CSI_VALUE;
 80087ee:	4b1c      	ldr	r3, [pc, #112]	@ (8008860 <RCC_PLL2_GetVCOOutputFreq+0x104>)
 80087f0:	61fb      	str	r3, [r7, #28]
      break;
 80087f2:	e002      	b.n	80087fa <RCC_PLL2_GetVCOOutputFreq+0x9e>

    default:
      pllsrc = 0U;
 80087f4:	2300      	movs	r3, #0
 80087f6:	61fb      	str	r3, [r7, #28]
      break;
 80087f8:	bf00      	nop
  }

  /* Compute VCO output frequency */
  frequency = ((float_t)pllsrc / (float_t)pllm) * ((float_t)plln + ((float_t)pllfracn / (float_t)0x2000U));
 80087fa:	69fb      	ldr	r3, [r7, #28]
 80087fc:	ee07 3a90 	vmov	s15, r3
 8008800:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	ee07 3a90 	vmov	s15, r3
 800880a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800880e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	ee07 3a90 	vmov	s15, r3
 8008818:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800881c:	69bb      	ldr	r3, [r7, #24]
 800881e:	ee07 3a90 	vmov	s15, r3
 8008822:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8008826:	eddf 5a0f 	vldr	s11, [pc, #60]	@ 8008864 <RCC_PLL2_GetVCOOutputFreq+0x108>
 800882a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800882e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008836:	edc7 7a01 	vstr	s15, [r7, #4]
  
  return (uint32_t)frequency;
 800883a:	edd7 7a01 	vldr	s15, [r7, #4]
 800883e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008842:	ee17 3a90 	vmov	r3, s15
}
 8008846:	4618      	mov	r0, r3
 8008848:	3724      	adds	r7, #36	@ 0x24
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr
 8008852:	bf00      	nop
 8008854:	58024400 	.word	0x58024400
 8008858:	03d09000 	.word	0x03d09000
 800885c:	016e3600 	.word	0x016e3600
 8008860:	003d0900 	.word	0x003d0900
 8008864:	46000000 	.word	0x46000000

08008868 <RCC_PLL3_GetVCOOutputFreq>:
/**
  * @brief  Compute PLL3 VCO output frequency
  * @retval Value of PLL3 VCO output frequency
  */
static uint32_t RCC_PLL3_GetVCOOutputFreq(void)
{
 8008868:	b480      	push	{r7}
 800886a:	b089      	sub	sp, #36	@ 0x24
 800886c:	af00      	add	r7, sp, #0
  uint32_t plln;
  uint32_t pllfracn;
  float_t frequency;

  /* Get PLL3 CKSELR and DIVR register values */
  tmpreg1 = RCC->PLLCKSELR;
 800886e:	4b3c      	ldr	r3, [pc, #240]	@ (8008960 <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 8008870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008872:	617b      	str	r3, [r7, #20]
  tmpreg2 = RCC->PLL3DIVR1;
 8008874:	4b3a      	ldr	r3, [pc, #232]	@ (8008960 <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 8008876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008878:	613b      	str	r3, [r7, #16]

  /* Retrieve PLL3 multiplication factor and divider */
  pllm = (tmpreg1 & RCC_PLLCKSELR_DIVM3) >> RCC_PLLCKSELR_DIVM3_Pos;
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	0d1b      	lsrs	r3, r3, #20
 800887e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008882:	60fb      	str	r3, [r7, #12]
  plln = (tmpreg2 & RCC_PLL3DIVR1_DIVN) + 1U;
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800888a:	3301      	adds	r3, #1
 800888c:	60bb      	str	r3, [r7, #8]

  if (pllm == 0U)
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d101      	bne.n	8008898 <RCC_PLL3_GetVCOOutputFreq+0x30>
  {
    /* Prescaler disabled */
    return 0U;
 8008894:	2300      	movs	r3, #0
 8008896:	e05c      	b.n	8008952 <RCC_PLL3_GetVCOOutputFreq+0xea>
  }

  /* Check if fractional part is enable */
  if ((RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) != 0U)
 8008898:	4b31      	ldr	r3, [pc, #196]	@ (8008960 <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 800889a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800889c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d006      	beq.n	80088b2 <RCC_PLL3_GetVCOOutputFreq+0x4a>
  {
    pllfracn = (RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN) >> RCC_PLL3FRACR_FRACN_Pos;
 80088a4:	4b2e      	ldr	r3, [pc, #184]	@ (8008960 <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 80088a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088a8:	08db      	lsrs	r3, r3, #3
 80088aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80088ae:	61bb      	str	r3, [r7, #24]
 80088b0:	e001      	b.n	80088b6 <RCC_PLL3_GetVCOOutputFreq+0x4e>
  }
  else
  {
    pllfracn = 0U;
 80088b2:	2300      	movs	r3, #0
 80088b4:	61bb      	str	r3, [r7, #24]
  }

  /* determine PLL source */
  switch (tmpreg1 & RCC_PLLCKSELR_PLLSRC)
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	f003 0303 	and.w	r3, r3, #3
 80088bc:	2b02      	cmp	r3, #2
 80088be:	d019      	beq.n	80088f4 <RCC_PLL3_GetVCOOutputFreq+0x8c>
 80088c0:	2b02      	cmp	r3, #2
 80088c2:	d81d      	bhi.n	8008900 <RCC_PLL3_GetVCOOutputFreq+0x98>
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d002      	beq.n	80088ce <RCC_PLL3_GetVCOOutputFreq+0x66>
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	d016      	beq.n	80088fa <RCC_PLL3_GetVCOOutputFreq+0x92>
 80088cc:	e018      	b.n	8008900 <RCC_PLL3_GetVCOOutputFreq+0x98>
  {
    /* HSI used as PLL3 clock source */
    case RCC_PLLSOURCE_HSI:
      if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 80088ce:	4b24      	ldr	r3, [pc, #144]	@ (8008960 <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f003 0320 	and.w	r3, r3, #32
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d009      	beq.n	80088ee <RCC_PLL3_GetVCOOutputFreq+0x86>
      {
        pllsrc = HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV) >> RCC_CR_HSIDIV_Pos);
 80088da:	4b21      	ldr	r3, [pc, #132]	@ (8008960 <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	08db      	lsrs	r3, r3, #3
 80088e0:	f003 0303 	and.w	r3, r3, #3
 80088e4:	4a1f      	ldr	r2, [pc, #124]	@ (8008964 <RCC_PLL3_GetVCOOutputFreq+0xfc>)
 80088e6:	fa22 f303 	lsr.w	r3, r2, r3
 80088ea:	61fb      	str	r3, [r7, #28]
      else
      {
        /* Can't retrieve HSIDIV value */
        pllsrc = 0U;
      }
      break;
 80088ec:	e00b      	b.n	8008906 <RCC_PLL3_GetVCOOutputFreq+0x9e>
        pllsrc = 0U;
 80088ee:	2300      	movs	r3, #0
 80088f0:	61fb      	str	r3, [r7, #28]
      break;
 80088f2:	e008      	b.n	8008906 <RCC_PLL3_GetVCOOutputFreq+0x9e>

    /* HSE used as PLL3 clock source */
    case RCC_PLLSOURCE_HSE:
      pllsrc = HSE_VALUE;
 80088f4:	4b1c      	ldr	r3, [pc, #112]	@ (8008968 <RCC_PLL3_GetVCOOutputFreq+0x100>)
 80088f6:	61fb      	str	r3, [r7, #28]
      break;
 80088f8:	e005      	b.n	8008906 <RCC_PLL3_GetVCOOutputFreq+0x9e>

    /* CSI used as PLL3 clock source */
    case RCC_PLLSOURCE_CSI:
      pllsrc = CSI_VALUE;
 80088fa:	4b1c      	ldr	r3, [pc, #112]	@ (800896c <RCC_PLL3_GetVCOOutputFreq+0x104>)
 80088fc:	61fb      	str	r3, [r7, #28]
      break;
 80088fe:	e002      	b.n	8008906 <RCC_PLL3_GetVCOOutputFreq+0x9e>

    default:
      pllsrc = 0U;
 8008900:	2300      	movs	r3, #0
 8008902:	61fb      	str	r3, [r7, #28]
      break;
 8008904:	bf00      	nop
  }

  /* Compute VCO output frequency */
  frequency = ((float_t)pllsrc / (float_t)pllm) * ((float_t)plln + ((float_t)pllfracn / (float_t)0x2000U));
 8008906:	69fb      	ldr	r3, [r7, #28]
 8008908:	ee07 3a90 	vmov	s15, r3
 800890c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	ee07 3a90 	vmov	s15, r3
 8008916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800891a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	ee07 3a90 	vmov	s15, r3
 8008924:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008928:	69bb      	ldr	r3, [r7, #24]
 800892a:	ee07 3a90 	vmov	s15, r3
 800892e:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8008932:	eddf 5a0f 	vldr	s11, [pc, #60]	@ 8008970 <RCC_PLL3_GetVCOOutputFreq+0x108>
 8008936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800893a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800893e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008942:	edc7 7a01 	vstr	s15, [r7, #4]
  
  return (uint32_t)frequency;
 8008946:	edd7 7a01 	vldr	s15, [r7, #4]
 800894a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800894e:	ee17 3a90 	vmov	r3, s15
}
 8008952:	4618      	mov	r0, r3
 8008954:	3724      	adds	r7, #36	@ 0x24
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr
 800895e:	bf00      	nop
 8008960:	58024400 	.word	0x58024400
 8008964:	03d09000 	.word	0x03d09000
 8008968:	016e3600 	.word	0x016e3600
 800896c:	003d0900 	.word	0x003d0900
 8008970:	46000000 	.word	0x46000000

08008974 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b086      	sub	sp, #24
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800897c:	2300      	movs	r3, #0
 800897e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008980:	2300      	movs	r3, #0
 8008982:	75bb      	strb	r3, [r7, #22]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- RTC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800898c:	2b00      	cmp	r3, #0
 800898e:	f000 8081 	beq.w	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x120>
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As the RTC clock source selection can be changed only if the Backup Domain is reset */
    /* reset the Backup domain only if the RTC Clock source selection is modified from default reset value */
    tmpreg = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008992:	4b8c      	ldr	r3, [pc, #560]	@ (8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8008994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008996:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800899a:	613b      	str	r3, [r7, #16]

    if ((tmpreg != RCC_RTCCLKSOURCE_DISABLE) && (tmpreg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d029      	beq.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x82>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80089a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80089aa:	693a      	ldr	r2, [r7, #16]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d022      	beq.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80089b0:	4b85      	ldr	r3, [pc, #532]	@ (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4a84      	ldr	r2, [pc, #528]	@ (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80089b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80089ba:	6013      	str	r3, [r2, #0]

      /* Read back to check Backup domain enabled */
      if (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80089bc:	4b82      	ldr	r3, [pc, #520]	@ (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d102      	bne.n	80089ce <HAL_RCCEx_PeriphCLKConfig+0x5a>
      {
        ret = HAL_ERROR;
 80089c8:	2301      	movs	r3, #1
 80089ca:	75fb      	strb	r3, [r7, #23]
 80089cc:	e013      	b.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x82>
      }
      else
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        /* excepted the RTC clock source selection that will be changed */
        tmpreg = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80089ce:	4b7d      	ldr	r3, [pc, #500]	@ (8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80089d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80089d6:	613b      	str	r3, [r7, #16]
        __HAL_RCC_BACKUPRESET_FORCE();
 80089d8:	4b7a      	ldr	r3, [pc, #488]	@ (8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80089da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089dc:	4a79      	ldr	r2, [pc, #484]	@ (8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80089de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80089e2:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80089e4:	4b77      	ldr	r3, [pc, #476]	@ (8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80089e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089e8:	4a76      	ldr	r2, [pc, #472]	@ (8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80089ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80089ee:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the content of BDCR register */
        WRITE_REG(RCC->BDCR, tmpreg);
 80089f0:	4a74      	ldr	r2, [pc, #464]	@ (8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	6713      	str	r3, [r2, #112]	@ 0x70
      }
    }

    if (ret == HAL_OK)
 80089f6:	7dfb      	ldrb	r3, [r7, #23]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d149      	bne.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008a00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a04:	d115      	bne.n	8008a32 <HAL_RCCEx_PeriphCLKConfig+0xbe>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a06:	f7f9 fa1d 	bl	8001e44 <HAL_GetTick>
 8008a0a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a0c:	e00b      	b.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a0e:	f7f9 fa19 	bl	8001e44 <HAL_GetTick>
 8008a12:	4602      	mov	r2, r0
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	1ad3      	subs	r3, r2, r3
 8008a18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d902      	bls.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0xb2>
          {
            ret = HAL_TIMEOUT;
 8008a20:	2303      	movs	r3, #3
 8008a22:	75fb      	strb	r3, [r7, #23]
            break;
 8008a24:	e005      	b.n	8008a32 <HAL_RCCEx_PeriphCLKConfig+0xbe>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a26:	4b67      	ldr	r3, [pc, #412]	@ (8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8008a28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a2a:	f003 0302 	and.w	r3, r3, #2
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d0ed      	beq.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x9a>
          }
        }
      }

      if (ret == HAL_OK)
 8008a32:	7dfb      	ldrb	r3, [r7, #23]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d128      	bne.n	8008a8a <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008a3c:	f403 337c 	and.w	r3, r3, #258048	@ 0x3f000
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d00c      	beq.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0xea>
 8008a44:	4b5f      	ldr	r3, [pc, #380]	@ (8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8008a46:	691b      	ldr	r3, [r3, #16]
 8008a48:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008a50:	0919      	lsrs	r1, r3, #4
 8008a52:	4b5e      	ldr	r3, [pc, #376]	@ (8008bcc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008a54:	400b      	ands	r3, r1
 8008a56:	495b      	ldr	r1, [pc, #364]	@ (8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	610b      	str	r3, [r1, #16]
 8008a5c:	e005      	b.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8008a5e:	4b59      	ldr	r3, [pc, #356]	@ (8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8008a60:	691b      	ldr	r3, [r3, #16]
 8008a62:	4a58      	ldr	r2, [pc, #352]	@ (8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8008a64:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008a68:	6113      	str	r3, [r2, #16]
 8008a6a:	4b56      	ldr	r3, [pc, #344]	@ (8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8008a6c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008a72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008a76:	4953      	ldr	r1, [pc, #332]	@ (8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	670b      	str	r3, [r1, #112]	@ 0x70
        __HAL_RCC_RTC_ENABLE();
 8008a7c:	4b51      	ldr	r3, [pc, #324]	@ (8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8008a7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a80:	4a50      	ldr	r2, [pc, #320]	@ (8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8008a82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a86:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a88:	e004      	b.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x120>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008a8a:	7dfb      	ldrb	r3, [r7, #23]
 8008a8c:	75bb      	strb	r3, [r7, #22]
 8008a8e:	e001      	b.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x120>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a90:	7dfb      	ldrb	r3, [r7, #23]
 8008a92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- FMC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f003 0301 	and.w	r3, r3, #1
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d030      	beq.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));

    switch (PeriphClkInit->FmcClockSelection)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	2b03      	cmp	r3, #3
 8008aa6:	d819      	bhi.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0x168>
 8008aa8:	a201      	add	r2, pc, #4	@ (adr r2, 8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aae:	bf00      	nop
 8008ab0:	08008ae3 	.word	0x08008ae3
 8008ab4:	08008ac1 	.word	0x08008ac1
 8008ab8:	08008acf 	.word	0x08008acf
 8008abc:	08008ae3 	.word	0x08008ae3
      case RCC_FMCCLKSOURCE_HCLK:   /* HCLK  clock selected as FMC kernel peripheral clock */
        break;

      case RCC_FMCCLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for FMC kernel */
        /* Enable FMC kernel clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 8008ac0:	4b40      	ldr	r3, [pc, #256]	@ (8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8008ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ac4:	4a3f      	ldr	r2, [pc, #252]	@ (8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8008ac6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008aca:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FMC kernel clock source configuration done later after clock selection check */
        break;
 8008acc:	e00a      	b.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x170>

      case RCC_FMCCLKSOURCE_PLL2R:  /* PLL2_R is used as clock source for FMC kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_RCLK);
 8008ace:	4b3d      	ldr	r3, [pc, #244]	@ (8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8008ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ad2:	4a3c      	ldr	r2, [pc, #240]	@ (8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8008ad4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008ad8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FMC kernel clock source configuration done later after clock selection check */
        break;
 8008ada:	e003      	b.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x170>
      case RCC_FMCCLKSOURCE_HSI:   /* HSI oscillator is used as clock source for FMC kernel */
        /* FMC kernel clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008adc:	2301      	movs	r3, #1
 8008ade:	75fb      	strb	r3, [r7, #23]
        break;
 8008ae0:	e000      	b.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x170>
        break;
 8008ae2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ae4:	7dfb      	ldrb	r3, [r7, #23]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d109      	bne.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0x18a>
    {
      /* Set the source of FMC kernel clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008aea:	4b36      	ldr	r3, [pc, #216]	@ (8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8008aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008aee:	f023 0203 	bic.w	r2, r3, #3
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	4933      	ldr	r1, [pc, #204]	@ (8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8008af8:	4313      	orrs	r3, r2
 8008afa:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8008afc:	e001      	b.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0x18e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008afe:	7dfb      	ldrb	r3, [r7, #23]
 8008b00:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- XSPI1 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI1) == RCC_PERIPHCLK_XSPI1)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f003 0302 	and.w	r3, r3, #2
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d02a      	beq.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI1CLKSOURCE(PeriphClkInit->Xspi1ClockSelection));

    switch (PeriphClkInit->Xspi1ClockSelection)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	689b      	ldr	r3, [r3, #8]
 8008b12:	2b20      	cmp	r3, #32
 8008b14:	d00c      	beq.n	8008b30 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
 8008b16:	2b20      	cmp	r3, #32
 8008b18:	d811      	bhi.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d012      	beq.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 8008b1e:	2b10      	cmp	r3, #16
 8008b20:	d10d      	bne.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      case RCC_XSPI1CLKSOURCE_HCLK:   /* HCLK is used as clock source for Xspi1 */
        /* Nothing to do */
        break;

      case RCC_XSPI1CLKSOURCE_PLL2S:  /* PLL2_S is used as clock source for Xspi1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_SCLK);
 8008b22:	4b28      	ldr	r3, [pc, #160]	@ (8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8008b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b26:	4a27      	ldr	r2, [pc, #156]	@ (8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8008b28:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008b2c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI1 clock source configuration done later after clock selection check */
        break;
 8008b2e:	e00a      	b.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x1d2>

      case RCC_XSPI1CLKSOURCE_PLL2T:  /* PLL2_T is used as clock source for Xspi1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_TCLK);
 8008b30:	4b24      	ldr	r3, [pc, #144]	@ (8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8008b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b34:	4a23      	ldr	r2, [pc, #140]	@ (8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8008b36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008b3a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI1 clock source configuration done later after clock selection check */
        break;
 8008b3c:	e003      	b.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x1d2>

      default:
        ret = HAL_ERROR;
 8008b3e:	2301      	movs	r3, #1
 8008b40:	75fb      	strb	r3, [r7, #23]
        break;
 8008b42:	e000      	b.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
        break;
 8008b44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b46:	7dfb      	ldrb	r3, [r7, #23]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d109      	bne.n	8008b60 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      /* Configure the XSPI1 clock source */
      __HAL_RCC_XSPI1_CONFIG(PeriphClkInit->Xspi1ClockSelection);
 8008b4c:	4b1d      	ldr	r3, [pc, #116]	@ (8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8008b4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b50:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	491a      	ldr	r1, [pc, #104]	@ (8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8008b5e:	e001      	b.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b60:	7dfb      	ldrb	r3, [r7, #23]
 8008b62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- XSPI2 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI2) == RCC_PERIPHCLK_XSPI2)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f003 0304 	and.w	r3, r3, #4
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d031      	beq.n	8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI2CLKSOURCE(PeriphClkInit->Xspi2ClockSelection));

    switch (PeriphClkInit->Xspi2ClockSelection)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	68db      	ldr	r3, [r3, #12]
 8008b74:	2b80      	cmp	r3, #128	@ 0x80
 8008b76:	d00c      	beq.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8008b78:	2b80      	cmp	r3, #128	@ 0x80
 8008b7a:	d811      	bhi.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d012      	beq.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8008b80:	2b40      	cmp	r3, #64	@ 0x40
 8008b82:	d10d      	bne.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
      case RCC_XSPI2CLKSOURCE_HCLK:   /* HCLK is used as clock source for Xspi2 */
        /* Nothing to do */
        break;

      case RCC_XSPI2CLKSOURCE_PLL2S:  /* PLL2_S is used as clock source for Xspi2 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_SCLK);
 8008b84:	4b0f      	ldr	r3, [pc, #60]	@ (8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8008b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b88:	4a0e      	ldr	r2, [pc, #56]	@ (8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8008b8a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008b8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI2 clock source configuration done later after clock selection check */
        break;
 8008b90:	e00a      	b.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x234>

      case RCC_XSPI2CLKSOURCE_PLL2T:  /* PLL2_T is used as clock source for Xspi2 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_TCLK);
 8008b92:	4b0c      	ldr	r3, [pc, #48]	@ (8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8008b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b96:	4a0b      	ldr	r2, [pc, #44]	@ (8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8008b98:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008b9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI2 clock source configuration done later after clock selection check */
        break;
 8008b9e:	e003      	b.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x234>

      default:
        ret = HAL_ERROR;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	75fb      	strb	r3, [r7, #23]
        break;
 8008ba4:	e000      	b.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        break;
 8008ba6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ba8:	7dfb      	ldrb	r3, [r7, #23]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d110      	bne.n	8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    {
      /* Configure the XSPI2 clock source */
      __HAL_RCC_XSPI2_CONFIG(PeriphClkInit->Xspi2ClockSelection);
 8008bae:	4b05      	ldr	r3, [pc, #20]	@ (8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8008bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008bb2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	68db      	ldr	r3, [r3, #12]
 8008bba:	4902      	ldr	r1, [pc, #8]	@ (8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8008bc0:	e008      	b.n	8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>
 8008bc2:	bf00      	nop
 8008bc4:	58024400 	.word	0x58024400
 8008bc8:	58024800 	.word	0x58024800
 8008bcc:	0fffffcf 	.word	0x0fffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bd0:	7dfb      	ldrb	r3, [r7, #23]
 8008bd2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f003 0308 	and.w	r3, r3, #8
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d008      	beq.n	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008be0:	4b93      	ldr	r3, [pc, #588]	@ (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8008be2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008be4:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	691b      	ldr	r3, [r3, #16]
 8008bec:	4990      	ldr	r1, [pc, #576]	@ (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	64cb      	str	r3, [r1, #76]	@ 0x4c
  }

  /*------------------------------------- SDMMC12 Configuration ------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC12) == RCC_PERIPHCLK_SDMMC12)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d026      	beq.n	8008c4c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC12CLKSOURCE(PeriphClkInit->Sdmmc12ClockSelection));

    switch (PeriphClkInit->Sdmmc12ClockSelection)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d002      	beq.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008c06:	2b04      	cmp	r3, #4
 8008c08:	d007      	beq.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008c0a:	e00d      	b.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      case RCC_SDMMC12CLKSOURCE_PLL2S:  /* PLL2_S is used as clock source for SDMMC12 kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_SCLK);
 8008c0c:	4b88      	ldr	r3, [pc, #544]	@ (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8008c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c10:	4a87      	ldr	r2, [pc, #540]	@ (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8008c12:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008c16:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SDMMC12 kernel clock source configuration done later after clock selection check */
        break;
 8008c18:	e009      	b.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0x2ba>

      case RCC_SDMMC12CLKSOURCE_PLL2T:  /* PLL2_T is used as clock source for SDMMC12 kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_TCLK);
 8008c1a:	4b85      	ldr	r3, [pc, #532]	@ (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8008c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c1e:	4a84      	ldr	r2, [pc, #528]	@ (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8008c20:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008c24:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SDMMC12 kernel clock source configuration done later after clock selection check */
        break;
 8008c26:	e002      	b.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0x2ba>

      default:
        ret = HAL_ERROR;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	75fb      	strb	r3, [r7, #23]
        break;
 8008c2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c2e:	7dfb      	ldrb	r3, [r7, #23]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d109      	bne.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
    {
      /* Set the source of SDMMC12 clock*/
      __HAL_RCC_SDMMC12_CONFIG(PeriphClkInit->Sdmmc12ClockSelection);
 8008c34:	4b7e      	ldr	r3, [pc, #504]	@ (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8008c36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c38:	f023 0204 	bic.w	r2, r3, #4
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c40:	497b      	ldr	r1, [pc, #492]	@ (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8008c42:	4313      	orrs	r3, r2
 8008c44:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8008c46:	e001      	b.n	8008c4c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c48:	7dfb      	ldrb	r3, [r7, #23]
 8008c4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f003 0310 	and.w	r3, r3, #16
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d02e      	beq.n	8008cb6 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    switch (PeriphClkInit->AdcClockSelection)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	695b      	ldr	r3, [r3, #20]
 8008c5c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008c60:	d019      	beq.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0x322>
 8008c62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008c66:	d813      	bhi.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d003      	beq.n	8008c74 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8008c6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008c70:	d007      	beq.n	8008c82 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8008c72:	e00d      	b.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0x31c>
    {

      case RCC_ADCCLKSOURCE_PLL2P: /* PLL2_P is used as clock source for ADC */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8008c74:	4b6e      	ldr	r3, [pc, #440]	@ (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8008c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c78:	4a6d      	ldr	r2, [pc, #436]	@ (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8008c7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008c7e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADC clock source configuration done later after clock selection check */
        break;
 8008c80:	e00a      	b.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0x324>

      case RCC_ADCCLKSOURCE_PLL3R: /* PLL3_R is used as clock source for ADC */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8008c82:	4b6b      	ldr	r3, [pc, #428]	@ (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8008c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c86:	4a6a      	ldr	r2, [pc, #424]	@ (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8008c88:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008c8c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADC clock source configuration done later after clock selection check */
        break;
 8008c8e:	e003      	b.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0x324>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c90:	2301      	movs	r3, #1
 8008c92:	75fb      	strb	r3, [r7, #23]
        break;
 8008c94:	e000      	b.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0x324>
        break;
 8008c96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c98:	7dfb      	ldrb	r3, [r7, #23]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d109      	bne.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008c9e:	4b64      	ldr	r3, [pc, #400]	@ (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8008ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ca2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	695b      	ldr	r3, [r3, #20]
 8008caa:	4961      	ldr	r1, [pc, #388]	@ (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8008cac:	4313      	orrs	r3, r2
 8008cae:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8008cb0:	e001      	b.n	8008cb6 <HAL_RCCEx_PeriphCLKConfig+0x342>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cb2:	7dfb      	ldrb	r3, [r7, #23]
 8008cb4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- ADF1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f003 0320 	and.w	r3, r3, #32
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d03f      	beq.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(PeriphClkInit->Adf1ClockSelection));

    switch (PeriphClkInit->Adf1ClockSelection)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	699b      	ldr	r3, [r3, #24]
 8008cc6:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8008cca:	d02a      	beq.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8008ccc:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8008cd0:	d824      	bhi.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8008cd2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008cd6:	d024      	beq.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8008cd8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008cdc:	d81e      	bhi.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8008cde:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008ce2:	d01e      	beq.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8008ce4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008ce8:	d818      	bhi.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8008cea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008cee:	d00e      	beq.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8008cf0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008cf4:	d812      	bhi.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d013      	beq.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8008cfa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008cfe:	d10d      	bne.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    {
      case RCC_ADF1CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for ADF1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8008d00:	4b4b      	ldr	r3, [pc, #300]	@ (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8008d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d04:	4a4a      	ldr	r2, [pc, #296]	@ (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8008d06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008d0a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADF1 clock source configuration done later after clock selection check */
        break;
 8008d0c:	e00a      	b.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x3b0>

      case RCC_ADF1CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for ADF1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 8008d0e:	4b48      	ldr	r3, [pc, #288]	@ (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8008d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d12:	4a47      	ldr	r2, [pc, #284]	@ (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8008d14:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008d18:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADF1 clock source configuration done later after clock selection check */
        break;
 8008d1a:	e003      	b.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      case RCC_ADF1CLKSOURCE_HSI:    /* HSI is used as clock source for ADF1 */
        /* ADF1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	75fb      	strb	r3, [r7, #23]
        break;
 8008d20:	e000      	b.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        break;
 8008d22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d24:	7dfb      	ldrb	r3, [r7, #23]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d109      	bne.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
    {
      /* Set the source of ADF1 clock*/
      __HAL_RCC_ADF1_CONFIG(PeriphClkInit->Adf1ClockSelection);
 8008d2a:	4b41      	ldr	r3, [pc, #260]	@ (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8008d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d2e:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	699b      	ldr	r3, [r3, #24]
 8008d36:	493e      	ldr	r1, [pc, #248]	@ (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8008d3c:	e001      	b.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d3e:	7dfb      	ldrb	r3, [r7, #23]
 8008d40:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------- CEC configuration ---------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d008      	beq.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008d4e:	4b38      	ldr	r3, [pc, #224]	@ (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8008d50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d52:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	69db      	ldr	r3, [r3, #28]
 8008d5a:	4935      	ldr	r1, [pc, #212]	@ (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	650b      	str	r3, [r1, #80]	@ 0x50
  }

  /*---------------------- ETH1 REF configuration --------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1REF) == RCC_PERIPHCLK_ETH1REF)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d008      	beq.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1REFCLKSOURCE(PeriphClkInit->Eth1RefClockSelection));

    /* Configure the ETH1 REF clock source */
    __HAL_RCC_ETH1REF_CONFIG(PeriphClkInit->Eth1RefClockSelection);
 8008d6c:	4b30      	ldr	r3, [pc, #192]	@ (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8008d6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d70:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6a1b      	ldr	r3, [r3, #32]
 8008d78:	492d      	ldr	r1, [pc, #180]	@ (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  }

  /*---------------------- ETH1PHY configuration --------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PHY) == RCC_PERIPHCLK_ETH1PHY)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d020      	beq.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1PHYCLKSOURCE(PeriphClkInit->Eth1PhyClockSelection));

    switch (PeriphClkInit->Eth1PhyClockSelection)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d00c      	beq.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x438>
 8008d92:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008d96:	d106      	bne.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_ETH1PHYCLKSOURCE_HSE:    /* HSE is used as clock source for ETH PHY */
        /* ETH PHY clock source configuration done later after clock selection check */
        break;

      case RCC_ETH1PHYCLKSOURCE_PLL3S:  /* PLL3_S is used as clock source for ETH PHY */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_SCLK);
 8008d98:	4b25      	ldr	r3, [pc, #148]	@ (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8008d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d9c:	4a24      	ldr	r2, [pc, #144]	@ (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8008d9e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008da2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ETH PHY clock source configuration done later after clock selection check */
        break;
 8008da4:	e003      	b.n	8008dae <HAL_RCCEx_PeriphCLKConfig+0x43a>

      default:
        ret = HAL_ERROR;
 8008da6:	2301      	movs	r3, #1
 8008da8:	75fb      	strb	r3, [r7, #23]
        break;
 8008daa:	e000      	b.n	8008dae <HAL_RCCEx_PeriphCLKConfig+0x43a>
        break;
 8008dac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008dae:	7dfb      	ldrb	r3, [r7, #23]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d109      	bne.n	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of ETH PHY clock*/
      __HAL_RCC_ETH1PHY_CONFIG(PeriphClkInit->Eth1PhyClockSelection);
 8008db4:	4b1e      	ldr	r3, [pc, #120]	@ (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8008db6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008db8:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dc0:	491b      	ldr	r1, [pc, #108]	@ (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8008dc6:	e001      	b.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dc8:	7dfb      	ldrb	r3, [r7, #23]
 8008dca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------- FDCAN configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d02f      	beq.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    switch (PeriphClkInit->FdcanClockSelection)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ddc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008de0:	d00e      	beq.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8008de2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008de6:	d812      	bhi.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d013      	beq.n	8008e14 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8008dec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008df0:	d10d      	bne.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0x49a>
    {
      case RCC_FDCANCLKSOURCE_PLL1Q: /* PLL1_Q is used as clock source for FDCAN kernel */
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 8008df2:	4b0f      	ldr	r3, [pc, #60]	@ (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8008df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008df6:	4a0e      	ldr	r2, [pc, #56]	@ (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8008df8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008dfc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008dfe:	e00a      	b.n	8008e16 <HAL_RCCEx_PeriphCLKConfig+0x4a2>

      case RCC_FDCANCLKSOURCE_PLL2P: /* PLL2_P is used as clock source for FDCAN kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8008e00:	4b0b      	ldr	r3, [pc, #44]	@ (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8008e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e04:	4a0a      	ldr	r2, [pc, #40]	@ (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8008e06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008e0a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008e0c:	e003      	b.n	8008e16 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      case RCC_FDCANCLKSOURCE_HSE:   /* HSE is used as clock source for FDCAN kernel */
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	75fb      	strb	r3, [r7, #23]
        break;
 8008e12:	e000      	b.n	8008e16 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
        break;
 8008e14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e16:	7dfb      	ldrb	r3, [r7, #23]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d10b      	bne.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008e1c:	4b04      	ldr	r3, [pc, #16]	@ (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8008e1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e20:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e28:	4901      	ldr	r1, [pc, #4]	@ (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	650b      	str	r3, [r1, #80]	@ 0x50
 8008e2e:	e003      	b.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 8008e30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e34:	7dfb      	ldrb	r3, [r7, #23]
 8008e36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/I3C1 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C1_I3C1) == RCC_PERIPHCLK_I2C1_I3C1)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d02c      	beq.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1_I3C1CLKSOURCE(PeriphClkInit->I2c1_I3c1ClockSelection));

    switch (PeriphClkInit->I2c1_I3c1ClockSelection)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e48:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008e4c:	d017      	beq.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8008e4e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008e52:	d811      	bhi.n	8008e78 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8008e54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e58:	d011      	beq.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8008e5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e5e:	d80b      	bhi.n	8008e78 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d00c      	beq.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8008e64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e68:	d106      	bne.n	8008e78 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      case RCC_I2C1_I3C1CLKSOURCE_PLL3R:   /* PLL3_R is used as clock source for I2C1/I3C1*/
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8008e6a:	4b97      	ldr	r3, [pc, #604]	@ (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8008e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e6e:	4a96      	ldr	r2, [pc, #600]	@ (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8008e70:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008e74:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* I2C1/I3C1 clock source configuration done later after clock selection check */
        break;
 8008e76:	e003      	b.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_I2C1_I3C1CLKSOURCE_CSI:     /* CSI is used as clock source for I2C1/I3C1*/
        /* I2C1/I3C1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e78:	2301      	movs	r3, #1
 8008e7a:	75fb      	strb	r3, [r7, #23]
        break;
 8008e7c:	e000      	b.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008e7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e80:	7dfb      	ldrb	r3, [r7, #23]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d109      	bne.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0x526>
    {
      /* Set the source of I2C1/I3C1 clock*/
      __HAL_RCC_I2C1_I3C1_CONFIG(PeriphClkInit->I2c1_I3c1ClockSelection);
 8008e86:	4b90      	ldr	r3, [pc, #576]	@ (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8008e88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e8a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e92:	498d      	ldr	r1, [pc, #564]	@ (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8008e94:	4313      	orrs	r3, r2
 8008e96:	650b      	str	r3, [r1, #80]	@ 0x50
 8008e98:	e001      	b.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e9a:	7dfb      	ldrb	r3, [r7, #23]
 8008e9c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C2/I2C3 Configuration -------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C23) == RCC_PERIPHCLK_I2C23)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d02c      	beq.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0x590>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C23CLKSOURCE(PeriphClkInit->I2c23ClockSelection));

    switch (PeriphClkInit->I2c23ClockSelection)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008eae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008eb2:	d017      	beq.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8008eb4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008eb8:	d811      	bhi.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0x56a>
 8008eba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ebe:	d011      	beq.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8008ec0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ec4:	d80b      	bhi.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0x56a>
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d00c      	beq.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8008eca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ece:	d106      	bne.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0x56a>
    {
      case RCC_I2C23CLKSOURCE_PLL3R:   /* PLL3_R is used as clock source for I2C2/I2C3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8008ed0:	4b7d      	ldr	r3, [pc, #500]	@ (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8008ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ed4:	4a7c      	ldr	r2, [pc, #496]	@ (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8008ed6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008eda:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* I2C2/I2C3 clock source configuration done later after clock selection check */
        break;
 8008edc:	e003      	b.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0x572>
      case RCC_I2C23CLKSOURCE_CSI:     /* CSI is used as clock source for I2C2/I2C3 */
        /* I2C2/I2C3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	75fb      	strb	r3, [r7, #23]
        break;
 8008ee2:	e000      	b.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0x572>
        break;
 8008ee4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ee6:	7dfb      	ldrb	r3, [r7, #23]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d109      	bne.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Set the source of I2C2/I2C3 clock*/
      __HAL_RCC_I2C23_CONFIG(PeriphClkInit->I2c23ClockSelection);
 8008eec:	4b76      	ldr	r3, [pc, #472]	@ (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8008eee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ef0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ef8:	4973      	ldr	r1, [pc, #460]	@ (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8008efa:	4313      	orrs	r3, r2
 8008efc:	650b      	str	r3, [r1, #80]	@ 0x50
 8008efe:	e001      	b.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0x590>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f00:	7dfb      	ldrb	r3, [r7, #23]
 8008f02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d045      	beq.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    switch (PeriphClkInit->Lptim1ClockSelection)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008f18:	d02a      	beq.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 8008f1a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008f1e:	d824      	bhi.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 8008f20:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008f24:	d026      	beq.n	8008f74 <HAL_RCCEx_PeriphCLKConfig+0x600>
 8008f26:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008f2a:	d81e      	bhi.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 8008f2c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008f30:	d022      	beq.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8008f32:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008f36:	d818      	bhi.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 8008f38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f3c:	d00e      	beq.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
 8008f3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f42:	d812      	bhi.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d019      	beq.n	8008f7c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008f48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f4c:	d10d      	bne.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x5f6>
      case RCC_LPTIM1CLKSOURCE_PCLK1: /* PCLK1 as clock source for LPTIM1 */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P: /* PLL2_P is used as clock source for LPTIM1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8008f4e:	4b5e      	ldr	r3, [pc, #376]	@ (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8008f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f52:	4a5d      	ldr	r2, [pc, #372]	@ (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8008f54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f58:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008f5a:	e010      	b.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x60a>

      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3_R is used as clock source for LPTIM1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8008f5c:	4b5a      	ldr	r3, [pc, #360]	@ (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8008f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f60:	4a59      	ldr	r2, [pc, #356]	@ (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8008f62:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008f66:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008f68:	e009      	b.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x60a>
        /* HSI, HSE, or CSI oscillator is used as clock source for LPTIM1 */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	75fb      	strb	r3, [r7, #23]
        break;
 8008f6e:	e006      	b.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
 8008f70:	bf00      	nop
 8008f72:	e004      	b.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
 8008f74:	bf00      	nop
 8008f76:	e002      	b.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
 8008f78:	bf00      	nop
 8008f7a:	e000      	b.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
 8008f7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f7e:	7dfb      	ldrb	r3, [r7, #23]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d109      	bne.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x624>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008f84:	4b50      	ldr	r3, [pc, #320]	@ (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8008f86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f88:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f90:	494d      	ldr	r1, [pc, #308]	@ (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8008f92:	4313      	orrs	r3, r2
 8008f94:	650b      	str	r3, [r1, #80]	@ 0x50
 8008f96:	e001      	b.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0x628>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f98:	7dfb      	ldrb	r3, [r7, #23]
 8008f9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2/LPTIM3 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM23) == RCC_PERIPHCLK_LPTIM23)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d045      	beq.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
  {
    switch (PeriphClkInit->Lptim23ClockSelection)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fac:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8008fb0:	d02a      	beq.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x694>
 8008fb2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8008fb6:	d824      	bhi.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8008fb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008fbc:	d026      	beq.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x698>
 8008fbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008fc2:	d81e      	bhi.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8008fc4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008fc8:	d022      	beq.n	8009010 <HAL_RCCEx_PeriphCLKConfig+0x69c>
 8008fca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008fce:	d818      	bhi.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8008fd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008fd4:	d00e      	beq.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8008fd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008fda:	d812      	bhi.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d019      	beq.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 8008fe0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fe4:	d10d      	bne.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_LPTIM23CLKSOURCE_PCLK4: /* PCLK4 as clock source for LPTIM2/LPTIM3 */
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM23CLKSOURCE_PLL2P: /* PLL2_P is used as clock source for LPTIM2/LPTIM3 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8008fe6:	4b38      	ldr	r3, [pc, #224]	@ (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8008fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fea:	4a37      	ldr	r2, [pc, #220]	@ (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8008fec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ff0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;
 8008ff2:	e010      	b.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0x6a2>

      case RCC_LPTIM23CLKSOURCE_PLL3R: /* PLL3_R is used as clock source for LPTIM2/LPTIM3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8008ff4:	4b34      	ldr	r3, [pc, #208]	@ (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8008ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ff8:	4a33      	ldr	r2, [pc, #204]	@ (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8008ffa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008ffe:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;
 8009000:	e009      	b.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009002:	2301      	movs	r3, #1
 8009004:	75fb      	strb	r3, [r7, #23]
        break;
 8009006:	e006      	b.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
 8009008:	bf00      	nop
 800900a:	e004      	b.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
 800900c:	bf00      	nop
 800900e:	e002      	b.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
 8009010:	bf00      	nop
 8009012:	e000      	b.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
 8009014:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009016:	7dfb      	ldrb	r3, [r7, #23]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d109      	bne.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
    {
      /* Set the source of LPTIM2/LPTIM3 clock*/
      __HAL_RCC_LPTIM23_CONFIG(PeriphClkInit->Lptim23ClockSelection);
 800901c:	4b2a      	ldr	r3, [pc, #168]	@ (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 800901e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009020:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009028:	4927      	ldr	r1, [pc, #156]	@ (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 800902a:	4313      	orrs	r3, r2
 800902c:	658b      	str	r3, [r1, #88]	@ 0x58
 800902e:	e001      	b.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009030:	7dfb      	ldrb	r3, [r7, #23]
 8009032:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM4/LPTIM5 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM45) == RCC_PERIPHCLK_LPTIM45)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800903c:	2b00      	cmp	r3, #0
 800903e:	d047      	beq.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
  {
    switch (PeriphClkInit->Lptim45ClockSelection)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009044:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009048:	d02a      	beq.n	80090a0 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 800904a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800904e:	d824      	bhi.n	800909a <HAL_RCCEx_PeriphCLKConfig+0x726>
 8009050:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009054:	d026      	beq.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x730>
 8009056:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800905a:	d81e      	bhi.n	800909a <HAL_RCCEx_PeriphCLKConfig+0x726>
 800905c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009060:	d022      	beq.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x734>
 8009062:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009066:	d818      	bhi.n	800909a <HAL_RCCEx_PeriphCLKConfig+0x726>
 8009068:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800906c:	d00e      	beq.n	800908c <HAL_RCCEx_PeriphCLKConfig+0x718>
 800906e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009072:	d812      	bhi.n	800909a <HAL_RCCEx_PeriphCLKConfig+0x726>
 8009074:	2b00      	cmp	r3, #0
 8009076:	d019      	beq.n	80090ac <HAL_RCCEx_PeriphCLKConfig+0x738>
 8009078:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800907c:	d10d      	bne.n	800909a <HAL_RCCEx_PeriphCLKConfig+0x726>
      case RCC_LPTIM45CLKSOURCE_PCLK4:  /* PCLK4 as clock source for LPTIM4/LPTIM5 */
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM45CLKSOURCE_PLL2P: /* PLL2 is used as clock source for LPTIM4/LPTIM5 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 800907e:	4b12      	ldr	r3, [pc, #72]	@ (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8009080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009082:	4a11      	ldr	r2, [pc, #68]	@ (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8009084:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009088:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;
 800908a:	e010      	b.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x73a>

      case RCC_LPTIM45CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4/LPTIM5 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 800908c:	4b0e      	ldr	r3, [pc, #56]	@ (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 800908e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009090:	4a0d      	ldr	r2, [pc, #52]	@ (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8009092:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009096:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;
 8009098:	e009      	b.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x73a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM4/LPTIM5 clock */
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800909a:	2301      	movs	r3, #1
 800909c:	75fb      	strb	r3, [r7, #23]
        break;
 800909e:	e006      	b.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
 80090a0:	bf00      	nop
 80090a2:	e004      	b.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
 80090a4:	bf00      	nop
 80090a6:	e002      	b.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
 80090a8:	bf00      	nop
 80090aa:	e000      	b.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
 80090ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090ae:	7dfb      	ldrb	r3, [r7, #23]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d10b      	bne.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0x758>
    {
      /* Set the source of LPTIM4/LPTIM5 clock */
      __HAL_RCC_LPTIM45_CONFIG(PeriphClkInit->Lptim45ClockSelection);
 80090b4:	4b04      	ldr	r3, [pc, #16]	@ (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 80090b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090b8:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090c0:	4901      	ldr	r1, [pc, #4]	@ (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 80090c2:	4313      	orrs	r3, r2
 80090c4:	658b      	str	r3, [r1, #88]	@ 0x58
 80090c6:	e003      	b.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 80090c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090cc:	7dfb      	ldrb	r3, [r7, #23]
 80090ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d034      	beq.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    switch (PeriphClkInit->Lpuart1ClockSelection)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090e0:	2b05      	cmp	r3, #5
 80090e2:	d81d      	bhi.n	8009120 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
 80090e4:	a201      	add	r2, pc, #4	@ (adr r2, 80090ec <HAL_RCCEx_PeriphCLKConfig+0x778>)
 80090e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ea:	bf00      	nop
 80090ec:	08009127 	.word	0x08009127
 80090f0:	08009105 	.word	0x08009105
 80090f4:	08009113 	.word	0x08009113
 80090f8:	08009127 	.word	0x08009127
 80090fc:	08009127 	.word	0x08009127
 8009100:	08009127 	.word	0x08009127
      case RCC_LPUART1CLKSOURCE_PCLK4: /* PCLK4 selected as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q: /* PLL2_Q is used as clock source for LPUART1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 8009104:	4b91      	ldr	r3, [pc, #580]	@ (800934c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8009106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009108:	4a90      	ldr	r2, [pc, #576]	@ (800934c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 800910a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800910e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009110:	e00a      	b.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x7b4>

      case RCC_LPUART1CLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for LPUART1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 8009112:	4b8e      	ldr	r3, [pc, #568]	@ (800934c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8009114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009116:	4a8d      	ldr	r2, [pc, #564]	@ (800934c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8009118:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800911c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800911e:	e003      	b.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009120:	2301      	movs	r3, #1
 8009122:	75fb      	strb	r3, [r7, #23]
        break;
 8009124:	e000      	b.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
        break;
 8009126:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009128:	7dfb      	ldrb	r3, [r7, #23]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d109      	bne.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800912e:	4b87      	ldr	r3, [pc, #540]	@ (800934c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8009130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009132:	f023 0207 	bic.w	r2, r3, #7
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800913a:	4984      	ldr	r1, [pc, #528]	@ (800934c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 800913c:	4313      	orrs	r3, r2
 800913e:	658b      	str	r3, [r1, #88]	@ 0x58
 8009140:	e001      	b.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009142:	7dfb      	ldrb	r3, [r7, #23]
 8009144:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LTDC Configuration ----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800914e:	2b00      	cmp	r3, #0
 8009150:	d005      	beq.n	800915e <HAL_RCCEx_PeriphCLKConfig+0x7ea>
  {
    /* LTDC internally connected to PLL3_R output clock */
    __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8009152:	4b7e      	ldr	r3, [pc, #504]	@ (800934c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8009154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009156:	4a7d      	ldr	r2, [pc, #500]	@ (800934c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8009158:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800915c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  }

  /*---------------------------- PSSI configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PSSI) == RCC_PERIPHCLK_PSSI)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009166:	2b00      	cmp	r3, #0
 8009168:	d021      	beq.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0x83a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_PSSICLKSOURCE(PeriphClkInit->PssiClockSelection));

    switch (PeriphClkInit->PssiClockSelection)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800916e:	2b00      	cmp	r3, #0
 8009170:	d003      	beq.n	800917a <HAL_RCCEx_PeriphCLKConfig+0x806>
 8009172:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009176:	d00a      	beq.n	800918e <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8009178:	e006      	b.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      case RCC_PSSICLKSOURCE_PLL3R:  /* PLL3_R is used as clock source for PSSI */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 800917a:	4b74      	ldr	r3, [pc, #464]	@ (800934c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 800917c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800917e:	4a73      	ldr	r2, [pc, #460]	@ (800934c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8009180:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009184:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* PSSI clock source configuration done later after clock selection check */
        break;
 8009186:	e003      	b.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        /* HSI, HSE, or CSI oscillator is used as source of PSSI clock */
        /* PSSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009188:	2301      	movs	r3, #1
 800918a:	75fb      	strb	r3, [r7, #23]
        break;
 800918c:	e000      	b.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 800918e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009190:	7dfb      	ldrb	r3, [r7, #23]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d109      	bne.n	80091aa <HAL_RCCEx_PeriphCLKConfig+0x836>
    {
      /* Set the source of PSSI clock*/
      __HAL_RCC_PSSI_CONFIG(PeriphClkInit->PssiClockSelection);
 8009196:	4b6d      	ldr	r3, [pc, #436]	@ (800934c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8009198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800919a:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80091a2:	496a      	ldr	r1, [pc, #424]	@ (800934c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80091a4:	4313      	orrs	r3, r2
 80091a6:	64cb      	str	r3, [r1, #76]	@ 0x4c
 80091a8:	e001      	b.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0x83a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091aa:	7dfb      	ldrb	r3, [r7, #23]
 80091ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d043      	beq.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x8ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80091c2:	d02c      	beq.n	800921e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
 80091c4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80091c8:	d826      	bhi.n	8009218 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 80091ca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80091ce:	d028      	beq.n	8009222 <HAL_RCCEx_PeriphCLKConfig+0x8ae>
 80091d0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80091d4:	d820      	bhi.n	8009218 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 80091d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80091da:	d016      	beq.n	800920a <HAL_RCCEx_PeriphCLKConfig+0x896>
 80091dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80091e0:	d81a      	bhi.n	8009218 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d003      	beq.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0x87a>
 80091e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80091ea:	d007      	beq.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x888>
 80091ec:	e014      	b.n	8009218 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SAI1 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 80091ee:	4b57      	ldr	r3, [pc, #348]	@ (800934c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80091f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091f2:	4a56      	ldr	r2, [pc, #344]	@ (800934c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80091f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80091fa:	e013      	b.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SAI1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 80091fc:	4b53      	ldr	r3, [pc, #332]	@ (800934c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80091fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009200:	4a52      	ldr	r2, [pc, #328]	@ (800934c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8009202:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009206:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009208:	e00c      	b.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SAI1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 800920a:	4b50      	ldr	r3, [pc, #320]	@ (800934c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 800920c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800920e:	4a4f      	ldr	r2, [pc, #316]	@ (800934c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8009210:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009214:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009216:	e005      	b.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009218:	2301      	movs	r3, #1
 800921a:	75fb      	strb	r3, [r7, #23]
        break;
 800921c:	e002      	b.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
        break;
 800921e:	bf00      	nop
 8009220:	e000      	b.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
        break;
 8009222:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009224:	7dfb      	ldrb	r3, [r7, #23]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d109      	bne.n	800923e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800922a:	4b48      	ldr	r3, [pc, #288]	@ (800934c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 800922c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800922e:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009236:	4945      	ldr	r1, [pc, #276]	@ (800934c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8009238:	4313      	orrs	r3, r2
 800923a:	654b      	str	r3, [r1, #84]	@ 0x54
 800923c:	e001      	b.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x8ce>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800923e:	7dfb      	ldrb	r3, [r7, #23]
 8009240:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800924a:	2b00      	cmp	r3, #0
 800924c:	d04b      	beq.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x972>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009252:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8009256:	d032      	beq.n	80092be <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8009258:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800925c:	d82c      	bhi.n	80092b8 <HAL_RCCEx_PeriphCLKConfig+0x944>
 800925e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009262:	d02e      	beq.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8009264:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009268:	d826      	bhi.n	80092b8 <HAL_RCCEx_PeriphCLKConfig+0x944>
 800926a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800926e:	d02a      	beq.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8009270:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009274:	d820      	bhi.n	80092b8 <HAL_RCCEx_PeriphCLKConfig+0x944>
 8009276:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800927a:	d016      	beq.n	80092aa <HAL_RCCEx_PeriphCLKConfig+0x936>
 800927c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009280:	d81a      	bhi.n	80092b8 <HAL_RCCEx_PeriphCLKConfig+0x944>
 8009282:	2b00      	cmp	r3, #0
 8009284:	d003      	beq.n	800928e <HAL_RCCEx_PeriphCLKConfig+0x91a>
 8009286:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800928a:	d007      	beq.n	800929c <HAL_RCCEx_PeriphCLKConfig+0x928>
 800928c:	e014      	b.n	80092b8 <HAL_RCCEx_PeriphCLKConfig+0x944>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SAI2 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 800928e:	4b2f      	ldr	r3, [pc, #188]	@ (800934c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8009290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009292:	4a2e      	ldr	r2, [pc, #184]	@ (800934c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8009294:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009298:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800929a:	e015      	b.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0x954>

      case RCC_SAI2CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SAI2 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 800929c:	4b2b      	ldr	r3, [pc, #172]	@ (800934c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 800929e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092a0:	4a2a      	ldr	r2, [pc, #168]	@ (800934c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80092a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80092a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80092a8:	e00e      	b.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0x954>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SAI2 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 80092aa:	4b28      	ldr	r3, [pc, #160]	@ (800934c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80092ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092ae:	4a27      	ldr	r2, [pc, #156]	@ (800934c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80092b0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80092b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80092b6:	e007      	b.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0x954>
      case RCC_SAI2CLKSOURCE_SPDIF: /* SPDIF clock is used as source of SAI2 clock */
        /* SAI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092b8:	2301      	movs	r3, #1
 80092ba:	75fb      	strb	r3, [r7, #23]
        break;
 80092bc:	e004      	b.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0x954>
        break;
 80092be:	bf00      	nop
 80092c0:	e002      	b.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0x954>
        break;
 80092c2:	bf00      	nop
 80092c4:	e000      	b.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0x954>
        break;
 80092c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092c8:	7dfb      	ldrb	r3, [r7, #23]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d109      	bne.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80092ce:	4b1f      	ldr	r3, [pc, #124]	@ (800934c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80092d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092d2:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092da:	491c      	ldr	r1, [pc, #112]	@ (800934c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80092dc:	4313      	orrs	r3, r2
 80092de:	654b      	str	r3, [r1, #84]	@ 0x54
 80092e0:	e001      	b.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x972>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092e2:	7dfb      	ldrb	r3, [r7, #23]
 80092e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPDIFRX configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d03e      	beq.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifrxClockSelection));

    switch (PeriphClkInit->SpdifrxClockSelection)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80092f6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80092fa:	d029      	beq.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0x9dc>
 80092fc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009300:	d820      	bhi.n	8009344 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009302:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009306:	d016      	beq.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8009308:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800930c:	d81a      	bhi.n	8009344 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800930e:	2b00      	cmp	r3, #0
 8009310:	d003      	beq.n	800931a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 8009312:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009316:	d007      	beq.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
 8009318:	e014      	b.n	8009344 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL1Q: /* PLL1_Q is used as clock source for SPDIFRX */
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 800931a:	4b0c      	ldr	r3, [pc, #48]	@ (800934c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 800931c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800931e:	4a0b      	ldr	r2, [pc, #44]	@ (800934c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8009320:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009324:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009326:	e014      	b.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x9de>

      case RCC_SPDIFRXCLKSOURCE_PLL2R: /* PLL2_R is used as clock source for SPDIFRX */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_RCLK);
 8009328:	4b08      	ldr	r3, [pc, #32]	@ (800934c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 800932a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800932c:	4a07      	ldr	r2, [pc, #28]	@ (800934c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 800932e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009332:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009334:	e00d      	b.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x9de>

      case RCC_SPDIFRXCLKSOURCE_PLL3R:  /* PLL3_R is used as clock source for SPDIFRX */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8009336:	4b05      	ldr	r3, [pc, #20]	@ (800934c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8009338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800933a:	4a04      	ldr	r2, [pc, #16]	@ (800934c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 800933c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009340:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009342:	e006      	b.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x9de>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009344:	2301      	movs	r3, #1
 8009346:	75fb      	strb	r3, [r7, #23]
        break;
 8009348:	e003      	b.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800934a:	bf00      	nop
 800934c:	58024400 	.word	0x58024400
        break;
 8009350:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009352:	7dfb      	ldrb	r3, [r7, #23]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d109      	bne.n	800936c <HAL_RCCEx_PeriphCLKConfig+0x9f8>
    {
      /* Set the source of SPDIFRX clock */
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009358:	4b8e      	ldr	r3, [pc, #568]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800935a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800935c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009364:	498b      	ldr	r1, [pc, #556]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009366:	4313      	orrs	r3, r2
 8009368:	650b      	str	r3, [r1, #80]	@ 0x50
 800936a:	e001      	b.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800936c:	7dfb      	ldrb	r3, [r7, #23]
 800936e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009378:	2b00      	cmp	r3, #0
 800937a:	d043      	beq.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0xa90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    switch (PeriphClkInit->Spi1ClockSelection)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009380:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009384:	d02c      	beq.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 8009386:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800938a:	d826      	bhi.n	80093da <HAL_RCCEx_PeriphCLKConfig+0xa66>
 800938c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009390:	d028      	beq.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009392:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009396:	d820      	bhi.n	80093da <HAL_RCCEx_PeriphCLKConfig+0xa66>
 8009398:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800939c:	d016      	beq.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0xa58>
 800939e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093a2:	d81a      	bhi.n	80093da <HAL_RCCEx_PeriphCLKConfig+0xa66>
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d003      	beq.n	80093b0 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
 80093a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093ac:	d007      	beq.n	80093be <HAL_RCCEx_PeriphCLKConfig+0xa4a>
 80093ae:	e014      	b.n	80093da <HAL_RCCEx_PeriphCLKConfig+0xa66>
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SPI1 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 80093b0:	4b78      	ldr	r3, [pc, #480]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80093b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093b4:	4a77      	ldr	r2, [pc, #476]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80093b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80093bc:	e013      	b.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0xa72>

      case RCC_SPI1CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SPI1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 80093be:	4b75      	ldr	r3, [pc, #468]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80093c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093c2:	4a74      	ldr	r2, [pc, #464]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80093c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80093c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80093ca:	e00c      	b.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0xa72>

      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SPI1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 80093cc:	4b71      	ldr	r3, [pc, #452]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80093ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093d0:	4a70      	ldr	r2, [pc, #448]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80093d2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80093d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80093d8:	e005      	b.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0xa72>
      case RCC_SPI1CLKSOURCE_CLKP:  /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80093da:	2301      	movs	r3, #1
 80093dc:	75fb      	strb	r3, [r7, #23]
        break;
 80093de:	e002      	b.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0xa72>
        break;
 80093e0:	bf00      	nop
 80093e2:	e000      	b.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0xa72>
        break;
 80093e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093e6:	7dfb      	ldrb	r3, [r7, #23]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d109      	bne.n	8009400 <HAL_RCCEx_PeriphCLKConfig+0xa8c>
    {
      /* Set the source of SPI1 clock*/
      __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
 80093ec:	4b69      	ldr	r3, [pc, #420]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80093ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093f8:	4966      	ldr	r1, [pc, #408]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80093fa:	4313      	orrs	r3, r2
 80093fc:	654b      	str	r3, [r1, #84]	@ 0x54
 80093fe:	e001      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0xa90>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009400:	7dfb      	ldrb	r3, [r7, #23]
 8009402:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI2/SPI3 configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI23) == RCC_PERIPHCLK_SPI23)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800940c:	2b00      	cmp	r3, #0
 800940e:	d03c      	beq.n	800948a <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI23CLKSOURCE(PeriphClkInit->Spi23ClockSelection));

    switch (PeriphClkInit->Spi23ClockSelection)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009414:	2b40      	cmp	r3, #64	@ 0x40
 8009416:	d026      	beq.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 8009418:	2b40      	cmp	r3, #64	@ 0x40
 800941a:	d821      	bhi.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 800941c:	2b30      	cmp	r3, #48	@ 0x30
 800941e:	d024      	beq.n	800946a <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8009420:	2b30      	cmp	r3, #48	@ 0x30
 8009422:	d81d      	bhi.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8009424:	2b20      	cmp	r3, #32
 8009426:	d014      	beq.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0xade>
 8009428:	2b20      	cmp	r3, #32
 800942a:	d819      	bhi.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 800942c:	2b00      	cmp	r3, #0
 800942e:	d002      	beq.n	8009436 <HAL_RCCEx_PeriphCLKConfig+0xac2>
 8009430:	2b10      	cmp	r3, #16
 8009432:	d007      	beq.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8009434:	e014      	b.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0xaec>
    {
      case RCC_SPI23CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SPI2/SPI3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 8009436:	4b57      	ldr	r3, [pc, #348]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800943a:	4a56      	ldr	r2, [pc, #344]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800943c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009440:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;
 8009442:	e013      	b.n	800946c <HAL_RCCEx_PeriphCLKConfig+0xaf8>

      case RCC_SPI23CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SPI2/SPI3 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8009444:	4b53      	ldr	r3, [pc, #332]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009448:	4a52      	ldr	r2, [pc, #328]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800944a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800944e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;
 8009450:	e00c      	b.n	800946c <HAL_RCCEx_PeriphCLKConfig+0xaf8>

      case RCC_SPI23CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SPI2/SPI3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 8009452:	4b50      	ldr	r3, [pc, #320]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009456:	4a4f      	ldr	r2, [pc, #316]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009458:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800945c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;
 800945e:	e005      	b.n	800946c <HAL_RCCEx_PeriphCLKConfig+0xaf8>
      case RCC_SPI23CLKSOURCE_CLKP:  /* HSI, HSE, or CSI oscillator is used as source of SPI2/SPI3 clock */
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009460:	2301      	movs	r3, #1
 8009462:	75fb      	strb	r3, [r7, #23]
        break;
 8009464:	e002      	b.n	800946c <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8009466:	bf00      	nop
 8009468:	e000      	b.n	800946c <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 800946a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800946c:	7dfb      	ldrb	r3, [r7, #23]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d109      	bne.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0xb12>
    {
      /* Set the source of SPI2/SPI3 clock*/
      __HAL_RCC_SPI23_CONFIG(PeriphClkInit->Spi23ClockSelection);
 8009472:	4b48      	ldr	r3, [pc, #288]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009474:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009476:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800947e:	4945      	ldr	r1, [pc, #276]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009480:	4313      	orrs	r3, r2
 8009482:	650b      	str	r3, [r1, #80]	@ 0x50
 8009484:	e001      	b.n	800948a <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009486:	7dfb      	ldrb	r3, [r7, #23]
 8009488:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009492:	2b00      	cmp	r3, #0
 8009494:	d03c      	beq.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI45CLKSOURCE(PeriphClkInit->Spi45ClockSelection));

    switch (PeriphClkInit->Spi45ClockSelection)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800949a:	2b50      	cmp	r3, #80	@ 0x50
 800949c:	d022      	beq.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0xb70>
 800949e:	2b50      	cmp	r3, #80	@ 0x50
 80094a0:	d81d      	bhi.n	80094de <HAL_RCCEx_PeriphCLKConfig+0xb6a>
 80094a2:	2b40      	cmp	r3, #64	@ 0x40
 80094a4:	d020      	beq.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80094a6:	2b40      	cmp	r3, #64	@ 0x40
 80094a8:	d819      	bhi.n	80094de <HAL_RCCEx_PeriphCLKConfig+0xb6a>
 80094aa:	2b30      	cmp	r3, #48	@ 0x30
 80094ac:	d01e      	beq.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0xb78>
 80094ae:	2b30      	cmp	r3, #48	@ 0x30
 80094b0:	d815      	bhi.n	80094de <HAL_RCCEx_PeriphCLKConfig+0xb6a>
 80094b2:	2b20      	cmp	r3, #32
 80094b4:	d00c      	beq.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 80094b6:	2b20      	cmp	r3, #32
 80094b8:	d811      	bhi.n	80094de <HAL_RCCEx_PeriphCLKConfig+0xb6a>
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d018      	beq.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80094be:	2b10      	cmp	r3, #16
 80094c0:	d10d      	bne.n	80094de <HAL_RCCEx_PeriphCLKConfig+0xb6a>
      case RCC_SPI45CLKSOURCE_PCLK2:  /* PCLK2 as clock source for SPI4/SPI5 */
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2Q:  /* PLL2_Q is used as clock source for SPI4/SPI5 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 80094c2:	4b34      	ldr	r3, [pc, #208]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80094c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094c6:	4a33      	ldr	r2, [pc, #204]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80094c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80094cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;
 80094ce:	e010      	b.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_SPI45CLKSOURCE_PLL3Q:  /* PLL3_Q is used as clock source for SPI4/SPI5 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 80094d0:	4b30      	ldr	r3, [pc, #192]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80094d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094d4:	4a2f      	ldr	r2, [pc, #188]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80094d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80094da:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;
 80094dc:	e009      	b.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
      case RCC_SPI45CLKSOURCE_HSE: /* HSE oscillator clock is used as source of SPI4/SPI5 */
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094de:	2301      	movs	r3, #1
 80094e0:	75fb      	strb	r3, [r7, #23]
        break;
 80094e2:	e006      	b.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80094e4:	bf00      	nop
 80094e6:	e004      	b.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80094e8:	bf00      	nop
 80094ea:	e002      	b.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80094ec:	bf00      	nop
 80094ee:	e000      	b.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80094f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094f2:	7dfb      	ldrb	r3, [r7, #23]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d109      	bne.n	800950c <HAL_RCCEx_PeriphCLKConfig+0xb98>
    {
      /* Set the source of SPI4/SPI5 clock */
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80094f8:	4b26      	ldr	r3, [pc, #152]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80094fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094fc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009504:	4923      	ldr	r1, [pc, #140]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009506:	4313      	orrs	r3, r2
 8009508:	654b      	str	r3, [r1, #84]	@ 0x54
 800950a:	e001      	b.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800950c:	7dfb      	ldrb	r3, [r7, #23]
 800950e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009518:	2b00      	cmp	r3, #0
 800951a:	d03f      	beq.n	800959c <HAL_RCCEx_PeriphCLKConfig+0xc28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));

    switch (PeriphClkInit->Spi6ClockSelection)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009520:	2b50      	cmp	r3, #80	@ 0x50
 8009522:	d022      	beq.n	800956a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8009524:	2b50      	cmp	r3, #80	@ 0x50
 8009526:	d81d      	bhi.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
 8009528:	2b40      	cmp	r3, #64	@ 0x40
 800952a:	d020      	beq.n	800956e <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 800952c:	2b40      	cmp	r3, #64	@ 0x40
 800952e:	d819      	bhi.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
 8009530:	2b30      	cmp	r3, #48	@ 0x30
 8009532:	d01e      	beq.n	8009572 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009534:	2b30      	cmp	r3, #48	@ 0x30
 8009536:	d815      	bhi.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
 8009538:	2b20      	cmp	r3, #32
 800953a:	d00c      	beq.n	8009556 <HAL_RCCEx_PeriphCLKConfig+0xbe2>
 800953c:	2b20      	cmp	r3, #32
 800953e:	d811      	bhi.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
 8009540:	2b00      	cmp	r3, #0
 8009542:	d018      	beq.n	8009576 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8009544:	2b10      	cmp	r3, #16
 8009546:	d10d      	bne.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
      case RCC_SPI6CLKSOURCE_PCLK4: /* PCLK4 as clock source for SPI6 */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q:  /* PLL2_Q is used as clock source for SPI6 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 8009548:	4b12      	ldr	r3, [pc, #72]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800954a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800954c:	4a11      	ldr	r2, [pc, #68]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800954e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009552:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009554:	e010      	b.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0xc04>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3_Q is used as clock source for SPI6 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 8009556:	4b0f      	ldr	r3, [pc, #60]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800955a:	4a0e      	ldr	r2, [pc, #56]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800955c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009560:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009562:	e009      	b.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0xc04>
      case RCC_SPI6CLKSOURCE_HSE: /* HSE oscillator is used as source for SPI6 */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009564:	2301      	movs	r3, #1
 8009566:	75fb      	strb	r3, [r7, #23]
        break;
 8009568:	e006      	b.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
 800956a:	bf00      	nop
 800956c:	e004      	b.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
 800956e:	bf00      	nop
 8009570:	e002      	b.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
 8009572:	bf00      	nop
 8009574:	e000      	b.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
 8009576:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009578:	7dfb      	ldrb	r3, [r7, #23]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d10c      	bne.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0xc24>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800957e:	4b05      	ldr	r3, [pc, #20]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009582:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800958a:	4902      	ldr	r1, [pc, #8]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800958c:	4313      	orrs	r3, r2
 800958e:	658b      	str	r3, [r1, #88]	@ 0x58
 8009590:	e004      	b.n	800959c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8009592:	bf00      	nop
 8009594:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009598:	7dfb      	ldrb	r3, [r7, #23]
 800959a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d034      	beq.n	8009612 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    switch (PeriphClkInit->Usart1ClockSelection)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80095ac:	2b05      	cmp	r3, #5
 80095ae:	d81d      	bhi.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80095b0:	a201      	add	r2, pc, #4	@ (adr r2, 80095b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80095b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095b6:	bf00      	nop
 80095b8:	080095f3 	.word	0x080095f3
 80095bc:	080095d1 	.word	0x080095d1
 80095c0:	080095df 	.word	0x080095df
 80095c4:	080095f3 	.word	0x080095f3
 80095c8:	080095f3 	.word	0x080095f3
 80095cc:	080095f3 	.word	0x080095f3
      case RCC_USART1CLKSOURCE_PCLK2: /* PCLK2 as clock source for USART1 */
        /* USART1 clock source configuration done later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q: /* PLL2_Q is used as clock source for USART1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 80095d0:	4b69      	ldr	r3, [pc, #420]	@ (8009778 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80095d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095d4:	4a68      	ldr	r2, [pc, #416]	@ (8009778 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80095d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80095da:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART1 clock source configuration done later after clock selection check */
        break;
 80095dc:	e00a      	b.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0xc80>

      case RCC_USART1CLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USART1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 80095de:	4b66      	ldr	r3, [pc, #408]	@ (8009778 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80095e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095e2:	4a65      	ldr	r2, [pc, #404]	@ (8009778 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80095e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80095e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART1 clock source configuration done later after clock selection check */
        break;
 80095ea:	e003      	b.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0xc80>
      case RCC_USART1CLKSOURCE_LSE: /* LSE oscillator is used as source for USART1 */
        /* USART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095ec:	2301      	movs	r3, #1
 80095ee:	75fb      	strb	r3, [r7, #23]
        break;
 80095f0:	e000      	b.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0xc80>
        break;
 80095f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095f4:	7dfb      	ldrb	r3, [r7, #23]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d109      	bne.n	800960e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
    {
      /* Set the source of USART1 clock */
      __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80095fa:	4b5f      	ldr	r3, [pc, #380]	@ (8009778 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80095fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095fe:	f023 0207 	bic.w	r2, r3, #7
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009606:	495c      	ldr	r1, [pc, #368]	@ (8009778 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8009608:	4313      	orrs	r3, r2
 800960a:	654b      	str	r3, [r1, #84]	@ 0x54
 800960c:	e001      	b.n	8009612 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800960e:	7dfb      	ldrb	r3, [r7, #23]
 8009610:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------- USART2/USART3/UART4/UART5/UART7/UART8 Configuration --------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800961a:	2b00      	cmp	r3, #0
 800961c:	d033      	beq.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0xd12>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART234578CLKSOURCE(PeriphClkInit->Usart234578ClockSelection));

    switch (PeriphClkInit->Usart234578ClockSelection)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009622:	2b05      	cmp	r3, #5
 8009624:	d81c      	bhi.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0xcec>
 8009626:	a201      	add	r2, pc, #4	@ (adr r2, 800962c <HAL_RCCEx_PeriphCLKConfig+0xcb8>)
 8009628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800962c:	08009667 	.word	0x08009667
 8009630:	08009645 	.word	0x08009645
 8009634:	08009653 	.word	0x08009653
 8009638:	08009667 	.word	0x08009667
 800963c:	08009667 	.word	0x08009667
 8009640:	08009667 	.word	0x08009667
      case RCC_USART234578CLKSOURCE_PCLK1: /* PCLK1 as clock source for USART2/USART3/UART4/UART5/UART7/UART8 */
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2Q: /* PLL2_Q is used as clock source for USART2/USART3/UART4/UART5/UART7/UART8 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 8009644:	4b4c      	ldr	r3, [pc, #304]	@ (8009778 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8009646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009648:	4a4b      	ldr	r2, [pc, #300]	@ (8009778 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 800964a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800964e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;
 8009650:	e00a      	b.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0xcf4>

      case RCC_USART234578CLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USART2/USART3/UART4/UART5/UART7/UART8 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 8009652:	4b49      	ldr	r3, [pc, #292]	@ (8009778 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8009654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009656:	4a48      	ldr	r2, [pc, #288]	@ (8009778 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8009658:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800965c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;
 800965e:	e003      	b.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0xcf4>
        /* LSE,  oscillator is used as source of USART2/USART3/UART4/UART5/UART7/UART8 clock */
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009660:	2301      	movs	r3, #1
 8009662:	75fb      	strb	r3, [r7, #23]
        break;
 8009664:	e000      	b.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0xcf4>
        break;
 8009666:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009668:	7dfb      	ldrb	r3, [r7, #23]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d109      	bne.n	8009682 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
      /* Set the source of USART2/USART3/UART4/UART5/UART7/UART8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800966e:	4b42      	ldr	r3, [pc, #264]	@ (8009778 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8009670:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009672:	f023 0207 	bic.w	r2, r3, #7
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800967a:	493f      	ldr	r1, [pc, #252]	@ (8009778 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 800967c:	4313      	orrs	r3, r2
 800967e:	650b      	str	r3, [r1, #80]	@ 0x50
 8009680:	e001      	b.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0xd12>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009682:	7dfb      	ldrb	r3, [r7, #23]
 8009684:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USBPHYC Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHYC) == RCC_PERIPHCLK_USBPHYC)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800968e:	2b00      	cmp	r3, #0
 8009690:	d027      	beq.n	80096e2 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCCLKSOURCE(PeriphClkInit->UsbPhycClockSelection));

    switch (PeriphClkInit->UsbPhycClockSelection)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009696:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800969a:	d008      	beq.n	80096ae <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800969c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80096a0:	d80c      	bhi.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0xd48>
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d00d      	beq.n	80096c2 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80096a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096aa:	d00a      	beq.n	80096c2 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80096ac:	e006      	b.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0xd48>
    {
      case RCC_USBPHYCCLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USBPHYC */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 80096ae:	4b32      	ldr	r3, [pc, #200]	@ (8009778 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80096b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096b2:	4a31      	ldr	r2, [pc, #196]	@ (8009778 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80096b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80096b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USBPHYC clock source configuration done later after clock selection check */
        break;
 80096ba:	e003      	b.n	80096c4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
      case RCC_USBPHYCCLKSOURCE_HSE_DIV2: /* HSE divided by 2 is used as clock source for USBPHYC */
        /* USBPHYC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80096bc:	2301      	movs	r3, #1
 80096be:	75fb      	strb	r3, [r7, #23]
        break;
 80096c0:	e000      	b.n	80096c4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80096c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096c4:	7dfb      	ldrb	r3, [r7, #23]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d109      	bne.n	80096de <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    {
      /* Set the source of USBPHYC clock*/
      __HAL_RCC_USBPHYC_CONFIG(PeriphClkInit->UsbPhycClockSelection);
 80096ca:	4b2b      	ldr	r3, [pc, #172]	@ (8009778 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80096cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096ce:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096d6:	4928      	ldr	r1, [pc, #160]	@ (8009778 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 80096d8:	4313      	orrs	r3, r2
 80096da:	64cb      	str	r3, [r1, #76]	@ 0x4c
 80096dc:	e001      	b.n	80096e2 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096de:	7dfb      	ldrb	r3, [r7, #23]
 80096e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USBOTGFS Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGFS) == RCC_PERIPHCLK_USBOTGFS)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	da2c      	bge.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOTGFSCLKSOURCE(PeriphClkInit->UsbOtgFsClockSelection));

    switch (PeriphClkInit->UsbOtgFsClockSelection)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80096ee:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80096f2:	d017      	beq.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 80096f4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80096f8:	d811      	bhi.n	800971e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
 80096fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80096fe:	d011      	beq.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 8009700:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009704:	d80b      	bhi.n	800971e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
 8009706:	2b00      	cmp	r3, #0
 8009708:	d00c      	beq.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 800970a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800970e:	d106      	bne.n	800971e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    {
      case RCC_USBOTGFSCLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USB OTG FS */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 8009710:	4b19      	ldr	r3, [pc, #100]	@ (8009778 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8009712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009714:	4a18      	ldr	r2, [pc, #96]	@ (8009778 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8009716:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800971a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USB OTG FS clock source configuration done later after clock selection check */
        break;
 800971c:	e003      	b.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0xdb2>
      case RCC_USBOTGFSCLKSOURCE_CLK48: /* USBPHYC CLK48 is used as clock source for USB OTG FS */
        /* USB OTG FS clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800971e:	2301      	movs	r3, #1
 8009720:	75fb      	strb	r3, [r7, #23]
        break;
 8009722:	e000      	b.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0xdb2>
        break;
 8009724:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009726:	7dfb      	ldrb	r3, [r7, #23]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d109      	bne.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0xdcc>
    {
      /* Set the source of USBPHYC clock*/
      __HAL_RCC_USBOTGFS_CONFIG(PeriphClkInit->UsbOtgFsClockSelection);
 800972c:	4b12      	ldr	r3, [pc, #72]	@ (8009778 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 800972e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009730:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009738:	490f      	ldr	r1, [pc, #60]	@ (8009778 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 800973a:	4313      	orrs	r3, r2
 800973c:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800973e:	e001      	b.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009740:	7dfb      	ldrb	r3, [r7, #23]
 8009742:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800974c:	2b00      	cmp	r3, #0
 800974e:	d009      	beq.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0xdf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER_CONFIG(PeriphClkInit->TIMPresSelection);
 8009750:	4b09      	ldr	r3, [pc, #36]	@ (8009778 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8009752:	691b      	ldr	r3, [r3, #16]
 8009754:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800975e:	4906      	ldr	r1, [pc, #24]	@ (8009778 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8009760:	4313      	orrs	r3, r2
 8009762:	610b      	str	r3, [r1, #16]
  }

  if (status == HAL_OK)
 8009764:	7dbb      	ldrb	r3, [r7, #22]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d101      	bne.n	800976e <HAL_RCCEx_PeriphCLKConfig+0xdfa>
  {
    return HAL_OK;
 800976a:	2300      	movs	r3, #0
 800976c:	e000      	b.n	8009770 <HAL_RCCEx_PeriphCLKConfig+0xdfc>
  }
  return HAL_ERROR;
 800976e:	2301      	movs	r3, #1
}
 8009770:	4618      	mov	r0, r3
 8009772:	3718      	adds	r7, #24
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}
 8009778:	58024400 	.word	0x58024400

0800977c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800977c:	b480      	push	{r7}
 800977e:	b085      	sub	sp, #20
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800978a:	b2db      	uxtb	r3, r3
 800978c:	2b01      	cmp	r3, #1
 800978e:	d001      	beq.n	8009794 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009790:	2301      	movs	r3, #1
 8009792:	e054      	b.n	800983e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2202      	movs	r2, #2
 8009798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	68da      	ldr	r2, [r3, #12]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f042 0201 	orr.w	r2, r2, #1
 80097aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f1b3 4f84 	cmp.w	r3, #1107296256	@ 0x42000000
 80097b4:	d022      	beq.n	80097fc <HAL_TIM_Base_Start_IT+0x80>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097be:	d01d      	beq.n	80097fc <HAL_TIM_Base_Start_IT+0x80>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	4a21      	ldr	r2, [pc, #132]	@ (800984c <HAL_TIM_Base_Start_IT+0xd0>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d018      	beq.n	80097fc <HAL_TIM_Base_Start_IT+0x80>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4a20      	ldr	r2, [pc, #128]	@ (8009850 <HAL_TIM_Base_Start_IT+0xd4>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d013      	beq.n	80097fc <HAL_TIM_Base_Start_IT+0x80>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a1e      	ldr	r2, [pc, #120]	@ (8009854 <HAL_TIM_Base_Start_IT+0xd8>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d00e      	beq.n	80097fc <HAL_TIM_Base_Start_IT+0x80>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4a1d      	ldr	r2, [pc, #116]	@ (8009858 <HAL_TIM_Base_Start_IT+0xdc>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d009      	beq.n	80097fc <HAL_TIM_Base_Start_IT+0x80>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4a1b      	ldr	r2, [pc, #108]	@ (800985c <HAL_TIM_Base_Start_IT+0xe0>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d004      	beq.n	80097fc <HAL_TIM_Base_Start_IT+0x80>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4a1a      	ldr	r2, [pc, #104]	@ (8009860 <HAL_TIM_Base_Start_IT+0xe4>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d115      	bne.n	8009828 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	689a      	ldr	r2, [r3, #8]
 8009802:	4b18      	ldr	r3, [pc, #96]	@ (8009864 <HAL_TIM_Base_Start_IT+0xe8>)
 8009804:	4013      	ands	r3, r2
 8009806:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2b06      	cmp	r3, #6
 800980c:	d015      	beq.n	800983a <HAL_TIM_Base_Start_IT+0xbe>
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009814:	d011      	beq.n	800983a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	681a      	ldr	r2, [r3, #0]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f042 0201 	orr.w	r2, r2, #1
 8009824:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009826:	e008      	b.n	800983a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	681a      	ldr	r2, [r3, #0]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f042 0201 	orr.w	r2, r2, #1
 8009836:	601a      	str	r2, [r3, #0]
 8009838:	e000      	b.n	800983c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800983a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800983c:	2300      	movs	r3, #0
}
 800983e:	4618      	mov	r0, r3
 8009840:	3714      	adds	r7, #20
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr
 800984a:	bf00      	nop
 800984c:	40000400 	.word	0x40000400
 8009850:	40000800 	.word	0x40000800
 8009854:	40000c00 	.word	0x40000c00
 8009858:	42004c00 	.word	0x42004c00
 800985c:	40001800 	.word	0x40001800
 8009860:	42004000 	.word	0x42004000
 8009864:	00010007 	.word	0x00010007

08009868 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009868:	b480      	push	{r7}
 800986a:	b083      	sub	sp, #12
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	68da      	ldr	r2, [r3, #12]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f022 0201 	bic.w	r2, r2, #1
 800987e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	6a1a      	ldr	r2, [r3, #32]
 8009886:	f241 1311 	movw	r3, #4369	@ 0x1111
 800988a:	4013      	ands	r3, r2
 800988c:	2b00      	cmp	r3, #0
 800988e:	d10f      	bne.n	80098b0 <HAL_TIM_Base_Stop_IT+0x48>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	6a1a      	ldr	r2, [r3, #32]
 8009896:	f244 4344 	movw	r3, #17476	@ 0x4444
 800989a:	4013      	ands	r3, r2
 800989c:	2b00      	cmp	r3, #0
 800989e:	d107      	bne.n	80098b0 <HAL_TIM_Base_Stop_IT+0x48>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	681a      	ldr	r2, [r3, #0]
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f022 0201 	bic.w	r2, r2, #1
 80098ae:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2201      	movs	r2, #1
 80098b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80098b8:	2300      	movs	r3, #0
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	370c      	adds	r7, #12
 80098be:	46bd      	mov	sp, r7
 80098c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c4:	4770      	bx	lr

080098c6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80098c6:	b580      	push	{r7, lr}
 80098c8:	b082      	sub	sp, #8
 80098ca:	af00      	add	r7, sp, #0
 80098cc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d101      	bne.n	80098d8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80098d4:	2301      	movs	r3, #1
 80098d6:	e042      	b.n	800995e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d106      	bne.n	80098f0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2200      	movs	r2, #0
 80098e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f7f7 fdce 	bl	800148c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2224      	movs	r2, #36	@ 0x24
 80098f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	681a      	ldr	r2, [r3, #0]
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f022 0201 	bic.w	r2, r2, #1
 8009906:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800990c:	2b00      	cmp	r3, #0
 800990e:	d002      	beq.n	8009916 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f000 fbbf 	bl	800a094 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f000 f826 	bl	8009968 <UART_SetConfig>
 800991c:	4603      	mov	r3, r0
 800991e:	2b01      	cmp	r3, #1
 8009920:	d101      	bne.n	8009926 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009922:	2301      	movs	r3, #1
 8009924:	e01b      	b.n	800995e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	685a      	ldr	r2, [r3, #4]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009934:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	689a      	ldr	r2, [r3, #8]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009944:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	681a      	ldr	r2, [r3, #0]
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f042 0201 	orr.w	r2, r2, #1
 8009954:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f000 fc3e 	bl	800a1d8 <UART_CheckIdleState>
 800995c:	4603      	mov	r3, r0
}
 800995e:	4618      	mov	r0, r3
 8009960:	3708      	adds	r7, #8
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
	...

08009968 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009968:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800996c:	b08c      	sub	sp, #48	@ 0x30
 800996e:	af00      	add	r7, sp, #0
 8009970:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009972:	2300      	movs	r3, #0
 8009974:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	689a      	ldr	r2, [r3, #8]
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	691b      	ldr	r3, [r3, #16]
 8009980:	431a      	orrs	r2, r3
 8009982:	697b      	ldr	r3, [r7, #20]
 8009984:	695b      	ldr	r3, [r3, #20]
 8009986:	431a      	orrs	r2, r3
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	69db      	ldr	r3, [r3, #28]
 800998c:	4313      	orrs	r3, r2
 800998e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	681a      	ldr	r2, [r3, #0]
 8009996:	4bb3      	ldr	r3, [pc, #716]	@ (8009c64 <UART_SetConfig+0x2fc>)
 8009998:	4013      	ands	r3, r2
 800999a:	697a      	ldr	r2, [r7, #20]
 800999c:	6812      	ldr	r2, [r2, #0]
 800999e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80099a0:	430b      	orrs	r3, r1
 80099a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	68da      	ldr	r2, [r3, #12]
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	430a      	orrs	r2, r1
 80099b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	699b      	ldr	r3, [r3, #24]
 80099be:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4aa8      	ldr	r2, [pc, #672]	@ (8009c68 <UART_SetConfig+0x300>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d004      	beq.n	80099d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	6a1b      	ldr	r3, [r3, #32]
 80099ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80099d0:	4313      	orrs	r3, r2
 80099d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	689a      	ldr	r2, [r3, #8]
 80099da:	4ba4      	ldr	r3, [pc, #656]	@ (8009c6c <UART_SetConfig+0x304>)
 80099dc:	4013      	ands	r3, r2
 80099de:	697a      	ldr	r2, [r7, #20]
 80099e0:	6812      	ldr	r2, [r2, #0]
 80099e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80099e4:	430b      	orrs	r3, r1
 80099e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099ee:	f023 010f 	bic.w	r1, r3, #15
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	430a      	orrs	r2, r1
 80099fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4a9b      	ldr	r2, [pc, #620]	@ (8009c70 <UART_SetConfig+0x308>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d131      	bne.n	8009a6c <UART_SetConfig+0x104>
 8009a08:	4b9a      	ldr	r3, [pc, #616]	@ (8009c74 <UART_SetConfig+0x30c>)
 8009a0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a0c:	f003 0307 	and.w	r3, r3, #7
 8009a10:	2b05      	cmp	r3, #5
 8009a12:	d827      	bhi.n	8009a64 <UART_SetConfig+0xfc>
 8009a14:	a201      	add	r2, pc, #4	@ (adr r2, 8009a1c <UART_SetConfig+0xb4>)
 8009a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a1a:	bf00      	nop
 8009a1c:	08009a35 	.word	0x08009a35
 8009a20:	08009a3d 	.word	0x08009a3d
 8009a24:	08009a45 	.word	0x08009a45
 8009a28:	08009a4d 	.word	0x08009a4d
 8009a2c:	08009a55 	.word	0x08009a55
 8009a30:	08009a5d 	.word	0x08009a5d
 8009a34:	2301      	movs	r3, #1
 8009a36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a3a:	e0a0      	b.n	8009b7e <UART_SetConfig+0x216>
 8009a3c:	2304      	movs	r3, #4
 8009a3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a42:	e09c      	b.n	8009b7e <UART_SetConfig+0x216>
 8009a44:	2308      	movs	r3, #8
 8009a46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a4a:	e098      	b.n	8009b7e <UART_SetConfig+0x216>
 8009a4c:	2310      	movs	r3, #16
 8009a4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a52:	e094      	b.n	8009b7e <UART_SetConfig+0x216>
 8009a54:	2320      	movs	r3, #32
 8009a56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a5a:	e090      	b.n	8009b7e <UART_SetConfig+0x216>
 8009a5c:	2340      	movs	r3, #64	@ 0x40
 8009a5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a62:	e08c      	b.n	8009b7e <UART_SetConfig+0x216>
 8009a64:	2380      	movs	r3, #128	@ 0x80
 8009a66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a6a:	e088      	b.n	8009b7e <UART_SetConfig+0x216>
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4a81      	ldr	r2, [pc, #516]	@ (8009c78 <UART_SetConfig+0x310>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d018      	beq.n	8009aa8 <UART_SetConfig+0x140>
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4a80      	ldr	r2, [pc, #512]	@ (8009c7c <UART_SetConfig+0x314>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d013      	beq.n	8009aa8 <UART_SetConfig+0x140>
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a7e      	ldr	r2, [pc, #504]	@ (8009c80 <UART_SetConfig+0x318>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d00e      	beq.n	8009aa8 <UART_SetConfig+0x140>
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4a7d      	ldr	r2, [pc, #500]	@ (8009c84 <UART_SetConfig+0x31c>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d009      	beq.n	8009aa8 <UART_SetConfig+0x140>
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4a7b      	ldr	r2, [pc, #492]	@ (8009c88 <UART_SetConfig+0x320>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d004      	beq.n	8009aa8 <UART_SetConfig+0x140>
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	4a7a      	ldr	r2, [pc, #488]	@ (8009c8c <UART_SetConfig+0x324>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d131      	bne.n	8009b0c <UART_SetConfig+0x1a4>
 8009aa8:	4b72      	ldr	r3, [pc, #456]	@ (8009c74 <UART_SetConfig+0x30c>)
 8009aaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009aac:	f003 0307 	and.w	r3, r3, #7
 8009ab0:	2b05      	cmp	r3, #5
 8009ab2:	d827      	bhi.n	8009b04 <UART_SetConfig+0x19c>
 8009ab4:	a201      	add	r2, pc, #4	@ (adr r2, 8009abc <UART_SetConfig+0x154>)
 8009ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aba:	bf00      	nop
 8009abc:	08009ad5 	.word	0x08009ad5
 8009ac0:	08009add 	.word	0x08009add
 8009ac4:	08009ae5 	.word	0x08009ae5
 8009ac8:	08009aed 	.word	0x08009aed
 8009acc:	08009af5 	.word	0x08009af5
 8009ad0:	08009afd 	.word	0x08009afd
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ada:	e016      	b.n	8009b0a <UART_SetConfig+0x1a2>
 8009adc:	2304      	movs	r3, #4
 8009ade:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ae2:	e012      	b.n	8009b0a <UART_SetConfig+0x1a2>
 8009ae4:	2308      	movs	r3, #8
 8009ae6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009aea:	e00e      	b.n	8009b0a <UART_SetConfig+0x1a2>
 8009aec:	2310      	movs	r3, #16
 8009aee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009af2:	e00a      	b.n	8009b0a <UART_SetConfig+0x1a2>
 8009af4:	2320      	movs	r3, #32
 8009af6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009afa:	e006      	b.n	8009b0a <UART_SetConfig+0x1a2>
 8009afc:	2340      	movs	r3, #64	@ 0x40
 8009afe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b02:	e002      	b.n	8009b0a <UART_SetConfig+0x1a2>
 8009b04:	2380      	movs	r3, #128	@ 0x80
 8009b06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b0a:	e038      	b.n	8009b7e <UART_SetConfig+0x216>
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4a55      	ldr	r2, [pc, #340]	@ (8009c68 <UART_SetConfig+0x300>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d130      	bne.n	8009b78 <UART_SetConfig+0x210>
 8009b16:	4b57      	ldr	r3, [pc, #348]	@ (8009c74 <UART_SetConfig+0x30c>)
 8009b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b1a:	f003 0307 	and.w	r3, r3, #7
 8009b1e:	2b05      	cmp	r3, #5
 8009b20:	d826      	bhi.n	8009b70 <UART_SetConfig+0x208>
 8009b22:	a201      	add	r2, pc, #4	@ (adr r2, 8009b28 <UART_SetConfig+0x1c0>)
 8009b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b28:	08009b41 	.word	0x08009b41
 8009b2c:	08009b49 	.word	0x08009b49
 8009b30:	08009b51 	.word	0x08009b51
 8009b34:	08009b59 	.word	0x08009b59
 8009b38:	08009b61 	.word	0x08009b61
 8009b3c:	08009b69 	.word	0x08009b69
 8009b40:	2302      	movs	r3, #2
 8009b42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b46:	e01a      	b.n	8009b7e <UART_SetConfig+0x216>
 8009b48:	2304      	movs	r3, #4
 8009b4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b4e:	e016      	b.n	8009b7e <UART_SetConfig+0x216>
 8009b50:	2308      	movs	r3, #8
 8009b52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b56:	e012      	b.n	8009b7e <UART_SetConfig+0x216>
 8009b58:	2310      	movs	r3, #16
 8009b5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b5e:	e00e      	b.n	8009b7e <UART_SetConfig+0x216>
 8009b60:	2320      	movs	r3, #32
 8009b62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b66:	e00a      	b.n	8009b7e <UART_SetConfig+0x216>
 8009b68:	2340      	movs	r3, #64	@ 0x40
 8009b6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b6e:	e006      	b.n	8009b7e <UART_SetConfig+0x216>
 8009b70:	2380      	movs	r3, #128	@ 0x80
 8009b72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b76:	e002      	b.n	8009b7e <UART_SetConfig+0x216>
 8009b78:	2380      	movs	r3, #128	@ 0x80
 8009b7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	4a39      	ldr	r2, [pc, #228]	@ (8009c68 <UART_SetConfig+0x300>)
 8009b84:	4293      	cmp	r3, r2
 8009b86:	f040 80fe 	bne.w	8009d86 <UART_SetConfig+0x41e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009b8a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009b8e:	2b20      	cmp	r3, #32
 8009b90:	dc48      	bgt.n	8009c24 <UART_SetConfig+0x2bc>
 8009b92:	2b02      	cmp	r3, #2
 8009b94:	f2c0 8088 	blt.w	8009ca8 <UART_SetConfig+0x340>
 8009b98:	3b02      	subs	r3, #2
 8009b9a:	2b1e      	cmp	r3, #30
 8009b9c:	f200 8084 	bhi.w	8009ca8 <UART_SetConfig+0x340>
 8009ba0:	a201      	add	r2, pc, #4	@ (adr r2, 8009ba8 <UART_SetConfig+0x240>)
 8009ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ba6:	bf00      	nop
 8009ba8:	08009c3b 	.word	0x08009c3b
 8009bac:	08009ca9 	.word	0x08009ca9
 8009bb0:	08009c2b 	.word	0x08009c2b
 8009bb4:	08009ca9 	.word	0x08009ca9
 8009bb8:	08009ca9 	.word	0x08009ca9
 8009bbc:	08009ca9 	.word	0x08009ca9
 8009bc0:	08009c33 	.word	0x08009c33
 8009bc4:	08009ca9 	.word	0x08009ca9
 8009bc8:	08009ca9 	.word	0x08009ca9
 8009bcc:	08009ca9 	.word	0x08009ca9
 8009bd0:	08009ca9 	.word	0x08009ca9
 8009bd4:	08009ca9 	.word	0x08009ca9
 8009bd8:	08009ca9 	.word	0x08009ca9
 8009bdc:	08009ca9 	.word	0x08009ca9
 8009be0:	08009c43 	.word	0x08009c43
 8009be4:	08009ca9 	.word	0x08009ca9
 8009be8:	08009ca9 	.word	0x08009ca9
 8009bec:	08009ca9 	.word	0x08009ca9
 8009bf0:	08009ca9 	.word	0x08009ca9
 8009bf4:	08009ca9 	.word	0x08009ca9
 8009bf8:	08009ca9 	.word	0x08009ca9
 8009bfc:	08009ca9 	.word	0x08009ca9
 8009c00:	08009ca9 	.word	0x08009ca9
 8009c04:	08009ca9 	.word	0x08009ca9
 8009c08:	08009ca9 	.word	0x08009ca9
 8009c0c:	08009ca9 	.word	0x08009ca9
 8009c10:	08009ca9 	.word	0x08009ca9
 8009c14:	08009ca9 	.word	0x08009ca9
 8009c18:	08009ca9 	.word	0x08009ca9
 8009c1c:	08009ca9 	.word	0x08009ca9
 8009c20:	08009c9b 	.word	0x08009c9b
 8009c24:	2b40      	cmp	r3, #64	@ 0x40
 8009c26:	d03b      	beq.n	8009ca0 <UART_SetConfig+0x338>
 8009c28:	e03e      	b.n	8009ca8 <UART_SetConfig+0x340>
    {
      case UART_CLOCKSOURCE_PLL2Q:
        pclk = HAL_RCC_GetPLL2QFreq();
 8009c2a:	f7fe fd6b 	bl	8008704 <HAL_RCC_GetPLL2QFreq>
 8009c2e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009c30:	e040      	b.n	8009cb4 <UART_SetConfig+0x34c>
      case UART_CLOCKSOURCE_PLL3Q:
        pclk = HAL_RCC_GetPLL3QFreq();
 8009c32:	f7fe fd7d 	bl	8008730 <HAL_RCC_GetPLL3QFreq>
 8009c36:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009c38:	e03c      	b.n	8009cb4 <UART_SetConfig+0x34c>
      case UART_CLOCKSOURCE_PCLK4:
        pclk = HAL_RCC_GetPCLK4Freq();
 8009c3a:	f7fe fd47 	bl	80086cc <HAL_RCC_GetPCLK4Freq>
 8009c3e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009c40:	e038      	b.n	8009cb4 <UART_SetConfig+0x34c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c42:	4b0c      	ldr	r3, [pc, #48]	@ (8009c74 <UART_SetConfig+0x30c>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f003 0320 	and.w	r3, r3, #32
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d022      	beq.n	8009c94 <UART_SetConfig+0x32c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009c4e:	4b09      	ldr	r3, [pc, #36]	@ (8009c74 <UART_SetConfig+0x30c>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	08db      	lsrs	r3, r3, #3
 8009c54:	f003 0303 	and.w	r3, r3, #3
 8009c58:	4a0d      	ldr	r2, [pc, #52]	@ (8009c90 <UART_SetConfig+0x328>)
 8009c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8009c5e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009c60:	e028      	b.n	8009cb4 <UART_SetConfig+0x34c>
 8009c62:	bf00      	nop
 8009c64:	cfff69f3 	.word	0xcfff69f3
 8009c68:	58000c00 	.word	0x58000c00
 8009c6c:	11fff4ff 	.word	0x11fff4ff
 8009c70:	42001000 	.word	0x42001000
 8009c74:	58024400 	.word	0x58024400
 8009c78:	40004400 	.word	0x40004400
 8009c7c:	40004800 	.word	0x40004800
 8009c80:	40004c00 	.word	0x40004c00
 8009c84:	40005000 	.word	0x40005000
 8009c88:	40007800 	.word	0x40007800
 8009c8c:	40007c00 	.word	0x40007c00
 8009c90:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009c94:	4b99      	ldr	r3, [pc, #612]	@ (8009efc <UART_SetConfig+0x594>)
 8009c96:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009c98:	e00c      	b.n	8009cb4 <UART_SetConfig+0x34c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009c9a:	4b99      	ldr	r3, [pc, #612]	@ (8009f00 <UART_SetConfig+0x598>)
 8009c9c:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009c9e:	e009      	b.n	8009cb4 <UART_SetConfig+0x34c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ca0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ca4:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009ca6:	e005      	b.n	8009cb4 <UART_SetConfig+0x34c>
      default:
        pclk = 0U;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009cac:	2301      	movs	r3, #1
 8009cae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009cb2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	f000 81ce 	beq.w	800a058 <UART_SetConfig+0x6f0>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cc0:	4a90      	ldr	r2, [pc, #576]	@ (8009f04 <UART_SetConfig+0x59c>)
 8009cc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cca:	fbb3 f3f2 	udiv	r3, r3, r2
 8009cce:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	685a      	ldr	r2, [r3, #4]
 8009cd4:	4613      	mov	r3, r2
 8009cd6:	005b      	lsls	r3, r3, #1
 8009cd8:	4413      	add	r3, r2
 8009cda:	69ba      	ldr	r2, [r7, #24]
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	d305      	bcc.n	8009cec <UART_SetConfig+0x384>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009ce6:	69ba      	ldr	r2, [r7, #24]
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d903      	bls.n	8009cf4 <UART_SetConfig+0x38c>
      {
        ret = HAL_ERROR;
 8009cec:	2301      	movs	r3, #1
 8009cee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009cf2:	e1b1      	b.n	800a058 <UART_SetConfig+0x6f0>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	60bb      	str	r3, [r7, #8]
 8009cfa:	60fa      	str	r2, [r7, #12]
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d00:	4a80      	ldr	r2, [pc, #512]	@ (8009f04 <UART_SetConfig+0x59c>)
 8009d02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d06:	b29b      	uxth	r3, r3
 8009d08:	2200      	movs	r2, #0
 8009d0a:	603b      	str	r3, [r7, #0]
 8009d0c:	607a      	str	r2, [r7, #4]
 8009d0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009d16:	f7f6 faeb 	bl	80002f0 <__aeabi_uldivmod>
 8009d1a:	4602      	mov	r2, r0
 8009d1c:	460b      	mov	r3, r1
 8009d1e:	4610      	mov	r0, r2
 8009d20:	4619      	mov	r1, r3
 8009d22:	f04f 0200 	mov.w	r2, #0
 8009d26:	f04f 0300 	mov.w	r3, #0
 8009d2a:	020b      	lsls	r3, r1, #8
 8009d2c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009d30:	0202      	lsls	r2, r0, #8
 8009d32:	6979      	ldr	r1, [r7, #20]
 8009d34:	6849      	ldr	r1, [r1, #4]
 8009d36:	0849      	lsrs	r1, r1, #1
 8009d38:	2000      	movs	r0, #0
 8009d3a:	460c      	mov	r4, r1
 8009d3c:	4605      	mov	r5, r0
 8009d3e:	eb12 0804 	adds.w	r8, r2, r4
 8009d42:	eb43 0905 	adc.w	r9, r3, r5
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	469a      	mov	sl, r3
 8009d4e:	4693      	mov	fp, r2
 8009d50:	4652      	mov	r2, sl
 8009d52:	465b      	mov	r3, fp
 8009d54:	4640      	mov	r0, r8
 8009d56:	4649      	mov	r1, r9
 8009d58:	f7f6 faca 	bl	80002f0 <__aeabi_uldivmod>
 8009d5c:	4602      	mov	r2, r0
 8009d5e:	460b      	mov	r3, r1
 8009d60:	4613      	mov	r3, r2
 8009d62:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009d64:	6a3b      	ldr	r3, [r7, #32]
 8009d66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009d6a:	d308      	bcc.n	8009d7e <UART_SetConfig+0x416>
 8009d6c:	6a3b      	ldr	r3, [r7, #32]
 8009d6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009d72:	d204      	bcs.n	8009d7e <UART_SetConfig+0x416>
        {
          huart->Instance->BRR = usartdiv;
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	6a3a      	ldr	r2, [r7, #32]
 8009d7a:	60da      	str	r2, [r3, #12]
 8009d7c:	e16c      	b.n	800a058 <UART_SetConfig+0x6f0>
        }
        else
        {
          ret = HAL_ERROR;
 8009d7e:	2301      	movs	r3, #1
 8009d80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009d84:	e168      	b.n	800a058 <UART_SetConfig+0x6f0>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d86:	697b      	ldr	r3, [r7, #20]
 8009d88:	69db      	ldr	r3, [r3, #28]
 8009d8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d8e:	f040 80bd 	bne.w	8009f0c <UART_SetConfig+0x5a4>
  {
    switch (clocksource)
 8009d92:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009d96:	2b20      	cmp	r3, #32
 8009d98:	dc48      	bgt.n	8009e2c <UART_SetConfig+0x4c4>
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	db73      	blt.n	8009e86 <UART_SetConfig+0x51e>
 8009d9e:	2b20      	cmp	r3, #32
 8009da0:	d871      	bhi.n	8009e86 <UART_SetConfig+0x51e>
 8009da2:	a201      	add	r2, pc, #4	@ (adr r2, 8009da8 <UART_SetConfig+0x440>)
 8009da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009da8:	08009e33 	.word	0x08009e33
 8009dac:	08009e3b 	.word	0x08009e3b
 8009db0:	08009e87 	.word	0x08009e87
 8009db4:	08009e87 	.word	0x08009e87
 8009db8:	08009e43 	.word	0x08009e43
 8009dbc:	08009e87 	.word	0x08009e87
 8009dc0:	08009e87 	.word	0x08009e87
 8009dc4:	08009e87 	.word	0x08009e87
 8009dc8:	08009e4b 	.word	0x08009e4b
 8009dcc:	08009e87 	.word	0x08009e87
 8009dd0:	08009e87 	.word	0x08009e87
 8009dd4:	08009e87 	.word	0x08009e87
 8009dd8:	08009e87 	.word	0x08009e87
 8009ddc:	08009e87 	.word	0x08009e87
 8009de0:	08009e87 	.word	0x08009e87
 8009de4:	08009e87 	.word	0x08009e87
 8009de8:	08009e53 	.word	0x08009e53
 8009dec:	08009e87 	.word	0x08009e87
 8009df0:	08009e87 	.word	0x08009e87
 8009df4:	08009e87 	.word	0x08009e87
 8009df8:	08009e87 	.word	0x08009e87
 8009dfc:	08009e87 	.word	0x08009e87
 8009e00:	08009e87 	.word	0x08009e87
 8009e04:	08009e87 	.word	0x08009e87
 8009e08:	08009e87 	.word	0x08009e87
 8009e0c:	08009e87 	.word	0x08009e87
 8009e10:	08009e87 	.word	0x08009e87
 8009e14:	08009e87 	.word	0x08009e87
 8009e18:	08009e87 	.word	0x08009e87
 8009e1c:	08009e87 	.word	0x08009e87
 8009e20:	08009e87 	.word	0x08009e87
 8009e24:	08009e87 	.word	0x08009e87
 8009e28:	08009e79 	.word	0x08009e79
 8009e2c:	2b40      	cmp	r3, #64	@ 0x40
 8009e2e:	d026      	beq.n	8009e7e <UART_SetConfig+0x516>
 8009e30:	e029      	b.n	8009e86 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e32:	f7fe fc13 	bl	800865c <HAL_RCC_GetPCLK1Freq>
 8009e36:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009e38:	e02b      	b.n	8009e92 <UART_SetConfig+0x52a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e3a:	f7fe fc2b 	bl	8008694 <HAL_RCC_GetPCLK2Freq>
 8009e3e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009e40:	e027      	b.n	8009e92 <UART_SetConfig+0x52a>
      case UART_CLOCKSOURCE_PLL2Q:
        pclk = HAL_RCC_GetPLL2QFreq();
 8009e42:	f7fe fc5f 	bl	8008704 <HAL_RCC_GetPLL2QFreq>
 8009e46:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009e48:	e023      	b.n	8009e92 <UART_SetConfig+0x52a>
      case UART_CLOCKSOURCE_PLL3Q:
        pclk = HAL_RCC_GetPLL3QFreq();
 8009e4a:	f7fe fc71 	bl	8008730 <HAL_RCC_GetPLL3QFreq>
 8009e4e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009e50:	e01f      	b.n	8009e92 <UART_SetConfig+0x52a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e52:	4b2d      	ldr	r3, [pc, #180]	@ (8009f08 <UART_SetConfig+0x5a0>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f003 0320 	and.w	r3, r3, #32
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d009      	beq.n	8009e72 <UART_SetConfig+0x50a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009e5e:	4b2a      	ldr	r3, [pc, #168]	@ (8009f08 <UART_SetConfig+0x5a0>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	08db      	lsrs	r3, r3, #3
 8009e64:	f003 0303 	and.w	r3, r3, #3
 8009e68:	4a24      	ldr	r2, [pc, #144]	@ (8009efc <UART_SetConfig+0x594>)
 8009e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8009e6e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009e70:	e00f      	b.n	8009e92 <UART_SetConfig+0x52a>
          pclk = (uint32_t) HSI_VALUE;
 8009e72:	4b22      	ldr	r3, [pc, #136]	@ (8009efc <UART_SetConfig+0x594>)
 8009e74:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009e76:	e00c      	b.n	8009e92 <UART_SetConfig+0x52a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009e78:	4b21      	ldr	r3, [pc, #132]	@ (8009f00 <UART_SetConfig+0x598>)
 8009e7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009e7c:	e009      	b.n	8009e92 <UART_SetConfig+0x52a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e82:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009e84:	e005      	b.n	8009e92 <UART_SetConfig+0x52a>
      default:
        pclk = 0U;
 8009e86:	2300      	movs	r3, #0
 8009e88:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009e90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	f000 80df 	beq.w	800a058 <UART_SetConfig+0x6f0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e9e:	4a19      	ldr	r2, [pc, #100]	@ (8009f04 <UART_SetConfig+0x59c>)
 8009ea0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ea4:	461a      	mov	r2, r3
 8009ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ea8:	fbb3 f3f2 	udiv	r3, r3, r2
 8009eac:	005a      	lsls	r2, r3, #1
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	085b      	lsrs	r3, r3, #1
 8009eb4:	441a      	add	r2, r3
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	685b      	ldr	r3, [r3, #4]
 8009eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ebe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ec0:	6a3b      	ldr	r3, [r7, #32]
 8009ec2:	2b0f      	cmp	r3, #15
 8009ec4:	d916      	bls.n	8009ef4 <UART_SetConfig+0x58c>
 8009ec6:	6a3b      	ldr	r3, [r7, #32]
 8009ec8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ecc:	d212      	bcs.n	8009ef4 <UART_SetConfig+0x58c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009ece:	6a3b      	ldr	r3, [r7, #32]
 8009ed0:	b29b      	uxth	r3, r3
 8009ed2:	f023 030f 	bic.w	r3, r3, #15
 8009ed6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009ed8:	6a3b      	ldr	r3, [r7, #32]
 8009eda:	085b      	lsrs	r3, r3, #1
 8009edc:	b29b      	uxth	r3, r3
 8009ede:	f003 0307 	and.w	r3, r3, #7
 8009ee2:	b29a      	uxth	r2, r3
 8009ee4:	8bfb      	ldrh	r3, [r7, #30]
 8009ee6:	4313      	orrs	r3, r2
 8009ee8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	8bfa      	ldrh	r2, [r7, #30]
 8009ef0:	60da      	str	r2, [r3, #12]
 8009ef2:	e0b1      	b.n	800a058 <UART_SetConfig+0x6f0>
      }
      else
      {
        ret = HAL_ERROR;
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009efa:	e0ad      	b.n	800a058 <UART_SetConfig+0x6f0>
 8009efc:	03d09000 	.word	0x03d09000
 8009f00:	003d0900 	.word	0x003d0900
 8009f04:	0800ee70 	.word	0x0800ee70
 8009f08:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009f0c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009f10:	2b20      	cmp	r3, #32
 8009f12:	dc49      	bgt.n	8009fa8 <UART_SetConfig+0x640>
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	db74      	blt.n	800a002 <UART_SetConfig+0x69a>
 8009f18:	2b20      	cmp	r3, #32
 8009f1a:	d872      	bhi.n	800a002 <UART_SetConfig+0x69a>
 8009f1c:	a201      	add	r2, pc, #4	@ (adr r2, 8009f24 <UART_SetConfig+0x5bc>)
 8009f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f22:	bf00      	nop
 8009f24:	08009faf 	.word	0x08009faf
 8009f28:	08009fb7 	.word	0x08009fb7
 8009f2c:	0800a003 	.word	0x0800a003
 8009f30:	0800a003 	.word	0x0800a003
 8009f34:	08009fbf 	.word	0x08009fbf
 8009f38:	0800a003 	.word	0x0800a003
 8009f3c:	0800a003 	.word	0x0800a003
 8009f40:	0800a003 	.word	0x0800a003
 8009f44:	08009fc7 	.word	0x08009fc7
 8009f48:	0800a003 	.word	0x0800a003
 8009f4c:	0800a003 	.word	0x0800a003
 8009f50:	0800a003 	.word	0x0800a003
 8009f54:	0800a003 	.word	0x0800a003
 8009f58:	0800a003 	.word	0x0800a003
 8009f5c:	0800a003 	.word	0x0800a003
 8009f60:	0800a003 	.word	0x0800a003
 8009f64:	08009fcf 	.word	0x08009fcf
 8009f68:	0800a003 	.word	0x0800a003
 8009f6c:	0800a003 	.word	0x0800a003
 8009f70:	0800a003 	.word	0x0800a003
 8009f74:	0800a003 	.word	0x0800a003
 8009f78:	0800a003 	.word	0x0800a003
 8009f7c:	0800a003 	.word	0x0800a003
 8009f80:	0800a003 	.word	0x0800a003
 8009f84:	0800a003 	.word	0x0800a003
 8009f88:	0800a003 	.word	0x0800a003
 8009f8c:	0800a003 	.word	0x0800a003
 8009f90:	0800a003 	.word	0x0800a003
 8009f94:	0800a003 	.word	0x0800a003
 8009f98:	0800a003 	.word	0x0800a003
 8009f9c:	0800a003 	.word	0x0800a003
 8009fa0:	0800a003 	.word	0x0800a003
 8009fa4:	08009ff5 	.word	0x08009ff5
 8009fa8:	2b40      	cmp	r3, #64	@ 0x40
 8009faa:	d026      	beq.n	8009ffa <UART_SetConfig+0x692>
 8009fac:	e029      	b.n	800a002 <UART_SetConfig+0x69a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009fae:	f7fe fb55 	bl	800865c <HAL_RCC_GetPCLK1Freq>
 8009fb2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009fb4:	e02b      	b.n	800a00e <UART_SetConfig+0x6a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009fb6:	f7fe fb6d 	bl	8008694 <HAL_RCC_GetPCLK2Freq>
 8009fba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009fbc:	e027      	b.n	800a00e <UART_SetConfig+0x6a6>
      case UART_CLOCKSOURCE_PLL2Q:
        pclk = HAL_RCC_GetPLL2QFreq();
 8009fbe:	f7fe fba1 	bl	8008704 <HAL_RCC_GetPLL2QFreq>
 8009fc2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009fc4:	e023      	b.n	800a00e <UART_SetConfig+0x6a6>
      case UART_CLOCKSOURCE_PLL3Q:
        pclk = HAL_RCC_GetPLL3QFreq();
 8009fc6:	f7fe fbb3 	bl	8008730 <HAL_RCC_GetPLL3QFreq>
 8009fca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009fcc:	e01f      	b.n	800a00e <UART_SetConfig+0x6a6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009fce:	4b2d      	ldr	r3, [pc, #180]	@ (800a084 <UART_SetConfig+0x71c>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f003 0320 	and.w	r3, r3, #32
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d009      	beq.n	8009fee <UART_SetConfig+0x686>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009fda:	4b2a      	ldr	r3, [pc, #168]	@ (800a084 <UART_SetConfig+0x71c>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	08db      	lsrs	r3, r3, #3
 8009fe0:	f003 0303 	and.w	r3, r3, #3
 8009fe4:	4a28      	ldr	r2, [pc, #160]	@ (800a088 <UART_SetConfig+0x720>)
 8009fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8009fea:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009fec:	e00f      	b.n	800a00e <UART_SetConfig+0x6a6>
          pclk = (uint32_t) HSI_VALUE;
 8009fee:	4b26      	ldr	r3, [pc, #152]	@ (800a088 <UART_SetConfig+0x720>)
 8009ff0:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009ff2:	e00c      	b.n	800a00e <UART_SetConfig+0x6a6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009ff4:	4b25      	ldr	r3, [pc, #148]	@ (800a08c <UART_SetConfig+0x724>)
 8009ff6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009ff8:	e009      	b.n	800a00e <UART_SetConfig+0x6a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ffa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ffe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a000:	e005      	b.n	800a00e <UART_SetConfig+0x6a6>
      default:
        pclk = 0U;
 800a002:	2300      	movs	r3, #0
 800a004:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a006:	2301      	movs	r3, #1
 800a008:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a00c:	bf00      	nop
    }

    if (pclk != 0U)
 800a00e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a010:	2b00      	cmp	r3, #0
 800a012:	d021      	beq.n	800a058 <UART_SetConfig+0x6f0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a018:	4a1d      	ldr	r2, [pc, #116]	@ (800a090 <UART_SetConfig+0x728>)
 800a01a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a01e:	461a      	mov	r2, r3
 800a020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a022:	fbb3 f2f2 	udiv	r2, r3, r2
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	685b      	ldr	r3, [r3, #4]
 800a02a:	085b      	lsrs	r3, r3, #1
 800a02c:	441a      	add	r2, r3
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	685b      	ldr	r3, [r3, #4]
 800a032:	fbb2 f3f3 	udiv	r3, r2, r3
 800a036:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a038:	6a3b      	ldr	r3, [r7, #32]
 800a03a:	2b0f      	cmp	r3, #15
 800a03c:	d909      	bls.n	800a052 <UART_SetConfig+0x6ea>
 800a03e:	6a3b      	ldr	r3, [r7, #32]
 800a040:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a044:	d205      	bcs.n	800a052 <UART_SetConfig+0x6ea>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a046:	6a3b      	ldr	r3, [r7, #32]
 800a048:	b29a      	uxth	r2, r3
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	60da      	str	r2, [r3, #12]
 800a050:	e002      	b.n	800a058 <UART_SetConfig+0x6f0>
      }
      else
      {
        ret = HAL_ERROR;
 800a052:	2301      	movs	r3, #1
 800a054:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	2201      	movs	r2, #1
 800a05c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a060:	697b      	ldr	r3, [r7, #20]
 800a062:	2201      	movs	r2, #1
 800a064:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	2200      	movs	r2, #0
 800a06c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	2200      	movs	r2, #0
 800a072:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a074:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3730      	adds	r7, #48	@ 0x30
 800a07c:	46bd      	mov	sp, r7
 800a07e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a082:	bf00      	nop
 800a084:	58024400 	.word	0x58024400
 800a088:	03d09000 	.word	0x03d09000
 800a08c:	003d0900 	.word	0x003d0900
 800a090:	0800ee70 	.word	0x0800ee70

0800a094 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a094:	b480      	push	{r7}
 800a096:	b083      	sub	sp, #12
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0a0:	f003 0308 	and.w	r3, r3, #8
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d00a      	beq.n	800a0be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	685b      	ldr	r3, [r3, #4]
 800a0ae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	430a      	orrs	r2, r1
 800a0bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0c2:	f003 0301 	and.w	r3, r3, #1
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d00a      	beq.n	800a0e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	685b      	ldr	r3, [r3, #4]
 800a0d0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	430a      	orrs	r2, r1
 800a0de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0e4:	f003 0302 	and.w	r3, r3, #2
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d00a      	beq.n	800a102 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	685b      	ldr	r3, [r3, #4]
 800a0f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	430a      	orrs	r2, r1
 800a100:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a106:	f003 0304 	and.w	r3, r3, #4
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d00a      	beq.n	800a124 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	430a      	orrs	r2, r1
 800a122:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a128:	f003 0310 	and.w	r3, r3, #16
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d00a      	beq.n	800a146 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	689b      	ldr	r3, [r3, #8]
 800a136:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	430a      	orrs	r2, r1
 800a144:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a14a:	f003 0320 	and.w	r3, r3, #32
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d00a      	beq.n	800a168 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	689b      	ldr	r3, [r3, #8]
 800a158:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	430a      	orrs	r2, r1
 800a166:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a16c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a170:	2b00      	cmp	r3, #0
 800a172:	d01a      	beq.n	800a1aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	430a      	orrs	r2, r1
 800a188:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a18e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a192:	d10a      	bne.n	800a1aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	685b      	ldr	r3, [r3, #4]
 800a19a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	430a      	orrs	r2, r1
 800a1a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d00a      	beq.n	800a1cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	685b      	ldr	r3, [r3, #4]
 800a1bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	430a      	orrs	r2, r1
 800a1ca:	605a      	str	r2, [r3, #4]
  }
}
 800a1cc:	bf00      	nop
 800a1ce:	370c      	adds	r7, #12
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d6:	4770      	bx	lr

0800a1d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b098      	sub	sp, #96	@ 0x60
 800a1dc:	af02      	add	r7, sp, #8
 800a1de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a1e8:	f7f7 fe2c 	bl	8001e44 <HAL_GetTick>
 800a1ec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f003 0308 	and.w	r3, r3, #8
 800a1f8:	2b08      	cmp	r3, #8
 800a1fa:	d12f      	bne.n	800a25c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a1fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a200:	9300      	str	r3, [sp, #0]
 800a202:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a204:	2200      	movs	r2, #0
 800a206:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f000 f88e 	bl	800a32c <UART_WaitOnFlagUntilTimeout>
 800a210:	4603      	mov	r3, r0
 800a212:	2b00      	cmp	r3, #0
 800a214:	d022      	beq.n	800a25c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a21c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a21e:	e853 3f00 	ldrex	r3, [r3]
 800a222:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a226:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a22a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	461a      	mov	r2, r3
 800a232:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a234:	647b      	str	r3, [r7, #68]	@ 0x44
 800a236:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a238:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a23a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a23c:	e841 2300 	strex	r3, r2, [r1]
 800a240:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a242:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a244:	2b00      	cmp	r3, #0
 800a246:	d1e6      	bne.n	800a216 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2220      	movs	r2, #32
 800a24c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2200      	movs	r2, #0
 800a254:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a258:	2303      	movs	r3, #3
 800a25a:	e063      	b.n	800a324 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f003 0304 	and.w	r3, r3, #4
 800a266:	2b04      	cmp	r3, #4
 800a268:	d149      	bne.n	800a2fe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a26a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a26e:	9300      	str	r3, [sp, #0]
 800a270:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a272:	2200      	movs	r2, #0
 800a274:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f000 f857 	bl	800a32c <UART_WaitOnFlagUntilTimeout>
 800a27e:	4603      	mov	r3, r0
 800a280:	2b00      	cmp	r3, #0
 800a282:	d03c      	beq.n	800a2fe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a28a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a28c:	e853 3f00 	ldrex	r3, [r3]
 800a290:	623b      	str	r3, [r7, #32]
   return(result);
 800a292:	6a3b      	ldr	r3, [r7, #32]
 800a294:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a298:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	461a      	mov	r2, r3
 800a2a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a2a2:	633b      	str	r3, [r7, #48]	@ 0x30
 800a2a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a2a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2aa:	e841 2300 	strex	r3, r2, [r1]
 800a2ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a2b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d1e6      	bne.n	800a284 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	3308      	adds	r3, #8
 800a2bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2be:	693b      	ldr	r3, [r7, #16]
 800a2c0:	e853 3f00 	ldrex	r3, [r3]
 800a2c4:	60fb      	str	r3, [r7, #12]
   return(result);
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	f023 0301 	bic.w	r3, r3, #1
 800a2cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	3308      	adds	r3, #8
 800a2d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a2d6:	61fa      	str	r2, [r7, #28]
 800a2d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2da:	69b9      	ldr	r1, [r7, #24]
 800a2dc:	69fa      	ldr	r2, [r7, #28]
 800a2de:	e841 2300 	strex	r3, r2, [r1]
 800a2e2:	617b      	str	r3, [r7, #20]
   return(result);
 800a2e4:	697b      	ldr	r3, [r7, #20]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d1e5      	bne.n	800a2b6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2220      	movs	r2, #32
 800a2ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a2fa:	2303      	movs	r3, #3
 800a2fc:	e012      	b.n	800a324 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2220      	movs	r2, #32
 800a302:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2220      	movs	r2, #32
 800a30a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2200      	movs	r2, #0
 800a312:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2200      	movs	r2, #0
 800a318:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2200      	movs	r2, #0
 800a31e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a322:	2300      	movs	r3, #0
}
 800a324:	4618      	mov	r0, r3
 800a326:	3758      	adds	r7, #88	@ 0x58
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}

0800a32c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b084      	sub	sp, #16
 800a330:	af00      	add	r7, sp, #0
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	60b9      	str	r1, [r7, #8]
 800a336:	603b      	str	r3, [r7, #0]
 800a338:	4613      	mov	r3, r2
 800a33a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a33c:	e04f      	b.n	800a3de <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a33e:	69bb      	ldr	r3, [r7, #24]
 800a340:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a344:	d04b      	beq.n	800a3de <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a346:	f7f7 fd7d 	bl	8001e44 <HAL_GetTick>
 800a34a:	4602      	mov	r2, r0
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	1ad3      	subs	r3, r2, r3
 800a350:	69ba      	ldr	r2, [r7, #24]
 800a352:	429a      	cmp	r2, r3
 800a354:	d302      	bcc.n	800a35c <UART_WaitOnFlagUntilTimeout+0x30>
 800a356:	69bb      	ldr	r3, [r7, #24]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d101      	bne.n	800a360 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a35c:	2303      	movs	r3, #3
 800a35e:	e04e      	b.n	800a3fe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f003 0304 	and.w	r3, r3, #4
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d037      	beq.n	800a3de <UART_WaitOnFlagUntilTimeout+0xb2>
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	2b80      	cmp	r3, #128	@ 0x80
 800a372:	d034      	beq.n	800a3de <UART_WaitOnFlagUntilTimeout+0xb2>
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	2b40      	cmp	r3, #64	@ 0x40
 800a378:	d031      	beq.n	800a3de <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	69db      	ldr	r3, [r3, #28]
 800a380:	f003 0308 	and.w	r3, r3, #8
 800a384:	2b08      	cmp	r3, #8
 800a386:	d110      	bne.n	800a3aa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	2208      	movs	r2, #8
 800a38e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a390:	68f8      	ldr	r0, [r7, #12]
 800a392:	f000 f839 	bl	800a408 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	2208      	movs	r2, #8
 800a39a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	e029      	b.n	800a3fe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	69db      	ldr	r3, [r3, #28]
 800a3b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a3b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a3b8:	d111      	bne.n	800a3de <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a3c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a3c4:	68f8      	ldr	r0, [r7, #12]
 800a3c6:	f000 f81f 	bl	800a408 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	2220      	movs	r2, #32
 800a3ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a3da:	2303      	movs	r3, #3
 800a3dc:	e00f      	b.n	800a3fe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	69da      	ldr	r2, [r3, #28]
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	4013      	ands	r3, r2
 800a3e8:	68ba      	ldr	r2, [r7, #8]
 800a3ea:	429a      	cmp	r2, r3
 800a3ec:	bf0c      	ite	eq
 800a3ee:	2301      	moveq	r3, #1
 800a3f0:	2300      	movne	r3, #0
 800a3f2:	b2db      	uxtb	r3, r3
 800a3f4:	461a      	mov	r2, r3
 800a3f6:	79fb      	ldrb	r3, [r7, #7]
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	d0a0      	beq.n	800a33e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a3fc:	2300      	movs	r3, #0
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3710      	adds	r7, #16
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}
	...

0800a408 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a408:	b480      	push	{r7}
 800a40a:	b095      	sub	sp, #84	@ 0x54
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a418:	e853 3f00 	ldrex	r3, [r3]
 800a41c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a41e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a420:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a424:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	461a      	mov	r2, r3
 800a42c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a42e:	643b      	str	r3, [r7, #64]	@ 0x40
 800a430:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a432:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a434:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a436:	e841 2300 	strex	r3, r2, [r1]
 800a43a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a43c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d1e6      	bne.n	800a410 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	3308      	adds	r3, #8
 800a448:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a44a:	6a3b      	ldr	r3, [r7, #32]
 800a44c:	e853 3f00 	ldrex	r3, [r3]
 800a450:	61fb      	str	r3, [r7, #28]
   return(result);
 800a452:	69fa      	ldr	r2, [r7, #28]
 800a454:	4b1e      	ldr	r3, [pc, #120]	@ (800a4d0 <UART_EndRxTransfer+0xc8>)
 800a456:	4013      	ands	r3, r2
 800a458:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	3308      	adds	r3, #8
 800a460:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a462:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a464:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a466:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a468:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a46a:	e841 2300 	strex	r3, r2, [r1]
 800a46e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a472:	2b00      	cmp	r3, #0
 800a474:	d1e5      	bne.n	800a442 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a47a:	2b01      	cmp	r3, #1
 800a47c:	d118      	bne.n	800a4b0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	e853 3f00 	ldrex	r3, [r3]
 800a48a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	f023 0310 	bic.w	r3, r3, #16
 800a492:	647b      	str	r3, [r7, #68]	@ 0x44
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	461a      	mov	r2, r3
 800a49a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a49c:	61bb      	str	r3, [r7, #24]
 800a49e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4a0:	6979      	ldr	r1, [r7, #20]
 800a4a2:	69ba      	ldr	r2, [r7, #24]
 800a4a4:	e841 2300 	strex	r3, r2, [r1]
 800a4a8:	613b      	str	r3, [r7, #16]
   return(result);
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d1e6      	bne.n	800a47e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2220      	movs	r2, #32
 800a4b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a4c4:	bf00      	nop
 800a4c6:	3754      	adds	r7, #84	@ 0x54
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ce:	4770      	bx	lr
 800a4d0:	effffffe 	.word	0xeffffffe

0800a4d4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b085      	sub	sp, #20
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a4e2:	2b01      	cmp	r3, #1
 800a4e4:	d101      	bne.n	800a4ea <HAL_UARTEx_DisableFifoMode+0x16>
 800a4e6:	2302      	movs	r3, #2
 800a4e8:	e027      	b.n	800a53a <HAL_UARTEx_DisableFifoMode+0x66>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2201      	movs	r2, #1
 800a4ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2224      	movs	r2, #36	@ 0x24
 800a4f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	681a      	ldr	r2, [r3, #0]
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f022 0201 	bic.w	r2, r2, #1
 800a510:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a518:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2200      	movs	r2, #0
 800a51e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	68fa      	ldr	r2, [r7, #12]
 800a526:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2220      	movs	r2, #32
 800a52c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2200      	movs	r2, #0
 800a534:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a538:	2300      	movs	r3, #0
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3714      	adds	r7, #20
 800a53e:	46bd      	mov	sp, r7
 800a540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a544:	4770      	bx	lr

0800a546 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a546:	b580      	push	{r7, lr}
 800a548:	b084      	sub	sp, #16
 800a54a:	af00      	add	r7, sp, #0
 800a54c:	6078      	str	r0, [r7, #4]
 800a54e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a556:	2b01      	cmp	r3, #1
 800a558:	d101      	bne.n	800a55e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a55a:	2302      	movs	r3, #2
 800a55c:	e02d      	b.n	800a5ba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2201      	movs	r2, #1
 800a562:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2224      	movs	r2, #36	@ 0x24
 800a56a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	681a      	ldr	r2, [r3, #0]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f022 0201 	bic.w	r2, r2, #1
 800a584:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	689b      	ldr	r3, [r3, #8]
 800a58c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	683a      	ldr	r2, [r7, #0]
 800a596:	430a      	orrs	r2, r1
 800a598:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f000 f850 	bl	800a640 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	68fa      	ldr	r2, [r7, #12]
 800a5a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2220      	movs	r2, #32
 800a5ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a5b8:	2300      	movs	r3, #0
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3710      	adds	r7, #16
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}

0800a5c2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a5c2:	b580      	push	{r7, lr}
 800a5c4:	b084      	sub	sp, #16
 800a5c6:	af00      	add	r7, sp, #0
 800a5c8:	6078      	str	r0, [r7, #4]
 800a5ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a5d2:	2b01      	cmp	r3, #1
 800a5d4:	d101      	bne.n	800a5da <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a5d6:	2302      	movs	r3, #2
 800a5d8:	e02d      	b.n	800a636 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2201      	movs	r2, #1
 800a5de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2224      	movs	r2, #36	@ 0x24
 800a5e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	681a      	ldr	r2, [r3, #0]
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f022 0201 	bic.w	r2, r2, #1
 800a600:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	689b      	ldr	r3, [r3, #8]
 800a608:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	683a      	ldr	r2, [r7, #0]
 800a612:	430a      	orrs	r2, r1
 800a614:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f000 f812 	bl	800a640 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	68fa      	ldr	r2, [r7, #12]
 800a622:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2220      	movs	r2, #32
 800a628:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2200      	movs	r2, #0
 800a630:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a634:	2300      	movs	r3, #0
}
 800a636:	4618      	mov	r0, r3
 800a638:	3710      	adds	r7, #16
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}
	...

0800a640 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a640:	b480      	push	{r7}
 800a642:	b085      	sub	sp, #20
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d108      	bne.n	800a662 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2201      	movs	r2, #1
 800a654:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2201      	movs	r2, #1
 800a65c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a660:	e031      	b.n	800a6c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a662:	2310      	movs	r3, #16
 800a664:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a666:	2310      	movs	r3, #16
 800a668:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	689b      	ldr	r3, [r3, #8]
 800a670:	0e5b      	lsrs	r3, r3, #25
 800a672:	b2db      	uxtb	r3, r3
 800a674:	f003 0307 	and.w	r3, r3, #7
 800a678:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	689b      	ldr	r3, [r3, #8]
 800a680:	0f5b      	lsrs	r3, r3, #29
 800a682:	b2db      	uxtb	r3, r3
 800a684:	f003 0307 	and.w	r3, r3, #7
 800a688:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a68a:	7bbb      	ldrb	r3, [r7, #14]
 800a68c:	7b3a      	ldrb	r2, [r7, #12]
 800a68e:	4911      	ldr	r1, [pc, #68]	@ (800a6d4 <UARTEx_SetNbDataToProcess+0x94>)
 800a690:	5c8a      	ldrb	r2, [r1, r2]
 800a692:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a696:	7b3a      	ldrb	r2, [r7, #12]
 800a698:	490f      	ldr	r1, [pc, #60]	@ (800a6d8 <UARTEx_SetNbDataToProcess+0x98>)
 800a69a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a69c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a6a0:	b29a      	uxth	r2, r3
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a6a8:	7bfb      	ldrb	r3, [r7, #15]
 800a6aa:	7b7a      	ldrb	r2, [r7, #13]
 800a6ac:	4909      	ldr	r1, [pc, #36]	@ (800a6d4 <UARTEx_SetNbDataToProcess+0x94>)
 800a6ae:	5c8a      	ldrb	r2, [r1, r2]
 800a6b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a6b4:	7b7a      	ldrb	r2, [r7, #13]
 800a6b6:	4908      	ldr	r1, [pc, #32]	@ (800a6d8 <UARTEx_SetNbDataToProcess+0x98>)
 800a6b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a6ba:	fb93 f3f2 	sdiv	r3, r3, r2
 800a6be:	b29a      	uxth	r2, r3
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a6c6:	bf00      	nop
 800a6c8:	3714      	adds	r7, #20
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d0:	4770      	bx	lr
 800a6d2:	bf00      	nop
 800a6d4:	0800ee88 	.word	0x0800ee88
 800a6d8:	0800ee90 	.word	0x0800ee90

0800a6dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a6dc:	b084      	sub	sp, #16
 800a6de:	b580      	push	{r7, lr}
 800a6e0:	b084      	sub	sp, #16
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	6078      	str	r0, [r7, #4]
 800a6e6:	f107 001c 	add.w	r0, r7, #28
 800a6ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	4a22      	ldr	r2, [pc, #136]	@ (800a77c <USB_CoreInit+0xa0>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d11e      	bne.n	800a734 <USB_CoreInit+0x58>
  {
    if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800a6f6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a6fa:	2b03      	cmp	r3, #3
 800a6fc:	d105      	bne.n	800a70a <USB_CoreInit+0x2e>
    {
      /* Init The UTMI Interface */
      USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	68db      	ldr	r3, [r3, #12]
 800a702:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f000 f9de 	bl	800aacc <USB_CoreReset>
 800a710:	4603      	mov	r3, r0
 800a712:	73fb      	strb	r3, [r7, #15]

    if (cfg.dma_enable == 1U)
 800a714:	7fbb      	ldrb	r3, [r7, #30]
 800a716:	2b01      	cmp	r3, #1
 800a718:	d128      	bne.n	800a76c <USB_CoreInit+0x90>
    {
      USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	689b      	ldr	r3, [r3, #8]
 800a71e:	f043 0208 	orr.w	r2, r3, #8
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	609a      	str	r2, [r3, #8]
      USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	689b      	ldr	r3, [r3, #8]
 800a72a:	f043 0220 	orr.w	r2, r3, #32
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	609a      	str	r2, [r3, #8]
 800a732:	e01b      	b.n	800a76c <USB_CoreInit+0x90>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	68db      	ldr	r3, [r3, #12]
 800a738:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f000 f9c3 	bl	800aacc <USB_CoreReset>
 800a746:	4603      	mov	r3, r0
 800a748:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a74a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d106      	bne.n	800a760 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a756:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	639a      	str	r2, [r3, #56]	@ 0x38
 800a75e:	e005      	b.n	800a76c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a764:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  return ret;
 800a76c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3710      	adds	r7, #16
 800a772:	46bd      	mov	sp, r7
 800a774:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a778:	b004      	add	sp, #16
 800a77a:	4770      	bx	lr
 800a77c:	40040000 	.word	0x40040000

0800a780 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a780:	b480      	push	{r7}
 800a782:	b083      	sub	sp, #12
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	689b      	ldr	r3, [r3, #8]
 800a78c:	f043 0201 	orr.w	r2, r3, #1
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a794:	2300      	movs	r3, #0
}
 800a796:	4618      	mov	r0, r3
 800a798:	370c      	adds	r7, #12
 800a79a:	46bd      	mov	sp, r7
 800a79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a0:	4770      	bx	lr

0800a7a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a7a2:	b480      	push	{r7}
 800a7a4:	b083      	sub	sp, #12
 800a7a6:	af00      	add	r7, sp, #0
 800a7a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	689b      	ldr	r3, [r3, #8]
 800a7ae:	f023 0201 	bic.w	r2, r3, #1
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a7b6:	2300      	movs	r3, #0
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	370c      	adds	r7, #12
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c2:	4770      	bx	lr

0800a7c4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b084      	sub	sp, #16
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	460b      	mov	r3, r1
 800a7ce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	68db      	ldr	r3, [r3, #12]
 800a7d8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a7e0:	78fb      	ldrb	r3, [r7, #3]
 800a7e2:	2b01      	cmp	r3, #1
 800a7e4:	d115      	bne.n	800a812 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	68db      	ldr	r3, [r3, #12]
 800a7ea:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a7f2:	200a      	movs	r0, #10
 800a7f4:	f7f7 fb32 	bl	8001e5c <HAL_Delay>
      ms += 10U;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	330a      	adds	r3, #10
 800a7fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f000 f956 	bl	800aab0 <USB_GetMode>
 800a804:	4603      	mov	r3, r0
 800a806:	2b01      	cmp	r3, #1
 800a808:	d01e      	beq.n	800a848 <USB_SetCurrentMode+0x84>
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	2bc7      	cmp	r3, #199	@ 0xc7
 800a80e:	d9f0      	bls.n	800a7f2 <USB_SetCurrentMode+0x2e>
 800a810:	e01a      	b.n	800a848 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a812:	78fb      	ldrb	r3, [r7, #3]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d115      	bne.n	800a844 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	68db      	ldr	r3, [r3, #12]
 800a81c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a824:	200a      	movs	r0, #10
 800a826:	f7f7 fb19 	bl	8001e5c <HAL_Delay>
      ms += 10U;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	330a      	adds	r3, #10
 800a82e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f000 f93d 	bl	800aab0 <USB_GetMode>
 800a836:	4603      	mov	r3, r0
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d005      	beq.n	800a848 <USB_SetCurrentMode+0x84>
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	2bc7      	cmp	r3, #199	@ 0xc7
 800a840:	d9f0      	bls.n	800a824 <USB_SetCurrentMode+0x60>
 800a842:	e001      	b.n	800a848 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a844:	2301      	movs	r3, #1
 800a846:	e005      	b.n	800a854 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	2bc8      	cmp	r3, #200	@ 0xc8
 800a84c:	d101      	bne.n	800a852 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a84e:	2301      	movs	r3, #1
 800a850:	e000      	b.n	800a854 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a852:	2300      	movs	r3, #0
}
 800a854:	4618      	mov	r0, r3
 800a856:	3710      	adds	r7, #16
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}

0800a85c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b085      	sub	sp, #20
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a866:	2300      	movs	r3, #0
 800a868:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	3301      	adds	r3, #1
 800a86e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a876:	d901      	bls.n	800a87c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a878:	2303      	movs	r3, #3
 800a87a:	e01b      	b.n	800a8b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	691b      	ldr	r3, [r3, #16]
 800a880:	2b00      	cmp	r3, #0
 800a882:	daf2      	bge.n	800a86a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a884:	2300      	movs	r3, #0
 800a886:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	019b      	lsls	r3, r3, #6
 800a88c:	f043 0220 	orr.w	r2, r3, #32
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	3301      	adds	r3, #1
 800a898:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a8a0:	d901      	bls.n	800a8a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a8a2:	2303      	movs	r3, #3
 800a8a4:	e006      	b.n	800a8b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	691b      	ldr	r3, [r3, #16]
 800a8aa:	f003 0320 	and.w	r3, r3, #32
 800a8ae:	2b20      	cmp	r3, #32
 800a8b0:	d0f0      	beq.n	800a894 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a8b2:	2300      	movs	r3, #0
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	3714      	adds	r7, #20
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr

0800a8c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b085      	sub	sp, #20
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	3301      	adds	r3, #1
 800a8d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a8d8:	d901      	bls.n	800a8de <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a8da:	2303      	movs	r3, #3
 800a8dc:	e018      	b.n	800a910 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	691b      	ldr	r3, [r3, #16]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	daf2      	bge.n	800a8cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2210      	movs	r2, #16
 800a8ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	3301      	adds	r3, #1
 800a8f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a8fc:	d901      	bls.n	800a902 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a8fe:	2303      	movs	r3, #3
 800a900:	e006      	b.n	800a910 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	691b      	ldr	r3, [r3, #16]
 800a906:	f003 0310 	and.w	r3, r3, #16
 800a90a:	2b10      	cmp	r3, #16
 800a90c:	d0f0      	beq.n	800a8f0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a90e:	2300      	movs	r3, #0
}
 800a910:	4618      	mov	r0, r3
 800a912:	3714      	adds	r7, #20
 800a914:	46bd      	mov	sp, r7
 800a916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91a:	4770      	bx	lr

0800a91c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a91c:	b480      	push	{r7}
 800a91e:	b089      	sub	sp, #36	@ 0x24
 800a920:	af00      	add	r7, sp, #0
 800a922:	60f8      	str	r0, [r7, #12]
 800a924:	60b9      	str	r1, [r7, #8]
 800a926:	4611      	mov	r1, r2
 800a928:	461a      	mov	r2, r3
 800a92a:	460b      	mov	r3, r1
 800a92c:	71fb      	strb	r3, [r7, #7]
 800a92e:	4613      	mov	r3, r2
 800a930:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a93a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d123      	bne.n	800a98a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a942:	88bb      	ldrh	r3, [r7, #4]
 800a944:	3303      	adds	r3, #3
 800a946:	089b      	lsrs	r3, r3, #2
 800a948:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a94a:	2300      	movs	r3, #0
 800a94c:	61bb      	str	r3, [r7, #24]
 800a94e:	e018      	b.n	800a982 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a950:	79fb      	ldrb	r3, [r7, #7]
 800a952:	031a      	lsls	r2, r3, #12
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	4413      	add	r3, r2
 800a958:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a95c:	461a      	mov	r2, r3
 800a95e:	69fb      	ldr	r3, [r7, #28]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a964:	69fb      	ldr	r3, [r7, #28]
 800a966:	3301      	adds	r3, #1
 800a968:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a96a:	69fb      	ldr	r3, [r7, #28]
 800a96c:	3301      	adds	r3, #1
 800a96e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a970:	69fb      	ldr	r3, [r7, #28]
 800a972:	3301      	adds	r3, #1
 800a974:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a976:	69fb      	ldr	r3, [r7, #28]
 800a978:	3301      	adds	r3, #1
 800a97a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a97c:	69bb      	ldr	r3, [r7, #24]
 800a97e:	3301      	adds	r3, #1
 800a980:	61bb      	str	r3, [r7, #24]
 800a982:	69ba      	ldr	r2, [r7, #24]
 800a984:	693b      	ldr	r3, [r7, #16]
 800a986:	429a      	cmp	r2, r3
 800a988:	d3e2      	bcc.n	800a950 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a98a:	2300      	movs	r3, #0
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3724      	adds	r7, #36	@ 0x24
 800a990:	46bd      	mov	sp, r7
 800a992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a996:	4770      	bx	lr

0800a998 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a998:	b480      	push	{r7}
 800a99a:	b08b      	sub	sp, #44	@ 0x2c
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	60f8      	str	r0, [r7, #12]
 800a9a0:	60b9      	str	r1, [r7, #8]
 800a9a2:	4613      	mov	r3, r2
 800a9a4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a9ae:	88fb      	ldrh	r3, [r7, #6]
 800a9b0:	089b      	lsrs	r3, r3, #2
 800a9b2:	b29b      	uxth	r3, r3
 800a9b4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a9b6:	88fb      	ldrh	r3, [r7, #6]
 800a9b8:	f003 0303 	and.w	r3, r3, #3
 800a9bc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a9be:	2300      	movs	r3, #0
 800a9c0:	623b      	str	r3, [r7, #32]
 800a9c2:	e014      	b.n	800a9ee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a9c4:	69bb      	ldr	r3, [r7, #24]
 800a9c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a9ca:	681a      	ldr	r2, [r3, #0]
 800a9cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9ce:	601a      	str	r2, [r3, #0]
    pDest++;
 800a9d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9d2:	3301      	adds	r3, #1
 800a9d4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a9d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9d8:	3301      	adds	r3, #1
 800a9da:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a9dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9de:	3301      	adds	r3, #1
 800a9e0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a9e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9e4:	3301      	adds	r3, #1
 800a9e6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a9e8:	6a3b      	ldr	r3, [r7, #32]
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	623b      	str	r3, [r7, #32]
 800a9ee:	6a3a      	ldr	r2, [r7, #32]
 800a9f0:	697b      	ldr	r3, [r7, #20]
 800a9f2:	429a      	cmp	r2, r3
 800a9f4:	d3e6      	bcc.n	800a9c4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a9f6:	8bfb      	ldrh	r3, [r7, #30]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d01e      	beq.n	800aa3a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800aa00:	69bb      	ldr	r3, [r7, #24]
 800aa02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa06:	461a      	mov	r2, r3
 800aa08:	f107 0310 	add.w	r3, r7, #16
 800aa0c:	6812      	ldr	r2, [r2, #0]
 800aa0e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800aa10:	693a      	ldr	r2, [r7, #16]
 800aa12:	6a3b      	ldr	r3, [r7, #32]
 800aa14:	b2db      	uxtb	r3, r3
 800aa16:	00db      	lsls	r3, r3, #3
 800aa18:	fa22 f303 	lsr.w	r3, r2, r3
 800aa1c:	b2da      	uxtb	r2, r3
 800aa1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa20:	701a      	strb	r2, [r3, #0]
      i++;
 800aa22:	6a3b      	ldr	r3, [r7, #32]
 800aa24:	3301      	adds	r3, #1
 800aa26:	623b      	str	r3, [r7, #32]
      pDest++;
 800aa28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa2a:	3301      	adds	r3, #1
 800aa2c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800aa2e:	8bfb      	ldrh	r3, [r7, #30]
 800aa30:	3b01      	subs	r3, #1
 800aa32:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800aa34:	8bfb      	ldrh	r3, [r7, #30]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d1ea      	bne.n	800aa10 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800aa3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	372c      	adds	r7, #44	@ 0x2c
 800aa40:	46bd      	mov	sp, r7
 800aa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa46:	4770      	bx	lr

0800aa48 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b085      	sub	sp, #20
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	695b      	ldr	r3, [r3, #20]
 800aa54:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	699b      	ldr	r3, [r3, #24]
 800aa5a:	68fa      	ldr	r2, [r7, #12]
 800aa5c:	4013      	ands	r3, r2
 800aa5e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800aa60:	68fb      	ldr	r3, [r7, #12]
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	3714      	adds	r7, #20
 800aa66:	46bd      	mov	sp, r7
 800aa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6c:	4770      	bx	lr

0800aa6e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800aa6e:	b480      	push	{r7}
 800aa70:	b085      	sub	sp, #20
 800aa72:	af00      	add	r7, sp, #0
 800aa74:	6078      	str	r0, [r7, #4]
 800aa76:	460b      	mov	r3, r1
 800aa78:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800aa7e:	78fb      	ldrb	r3, [r7, #3]
 800aa80:	015a      	lsls	r2, r3, #5
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	4413      	add	r3, r2
 800aa86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aa8a:	689b      	ldr	r3, [r3, #8]
 800aa8c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800aa8e:	78fb      	ldrb	r3, [r7, #3]
 800aa90:	015a      	lsls	r2, r3, #5
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	4413      	add	r3, r2
 800aa96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aa9a:	68db      	ldr	r3, [r3, #12]
 800aa9c:	68ba      	ldr	r2, [r7, #8]
 800aa9e:	4013      	ands	r3, r2
 800aaa0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800aaa2:	68bb      	ldr	r3, [r7, #8]
}
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	3714      	adds	r7, #20
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaae:	4770      	bx	lr

0800aab0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800aab0:	b480      	push	{r7}
 800aab2:	b083      	sub	sp, #12
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	695b      	ldr	r3, [r3, #20]
 800aabc:	f003 0301 	and.w	r3, r3, #1
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	370c      	adds	r7, #12
 800aac4:	46bd      	mov	sp, r7
 800aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaca:	4770      	bx	lr

0800aacc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800aacc:	b480      	push	{r7}
 800aace:	b085      	sub	sp, #20
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aad4:	2300      	movs	r3, #0
 800aad6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	3301      	adds	r3, #1
 800aadc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aae4:	d901      	bls.n	800aaea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800aae6:	2303      	movs	r3, #3
 800aae8:	e01b      	b.n	800ab22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	691b      	ldr	r3, [r3, #16]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	daf2      	bge.n	800aad8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	691b      	ldr	r3, [r3, #16]
 800aafa:	f043 0201 	orr.w	r2, r3, #1
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	3301      	adds	r3, #1
 800ab06:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ab0e:	d901      	bls.n	800ab14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ab10:	2303      	movs	r3, #3
 800ab12:	e006      	b.n	800ab22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	691b      	ldr	r3, [r3, #16]
 800ab18:	f003 0301 	and.w	r3, r3, #1
 800ab1c:	2b01      	cmp	r3, #1
 800ab1e:	d0f0      	beq.n	800ab02 <USB_CoreReset+0x36>

  return HAL_OK;
 800ab20:	2300      	movs	r3, #0
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	3714      	adds	r7, #20
 800ab26:	46bd      	mov	sp, r7
 800ab28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2c:	4770      	bx	lr
	...

0800ab30 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ab30:	b084      	sub	sp, #16
 800ab32:	b580      	push	{r7, lr}
 800ab34:	b086      	sub	sp, #24
 800ab36:	af00      	add	r7, sp, #0
 800ab38:	6078      	str	r0, [r7, #4]
 800ab3a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800ab3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ab42:	2300      	movs	r3, #0
 800ab44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	68db      	ldr	r3, [r3, #12]
 800ab4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d105      	bne.n	800ab62 <USB_HostInit+0x32>
  {
    /* Enable USB PHY pulldown resistors */
    USBx->GCCFG |= USB_OTG_GCCFG_PULLDOWNEN;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab5a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ab68:	461a      	mov	r2, r3
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	6013      	str	r3, [r2, #0]

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	68db      	ldr	r3, [r3, #12]
 800ab72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d105      	bne.n	800ab86 <USB_HostInit+0x56>
  {
    /* Disable VBUS override */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_VBVALOVAL | USB_OTG_GCCFG_VBVALEXTOEN);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab7e:	f023 72c0 	bic.w	r2, r3, #25165824	@ 0x1800000
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab8a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	639a      	str	r2, [r3, #56]	@ 0x38
  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	68db      	ldr	r3, [r3, #12]
 800ab96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d006      	beq.n	800abac <USB_HostInit+0x7c>
  {
    /* Disable Battery chargin detector */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aba2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	639a      	str	r2, [r3, #56]	@ 0x38
 800abaa:	e00b      	b.n	800abc4 <USB_HostInit+0x94>
  }
  else
  {
    /* Disable Battery chargin detector */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PDEN);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abb0:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~(USB_OTG_GCCFG_SDEN);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abbc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	68db      	ldr	r3, [r3, #12]
 800abc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d119      	bne.n	800ac04 <USB_HostInit+0xd4>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800abd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800abd4:	2b01      	cmp	r3, #1
 800abd6:	d10a      	bne.n	800abee <USB_HostInit+0xbe>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	68fa      	ldr	r2, [r7, #12]
 800abe2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800abe6:	f043 0304 	orr.w	r3, r3, #4
 800abea:	6013      	str	r3, [r2, #0]
 800abec:	e014      	b.n	800ac18 <USB_HostInit+0xe8>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	68fa      	ldr	r2, [r7, #12]
 800abf8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800abfc:	f023 0304 	bic.w	r3, r3, #4
 800ac00:	6013      	str	r3, [r2, #0]
 800ac02:	e009      	b.n	800ac18 <USB_HostInit+0xe8>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	68fa      	ldr	r2, [r7, #12]
 800ac0e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ac12:	f023 0304 	bic.w	r3, r3, #4
 800ac16:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ac18:	2110      	movs	r1, #16
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f7ff fe1e 	bl	800a85c <USB_FlushTxFifo>
 800ac20:	4603      	mov	r3, r0
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d001      	beq.n	800ac2a <USB_HostInit+0xfa>
  {
    ret = HAL_ERROR;
 800ac26:	2301      	movs	r3, #1
 800ac28:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f7ff fe48 	bl	800a8c0 <USB_FlushRxFifo>
 800ac30:	4603      	mov	r3, r0
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d001      	beq.n	800ac3a <USB_HostInit+0x10a>
  {
    ret = HAL_ERROR;
 800ac36:	2301      	movs	r3, #1
 800ac38:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	613b      	str	r3, [r7, #16]
 800ac3e:	e015      	b.n	800ac6c <USB_HostInit+0x13c>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	015a      	lsls	r2, r3, #5
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	4413      	add	r3, r2
 800ac48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ac4c:	461a      	mov	r2, r3
 800ac4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ac52:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800ac54:	693b      	ldr	r3, [r7, #16]
 800ac56:	015a      	lsls	r2, r3, #5
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	4413      	add	r3, r2
 800ac5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ac60:	461a      	mov	r2, r3
 800ac62:	2300      	movs	r3, #0
 800ac64:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	3301      	adds	r3, #1
 800ac6a:	613b      	str	r3, [r7, #16]
 800ac6c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800ac70:	461a      	mov	r2, r3
 800ac72:	693b      	ldr	r3, [r7, #16]
 800ac74:	4293      	cmp	r3, r2
 800ac76:	d3e3      	bcc.n	800ac40 <USB_HostInit+0x110>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ac84:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	4a18      	ldr	r2, [pc, #96]	@ (800acec <USB_HostInit+0x1bc>)
 800ac8a:	4293      	cmp	r3, r2
 800ac8c:	d10b      	bne.n	800aca6 <USB_HostInit+0x176>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ac94:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	4a15      	ldr	r2, [pc, #84]	@ (800acf0 <USB_HostInit+0x1c0>)
 800ac9a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	4a15      	ldr	r2, [pc, #84]	@ (800acf4 <USB_HostInit+0x1c4>)
 800aca0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800aca4:	e009      	b.n	800acba <USB_HostInit+0x18a>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2280      	movs	r2, #128	@ 0x80
 800acaa:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	4a12      	ldr	r2, [pc, #72]	@ (800acf8 <USB_HostInit+0x1c8>)
 800acb0:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	4a11      	ldr	r2, [pc, #68]	@ (800acfc <USB_HostInit+0x1cc>)
 800acb6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800acba:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d105      	bne.n	800acce <USB_HostInit+0x19e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	699b      	ldr	r3, [r3, #24]
 800acc6:	f043 0210 	orr.w	r2, r3, #16
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	699a      	ldr	r2, [r3, #24]
 800acd2:	4b0b      	ldr	r3, [pc, #44]	@ (800ad00 <USB_HostInit+0x1d0>)
 800acd4:	4313      	orrs	r3, r2
 800acd6:	687a      	ldr	r2, [r7, #4]
 800acd8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800acda:	7dfb      	ldrb	r3, [r7, #23]
}
 800acdc:	4618      	mov	r0, r3
 800acde:	3718      	adds	r7, #24
 800ace0:	46bd      	mov	sp, r7
 800ace2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ace6:	b004      	add	sp, #16
 800ace8:	4770      	bx	lr
 800acea:	bf00      	nop
 800acec:	40040000 	.word	0x40040000
 800acf0:	01000200 	.word	0x01000200
 800acf4:	00e00300 	.word	0x00e00300
 800acf8:	00600080 	.word	0x00600080
 800acfc:	004000e0 	.word	0x004000e0
 800ad00:	a3200008 	.word	0xa3200008

0800ad04 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800ad04:	b480      	push	{r7}
 800ad06:	b085      	sub	sp, #20
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
 800ad0c:	460b      	mov	r3, r1
 800ad0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	68fa      	ldr	r2, [r7, #12]
 800ad1e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ad22:	f023 0303 	bic.w	r3, r3, #3
 800ad26:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ad2e:	681a      	ldr	r2, [r3, #0]
 800ad30:	78fb      	ldrb	r3, [r7, #3]
 800ad32:	f003 0303 	and.w	r3, r3, #3
 800ad36:	68f9      	ldr	r1, [r7, #12]
 800ad38:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800ad3c:	4313      	orrs	r3, r2
 800ad3e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800ad40:	78fb      	ldrb	r3, [r7, #3]
 800ad42:	2b01      	cmp	r3, #1
 800ad44:	d107      	bne.n	800ad56 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ad4c:	461a      	mov	r2, r3
 800ad4e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800ad52:	6053      	str	r3, [r2, #4]
 800ad54:	e00c      	b.n	800ad70 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800ad56:	78fb      	ldrb	r3, [r7, #3]
 800ad58:	2b02      	cmp	r3, #2
 800ad5a:	d107      	bne.n	800ad6c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ad62:	461a      	mov	r2, r3
 800ad64:	f241 7370 	movw	r3, #6000	@ 0x1770
 800ad68:	6053      	str	r3, [r2, #4]
 800ad6a:	e001      	b.n	800ad70 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	e000      	b.n	800ad72 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800ad70:	2300      	movs	r3, #0
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	3714      	adds	r7, #20
 800ad76:	46bd      	mov	sp, r7
 800ad78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7c:	4770      	bx	lr

0800ad7e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800ad7e:	b580      	push	{r7, lr}
 800ad80:	b084      	sub	sp, #16
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800ad9e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	68fa      	ldr	r2, [r7, #12]
 800ada4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800ada8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800adac:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800adae:	2064      	movs	r0, #100	@ 0x64
 800adb0:	f7f7 f854 	bl	8001e5c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	68fa      	ldr	r2, [r7, #12]
 800adb8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800adbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800adc0:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800adc2:	200a      	movs	r0, #10
 800adc4:	f7f7 f84a 	bl	8001e5c <HAL_Delay>

  return HAL_OK;
 800adc8:	2300      	movs	r3, #0
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3710      	adds	r7, #16
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}

0800add2 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800add2:	b480      	push	{r7}
 800add4:	b085      	sub	sp, #20
 800add6:	af00      	add	r7, sp, #0
 800add8:	6078      	str	r0, [r7, #4]
 800adda:	460b      	mov	r3, r1
 800addc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800ade2:	2300      	movs	r3, #0
 800ade4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800adf6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d109      	bne.n	800ae16 <USB_DriveVbus+0x44>
 800ae02:	78fb      	ldrb	r3, [r7, #3]
 800ae04:	2b01      	cmp	r3, #1
 800ae06:	d106      	bne.n	800ae16 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	68fa      	ldr	r2, [r7, #12]
 800ae0c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800ae10:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ae14:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ae1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae20:	d109      	bne.n	800ae36 <USB_DriveVbus+0x64>
 800ae22:	78fb      	ldrb	r3, [r7, #3]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d106      	bne.n	800ae36 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	68fa      	ldr	r2, [r7, #12]
 800ae2c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800ae30:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ae34:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800ae36:	2300      	movs	r3, #0
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	3714      	adds	r7, #20
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae42:	4770      	bx	lr

0800ae44 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800ae44:	b480      	push	{r7}
 800ae46:	b085      	sub	sp, #20
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800ae50:	2300      	movs	r3, #0
 800ae52:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	0c5b      	lsrs	r3, r3, #17
 800ae62:	f003 0303 	and.w	r3, r3, #3
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3714      	adds	r7, #20
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae70:	4770      	bx	lr

0800ae72 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800ae72:	b480      	push	{r7}
 800ae74:	b085      	sub	sp, #20
 800ae76:	af00      	add	r7, sp, #0
 800ae78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ae84:	689b      	ldr	r3, [r3, #8]
 800ae86:	b29b      	uxth	r3, r3
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3714      	adds	r7, #20
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae92:	4770      	bx	lr

0800ae94 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b088      	sub	sp, #32
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
 800ae9c:	4608      	mov	r0, r1
 800ae9e:	4611      	mov	r1, r2
 800aea0:	461a      	mov	r2, r3
 800aea2:	4603      	mov	r3, r0
 800aea4:	70fb      	strb	r3, [r7, #3]
 800aea6:	460b      	mov	r3, r1
 800aea8:	70bb      	strb	r3, [r7, #2]
 800aeaa:	4613      	mov	r3, r2
 800aeac:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800aeb6:	78fb      	ldrb	r3, [r7, #3]
 800aeb8:	015a      	lsls	r2, r3, #5
 800aeba:	693b      	ldr	r3, [r7, #16]
 800aebc:	4413      	add	r3, r2
 800aebe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aec2:	461a      	mov	r2, r3
 800aec4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aec8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800aeca:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800aece:	2b03      	cmp	r3, #3
 800aed0:	d87c      	bhi.n	800afcc <USB_HC_Init+0x138>
 800aed2:	a201      	add	r2, pc, #4	@ (adr r2, 800aed8 <USB_HC_Init+0x44>)
 800aed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aed8:	0800aee9 	.word	0x0800aee9
 800aedc:	0800af8f 	.word	0x0800af8f
 800aee0:	0800aee9 	.word	0x0800aee9
 800aee4:	0800af51 	.word	0x0800af51
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800aee8:	78fb      	ldrb	r3, [r7, #3]
 800aeea:	015a      	lsls	r2, r3, #5
 800aeec:	693b      	ldr	r3, [r7, #16]
 800aeee:	4413      	add	r3, r2
 800aef0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aef4:	461a      	mov	r2, r3
 800aef6:	f240 439d 	movw	r3, #1181	@ 0x49d
 800aefa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800aefc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800af00:	2b00      	cmp	r3, #0
 800af02:	da10      	bge.n	800af26 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800af04:	78fb      	ldrb	r3, [r7, #3]
 800af06:	015a      	lsls	r2, r3, #5
 800af08:	693b      	ldr	r3, [r7, #16]
 800af0a:	4413      	add	r3, r2
 800af0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800af10:	68db      	ldr	r3, [r3, #12]
 800af12:	78fa      	ldrb	r2, [r7, #3]
 800af14:	0151      	lsls	r1, r2, #5
 800af16:	693a      	ldr	r2, [r7, #16]
 800af18:	440a      	add	r2, r1
 800af1a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800af1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800af22:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800af24:	e055      	b.n	800afd2 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	4a6f      	ldr	r2, [pc, #444]	@ (800b0e8 <USB_HC_Init+0x254>)
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d151      	bne.n	800afd2 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800af2e:	78fb      	ldrb	r3, [r7, #3]
 800af30:	015a      	lsls	r2, r3, #5
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	4413      	add	r3, r2
 800af36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800af3a:	68db      	ldr	r3, [r3, #12]
 800af3c:	78fa      	ldrb	r2, [r7, #3]
 800af3e:	0151      	lsls	r1, r2, #5
 800af40:	693a      	ldr	r2, [r7, #16]
 800af42:	440a      	add	r2, r1
 800af44:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800af48:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800af4c:	60d3      	str	r3, [r2, #12]
      break;
 800af4e:	e040      	b.n	800afd2 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800af50:	78fb      	ldrb	r3, [r7, #3]
 800af52:	015a      	lsls	r2, r3, #5
 800af54:	693b      	ldr	r3, [r7, #16]
 800af56:	4413      	add	r3, r2
 800af58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800af5c:	461a      	mov	r2, r3
 800af5e:	f240 639d 	movw	r3, #1693	@ 0x69d
 800af62:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800af64:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	da34      	bge.n	800afd6 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800af6c:	78fb      	ldrb	r3, [r7, #3]
 800af6e:	015a      	lsls	r2, r3, #5
 800af70:	693b      	ldr	r3, [r7, #16]
 800af72:	4413      	add	r3, r2
 800af74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800af78:	68db      	ldr	r3, [r3, #12]
 800af7a:	78fa      	ldrb	r2, [r7, #3]
 800af7c:	0151      	lsls	r1, r2, #5
 800af7e:	693a      	ldr	r2, [r7, #16]
 800af80:	440a      	add	r2, r1
 800af82:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800af86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800af8a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800af8c:	e023      	b.n	800afd6 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800af8e:	78fb      	ldrb	r3, [r7, #3]
 800af90:	015a      	lsls	r2, r3, #5
 800af92:	693b      	ldr	r3, [r7, #16]
 800af94:	4413      	add	r3, r2
 800af96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800af9a:	461a      	mov	r2, r3
 800af9c:	f240 2325 	movw	r3, #549	@ 0x225
 800afa0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800afa2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	da17      	bge.n	800afda <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800afaa:	78fb      	ldrb	r3, [r7, #3]
 800afac:	015a      	lsls	r2, r3, #5
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	4413      	add	r3, r2
 800afb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800afb6:	68db      	ldr	r3, [r3, #12]
 800afb8:	78fa      	ldrb	r2, [r7, #3]
 800afba:	0151      	lsls	r1, r2, #5
 800afbc:	693a      	ldr	r2, [r7, #16]
 800afbe:	440a      	add	r2, r1
 800afc0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800afc4:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800afc8:	60d3      	str	r3, [r2, #12]
      }
      break;
 800afca:	e006      	b.n	800afda <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800afcc:	2301      	movs	r3, #1
 800afce:	77fb      	strb	r3, [r7, #31]
      break;
 800afd0:	e004      	b.n	800afdc <USB_HC_Init+0x148>
      break;
 800afd2:	bf00      	nop
 800afd4:	e002      	b.n	800afdc <USB_HC_Init+0x148>
      break;
 800afd6:	bf00      	nop
 800afd8:	e000      	b.n	800afdc <USB_HC_Init+0x148>
      break;
 800afda:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800afdc:	78fb      	ldrb	r3, [r7, #3]
 800afde:	015a      	lsls	r2, r3, #5
 800afe0:	693b      	ldr	r3, [r7, #16]
 800afe2:	4413      	add	r3, r2
 800afe4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800afe8:	461a      	mov	r2, r3
 800afea:	2300      	movs	r3, #0
 800afec:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800afee:	78fb      	ldrb	r3, [r7, #3]
 800aff0:	015a      	lsls	r2, r3, #5
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	4413      	add	r3, r2
 800aff6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800affa:	68db      	ldr	r3, [r3, #12]
 800affc:	78fa      	ldrb	r2, [r7, #3]
 800affe:	0151      	lsls	r1, r2, #5
 800b000:	693a      	ldr	r2, [r7, #16]
 800b002:	440a      	add	r2, r1
 800b004:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b008:	f043 0302 	orr.w	r3, r3, #2
 800b00c:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b014:	699a      	ldr	r2, [r3, #24]
 800b016:	78fb      	ldrb	r3, [r7, #3]
 800b018:	f003 030f 	and.w	r3, r3, #15
 800b01c:	2101      	movs	r1, #1
 800b01e:	fa01 f303 	lsl.w	r3, r1, r3
 800b022:	6939      	ldr	r1, [r7, #16]
 800b024:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800b028:	4313      	orrs	r3, r2
 800b02a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	699b      	ldr	r3, [r3, #24]
 800b030:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800b038:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	da03      	bge.n	800b048 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800b040:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b044:	61bb      	str	r3, [r7, #24]
 800b046:	e001      	b.n	800b04c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800b048:	2300      	movs	r3, #0
 800b04a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f7ff fef9 	bl	800ae44 <USB_GetHostSpeed>
 800b052:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800b054:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b058:	2b02      	cmp	r3, #2
 800b05a:	d106      	bne.n	800b06a <USB_HC_Init+0x1d6>
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	2b02      	cmp	r3, #2
 800b060:	d003      	beq.n	800b06a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800b062:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800b066:	617b      	str	r3, [r7, #20]
 800b068:	e001      	b.n	800b06e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800b06a:	2300      	movs	r3, #0
 800b06c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b06e:	787b      	ldrb	r3, [r7, #1]
 800b070:	059b      	lsls	r3, r3, #22
 800b072:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b076:	78bb      	ldrb	r3, [r7, #2]
 800b078:	02db      	lsls	r3, r3, #11
 800b07a:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b07e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b080:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b084:	049b      	lsls	r3, r3, #18
 800b086:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b08a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800b08c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800b08e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b092:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800b094:	69bb      	ldr	r3, [r7, #24]
 800b096:	431a      	orrs	r2, r3
 800b098:	697b      	ldr	r3, [r7, #20]
 800b09a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b09c:	78fa      	ldrb	r2, [r7, #3]
 800b09e:	0151      	lsls	r1, r2, #5
 800b0a0:	693a      	ldr	r2, [r7, #16]
 800b0a2:	440a      	add	r2, r1
 800b0a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800b0a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b0ac:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800b0ae:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b0b2:	2b03      	cmp	r3, #3
 800b0b4:	d003      	beq.n	800b0be <USB_HC_Init+0x22a>
 800b0b6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b0ba:	2b01      	cmp	r3, #1
 800b0bc:	d10f      	bne.n	800b0de <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800b0be:	78fb      	ldrb	r3, [r7, #3]
 800b0c0:	015a      	lsls	r2, r3, #5
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	4413      	add	r3, r2
 800b0c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	78fa      	ldrb	r2, [r7, #3]
 800b0ce:	0151      	lsls	r1, r2, #5
 800b0d0:	693a      	ldr	r2, [r7, #16]
 800b0d2:	440a      	add	r2, r1
 800b0d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b0d8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b0dc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800b0de:	7ffb      	ldrb	r3, [r7, #31]
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	3720      	adds	r7, #32
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}
 800b0e8:	40040000 	.word	0x40040000

0800b0ec <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b08c      	sub	sp, #48	@ 0x30
 800b0f0:	af02      	add	r7, sp, #8
 800b0f2:	60f8      	str	r0, [r7, #12]
 800b0f4:	60b9      	str	r1, [r7, #8]
 800b0f6:	4613      	mov	r3, r2
 800b0f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	785b      	ldrb	r3, [r3, #1]
 800b102:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800b104:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b108:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	4a5d      	ldr	r2, [pc, #372]	@ (800b284 <USB_HC_StartXfer+0x198>)
 800b10e:	4293      	cmp	r3, r2
 800b110:	d12f      	bne.n	800b172 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800b112:	79fb      	ldrb	r3, [r7, #7]
 800b114:	2b01      	cmp	r3, #1
 800b116:	d11c      	bne.n	800b152 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	7c9b      	ldrb	r3, [r3, #18]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d003      	beq.n	800b128 <USB_HC_StartXfer+0x3c>
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	7c9b      	ldrb	r3, [r3, #18]
 800b124:	2b02      	cmp	r3, #2
 800b126:	d124      	bne.n	800b172 <USB_HC_StartXfer+0x86>
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	799b      	ldrb	r3, [r3, #6]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d120      	bne.n	800b172 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800b130:	69fb      	ldr	r3, [r7, #28]
 800b132:	015a      	lsls	r2, r3, #5
 800b134:	6a3b      	ldr	r3, [r7, #32]
 800b136:	4413      	add	r3, r2
 800b138:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b13c:	68db      	ldr	r3, [r3, #12]
 800b13e:	69fa      	ldr	r2, [r7, #28]
 800b140:	0151      	lsls	r1, r2, #5
 800b142:	6a3a      	ldr	r2, [r7, #32]
 800b144:	440a      	add	r2, r1
 800b146:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b14a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b14e:	60d3      	str	r3, [r2, #12]
 800b150:	e00f      	b.n	800b172 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	791b      	ldrb	r3, [r3, #4]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d10b      	bne.n	800b172 <USB_HC_StartXfer+0x86>
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	795b      	ldrb	r3, [r3, #5]
 800b15e:	2b01      	cmp	r3, #1
 800b160:	d107      	bne.n	800b172 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	785b      	ldrb	r3, [r3, #1]
 800b166:	4619      	mov	r1, r3
 800b168:	68f8      	ldr	r0, [r7, #12]
 800b16a:	f000 fb6b 	bl	800b844 <USB_DoPing>
        return HAL_OK;
 800b16e:	2300      	movs	r3, #0
 800b170:	e232      	b.n	800b5d8 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800b172:	68bb      	ldr	r3, [r7, #8]
 800b174:	799b      	ldrb	r3, [r3, #6]
 800b176:	2b01      	cmp	r3, #1
 800b178:	d158      	bne.n	800b22c <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800b17a:	2301      	movs	r3, #1
 800b17c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	78db      	ldrb	r3, [r3, #3]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d007      	beq.n	800b196 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b186:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b188:	68ba      	ldr	r2, [r7, #8]
 800b18a:	8a92      	ldrh	r2, [r2, #20]
 800b18c:	fb03 f202 	mul.w	r2, r3, r2
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	61da      	str	r2, [r3, #28]
 800b194:	e07c      	b.n	800b290 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	7c9b      	ldrb	r3, [r3, #18]
 800b19a:	2b01      	cmp	r3, #1
 800b19c:	d130      	bne.n	800b200 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	6a1b      	ldr	r3, [r3, #32]
 800b1a2:	2bbc      	cmp	r3, #188	@ 0xbc
 800b1a4:	d918      	bls.n	800b1d8 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800b1a6:	68bb      	ldr	r3, [r7, #8]
 800b1a8:	8a9b      	ldrh	r3, [r3, #20]
 800b1aa:	461a      	mov	r2, r3
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	69da      	ldr	r2, [r3, #28]
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	68db      	ldr	r3, [r3, #12]
 800b1bc:	2b01      	cmp	r3, #1
 800b1be:	d003      	beq.n	800b1c8 <USB_HC_StartXfer+0xdc>
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	68db      	ldr	r3, [r3, #12]
 800b1c4:	2b02      	cmp	r3, #2
 800b1c6:	d103      	bne.n	800b1d0 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	2202      	movs	r2, #2
 800b1cc:	60da      	str	r2, [r3, #12]
 800b1ce:	e05f      	b.n	800b290 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	2201      	movs	r2, #1
 800b1d4:	60da      	str	r2, [r3, #12]
 800b1d6:	e05b      	b.n	800b290 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	6a1a      	ldr	r2, [r3, #32]
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	68db      	ldr	r3, [r3, #12]
 800b1e4:	2b01      	cmp	r3, #1
 800b1e6:	d007      	beq.n	800b1f8 <USB_HC_StartXfer+0x10c>
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	68db      	ldr	r3, [r3, #12]
 800b1ec:	2b02      	cmp	r3, #2
 800b1ee:	d003      	beq.n	800b1f8 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	2204      	movs	r2, #4
 800b1f4:	60da      	str	r2, [r3, #12]
 800b1f6:	e04b      	b.n	800b290 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	2203      	movs	r2, #3
 800b1fc:	60da      	str	r2, [r3, #12]
 800b1fe:	e047      	b.n	800b290 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800b200:	79fb      	ldrb	r3, [r7, #7]
 800b202:	2b01      	cmp	r3, #1
 800b204:	d10d      	bne.n	800b222 <USB_HC_StartXfer+0x136>
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	6a1b      	ldr	r3, [r3, #32]
 800b20a:	68ba      	ldr	r2, [r7, #8]
 800b20c:	8a92      	ldrh	r2, [r2, #20]
 800b20e:	4293      	cmp	r3, r2
 800b210:	d907      	bls.n	800b222 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b212:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b214:	68ba      	ldr	r2, [r7, #8]
 800b216:	8a92      	ldrh	r2, [r2, #20]
 800b218:	fb03 f202 	mul.w	r2, r3, r2
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	61da      	str	r2, [r3, #28]
 800b220:	e036      	b.n	800b290 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	6a1a      	ldr	r2, [r3, #32]
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	61da      	str	r2, [r3, #28]
 800b22a:	e031      	b.n	800b290 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	6a1b      	ldr	r3, [r3, #32]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d018      	beq.n	800b266 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	6a1b      	ldr	r3, [r3, #32]
 800b238:	68ba      	ldr	r2, [r7, #8]
 800b23a:	8a92      	ldrh	r2, [r2, #20]
 800b23c:	4413      	add	r3, r2
 800b23e:	3b01      	subs	r3, #1
 800b240:	68ba      	ldr	r2, [r7, #8]
 800b242:	8a92      	ldrh	r2, [r2, #20]
 800b244:	fbb3 f3f2 	udiv	r3, r3, r2
 800b248:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800b24a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800b24c:	8b7b      	ldrh	r3, [r7, #26]
 800b24e:	429a      	cmp	r2, r3
 800b250:	d90b      	bls.n	800b26a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800b252:	8b7b      	ldrh	r3, [r7, #26]
 800b254:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b256:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b258:	68ba      	ldr	r2, [r7, #8]
 800b25a:	8a92      	ldrh	r2, [r2, #20]
 800b25c:	fb03 f202 	mul.w	r2, r3, r2
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	61da      	str	r2, [r3, #28]
 800b264:	e001      	b.n	800b26a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800b266:	2301      	movs	r3, #1
 800b268:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	78db      	ldrb	r3, [r3, #3]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d00a      	beq.n	800b288 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b272:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b274:	68ba      	ldr	r2, [r7, #8]
 800b276:	8a92      	ldrh	r2, [r2, #20]
 800b278:	fb03 f202 	mul.w	r2, r3, r2
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	61da      	str	r2, [r3, #28]
 800b280:	e006      	b.n	800b290 <USB_HC_StartXfer+0x1a4>
 800b282:	bf00      	nop
 800b284:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	6a1a      	ldr	r2, [r3, #32]
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	69db      	ldr	r3, [r3, #28]
 800b294:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b298:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b29a:	04d9      	lsls	r1, r3, #19
 800b29c:	4ba3      	ldr	r3, [pc, #652]	@ (800b52c <USB_HC_StartXfer+0x440>)
 800b29e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b2a0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	7d9b      	ldrb	r3, [r3, #22]
 800b2a6:	075b      	lsls	r3, r3, #29
 800b2a8:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b2ac:	69f9      	ldr	r1, [r7, #28]
 800b2ae:	0148      	lsls	r0, r1, #5
 800b2b0:	6a39      	ldr	r1, [r7, #32]
 800b2b2:	4401      	add	r1, r0
 800b2b4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b2b8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b2ba:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800b2bc:	79fb      	ldrb	r3, [r7, #7]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d009      	beq.n	800b2d6 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	6999      	ldr	r1, [r3, #24]
 800b2c6:	69fb      	ldr	r3, [r7, #28]
 800b2c8:	015a      	lsls	r2, r3, #5
 800b2ca:	6a3b      	ldr	r3, [r7, #32]
 800b2cc:	4413      	add	r3, r2
 800b2ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b2d2:	460a      	mov	r2, r1
 800b2d4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800b2d6:	6a3b      	ldr	r3, [r7, #32]
 800b2d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b2dc:	689b      	ldr	r3, [r3, #8]
 800b2de:	f003 0301 	and.w	r3, r3, #1
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	bf0c      	ite	eq
 800b2e6:	2301      	moveq	r3, #1
 800b2e8:	2300      	movne	r3, #0
 800b2ea:	b2db      	uxtb	r3, r3
 800b2ec:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800b2ee:	69fb      	ldr	r3, [r7, #28]
 800b2f0:	015a      	lsls	r2, r3, #5
 800b2f2:	6a3b      	ldr	r3, [r7, #32]
 800b2f4:	4413      	add	r3, r2
 800b2f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	69fa      	ldr	r2, [r7, #28]
 800b2fe:	0151      	lsls	r1, r2, #5
 800b300:	6a3a      	ldr	r2, [r7, #32]
 800b302:	440a      	add	r2, r1
 800b304:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b308:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b30c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800b30e:	69fb      	ldr	r3, [r7, #28]
 800b310:	015a      	lsls	r2, r3, #5
 800b312:	6a3b      	ldr	r3, [r7, #32]
 800b314:	4413      	add	r3, r2
 800b316:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b31a:	681a      	ldr	r2, [r3, #0]
 800b31c:	7e7b      	ldrb	r3, [r7, #25]
 800b31e:	075b      	lsls	r3, r3, #29
 800b320:	69f9      	ldr	r1, [r7, #28]
 800b322:	0148      	lsls	r0, r1, #5
 800b324:	6a39      	ldr	r1, [r7, #32]
 800b326:	4401      	add	r1, r0
 800b328:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800b32c:	4313      	orrs	r3, r2
 800b32e:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	799b      	ldrb	r3, [r3, #6]
 800b334:	2b01      	cmp	r3, #1
 800b336:	f040 80c3 	bne.w	800b4c0 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	7c5b      	ldrb	r3, [r3, #17]
 800b33e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800b340:	68ba      	ldr	r2, [r7, #8]
 800b342:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800b344:	4313      	orrs	r3, r2
 800b346:	69fa      	ldr	r2, [r7, #28]
 800b348:	0151      	lsls	r1, r2, #5
 800b34a:	6a3a      	ldr	r2, [r7, #32]
 800b34c:	440a      	add	r2, r1
 800b34e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800b352:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800b356:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800b358:	69fb      	ldr	r3, [r7, #28]
 800b35a:	015a      	lsls	r2, r3, #5
 800b35c:	6a3b      	ldr	r3, [r7, #32]
 800b35e:	4413      	add	r3, r2
 800b360:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b364:	68db      	ldr	r3, [r3, #12]
 800b366:	69fa      	ldr	r2, [r7, #28]
 800b368:	0151      	lsls	r1, r2, #5
 800b36a:	6a3a      	ldr	r2, [r7, #32]
 800b36c:	440a      	add	r2, r1
 800b36e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b372:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800b376:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	79db      	ldrb	r3, [r3, #7]
 800b37c:	2b01      	cmp	r3, #1
 800b37e:	d123      	bne.n	800b3c8 <USB_HC_StartXfer+0x2dc>
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	78db      	ldrb	r3, [r3, #3]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d11f      	bne.n	800b3c8 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800b388:	69fb      	ldr	r3, [r7, #28]
 800b38a:	015a      	lsls	r2, r3, #5
 800b38c:	6a3b      	ldr	r3, [r7, #32]
 800b38e:	4413      	add	r3, r2
 800b390:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b394:	685b      	ldr	r3, [r3, #4]
 800b396:	69fa      	ldr	r2, [r7, #28]
 800b398:	0151      	lsls	r1, r2, #5
 800b39a:	6a3a      	ldr	r2, [r7, #32]
 800b39c:	440a      	add	r2, r1
 800b39e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b3a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b3a6:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800b3a8:	69fb      	ldr	r3, [r7, #28]
 800b3aa:	015a      	lsls	r2, r3, #5
 800b3ac:	6a3b      	ldr	r3, [r7, #32]
 800b3ae:	4413      	add	r3, r2
 800b3b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b3b4:	68db      	ldr	r3, [r3, #12]
 800b3b6:	69fa      	ldr	r2, [r7, #28]
 800b3b8:	0151      	lsls	r1, r2, #5
 800b3ba:	6a3a      	ldr	r2, [r7, #32]
 800b3bc:	440a      	add	r2, r1
 800b3be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b3c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b3c6:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	7c9b      	ldrb	r3, [r3, #18]
 800b3cc:	2b01      	cmp	r3, #1
 800b3ce:	d003      	beq.n	800b3d8 <USB_HC_StartXfer+0x2ec>
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	7c9b      	ldrb	r3, [r3, #18]
 800b3d4:	2b03      	cmp	r3, #3
 800b3d6:	d117      	bne.n	800b408 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800b3dc:	2b01      	cmp	r3, #1
 800b3de:	d113      	bne.n	800b408 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	78db      	ldrb	r3, [r3, #3]
 800b3e4:	2b01      	cmp	r3, #1
 800b3e6:	d10f      	bne.n	800b408 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800b3e8:	69fb      	ldr	r3, [r7, #28]
 800b3ea:	015a      	lsls	r2, r3, #5
 800b3ec:	6a3b      	ldr	r3, [r7, #32]
 800b3ee:	4413      	add	r3, r2
 800b3f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b3f4:	685b      	ldr	r3, [r3, #4]
 800b3f6:	69fa      	ldr	r2, [r7, #28]
 800b3f8:	0151      	lsls	r1, r2, #5
 800b3fa:	6a3a      	ldr	r2, [r7, #32]
 800b3fc:	440a      	add	r2, r1
 800b3fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b402:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b406:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	7c9b      	ldrb	r3, [r3, #18]
 800b40c:	2b01      	cmp	r3, #1
 800b40e:	d162      	bne.n	800b4d6 <USB_HC_StartXfer+0x3ea>
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	78db      	ldrb	r3, [r3, #3]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d15e      	bne.n	800b4d6 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	68db      	ldr	r3, [r3, #12]
 800b41c:	3b01      	subs	r3, #1
 800b41e:	2b03      	cmp	r3, #3
 800b420:	d858      	bhi.n	800b4d4 <USB_HC_StartXfer+0x3e8>
 800b422:	a201      	add	r2, pc, #4	@ (adr r2, 800b428 <USB_HC_StartXfer+0x33c>)
 800b424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b428:	0800b439 	.word	0x0800b439
 800b42c:	0800b45b 	.word	0x0800b45b
 800b430:	0800b47d 	.word	0x0800b47d
 800b434:	0800b49f 	.word	0x0800b49f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800b438:	69fb      	ldr	r3, [r7, #28]
 800b43a:	015a      	lsls	r2, r3, #5
 800b43c:	6a3b      	ldr	r3, [r7, #32]
 800b43e:	4413      	add	r3, r2
 800b440:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	69fa      	ldr	r2, [r7, #28]
 800b448:	0151      	lsls	r1, r2, #5
 800b44a:	6a3a      	ldr	r2, [r7, #32]
 800b44c:	440a      	add	r2, r1
 800b44e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b452:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b456:	6053      	str	r3, [r2, #4]
          break;
 800b458:	e03d      	b.n	800b4d6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800b45a:	69fb      	ldr	r3, [r7, #28]
 800b45c:	015a      	lsls	r2, r3, #5
 800b45e:	6a3b      	ldr	r3, [r7, #32]
 800b460:	4413      	add	r3, r2
 800b462:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b466:	685b      	ldr	r3, [r3, #4]
 800b468:	69fa      	ldr	r2, [r7, #28]
 800b46a:	0151      	lsls	r1, r2, #5
 800b46c:	6a3a      	ldr	r2, [r7, #32]
 800b46e:	440a      	add	r2, r1
 800b470:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b474:	f043 030e 	orr.w	r3, r3, #14
 800b478:	6053      	str	r3, [r2, #4]
          break;
 800b47a:	e02c      	b.n	800b4d6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800b47c:	69fb      	ldr	r3, [r7, #28]
 800b47e:	015a      	lsls	r2, r3, #5
 800b480:	6a3b      	ldr	r3, [r7, #32]
 800b482:	4413      	add	r3, r2
 800b484:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b488:	685b      	ldr	r3, [r3, #4]
 800b48a:	69fa      	ldr	r2, [r7, #28]
 800b48c:	0151      	lsls	r1, r2, #5
 800b48e:	6a3a      	ldr	r2, [r7, #32]
 800b490:	440a      	add	r2, r1
 800b492:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b496:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b49a:	6053      	str	r3, [r2, #4]
          break;
 800b49c:	e01b      	b.n	800b4d6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800b49e:	69fb      	ldr	r3, [r7, #28]
 800b4a0:	015a      	lsls	r2, r3, #5
 800b4a2:	6a3b      	ldr	r3, [r7, #32]
 800b4a4:	4413      	add	r3, r2
 800b4a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b4aa:	685b      	ldr	r3, [r3, #4]
 800b4ac:	69fa      	ldr	r2, [r7, #28]
 800b4ae:	0151      	lsls	r1, r2, #5
 800b4b0:	6a3a      	ldr	r2, [r7, #32]
 800b4b2:	440a      	add	r2, r1
 800b4b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b4b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b4bc:	6053      	str	r3, [r2, #4]
          break;
 800b4be:	e00a      	b.n	800b4d6 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800b4c0:	69fb      	ldr	r3, [r7, #28]
 800b4c2:	015a      	lsls	r2, r3, #5
 800b4c4:	6a3b      	ldr	r3, [r7, #32]
 800b4c6:	4413      	add	r3, r2
 800b4c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b4cc:	461a      	mov	r2, r3
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	6053      	str	r3, [r2, #4]
 800b4d2:	e000      	b.n	800b4d6 <USB_HC_StartXfer+0x3ea>
          break;
 800b4d4:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800b4d6:	69fb      	ldr	r3, [r7, #28]
 800b4d8:	015a      	lsls	r2, r3, #5
 800b4da:	6a3b      	ldr	r3, [r7, #32]
 800b4dc:	4413      	add	r3, r2
 800b4de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b4e6:	693b      	ldr	r3, [r7, #16]
 800b4e8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b4ec:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800b4ee:	68bb      	ldr	r3, [r7, #8]
 800b4f0:	78db      	ldrb	r3, [r3, #3]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d004      	beq.n	800b500 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800b4f6:	693b      	ldr	r3, [r7, #16]
 800b4f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b4fc:	613b      	str	r3, [r7, #16]
 800b4fe:	e003      	b.n	800b508 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800b500:	693b      	ldr	r3, [r7, #16]
 800b502:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b506:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b508:	693b      	ldr	r3, [r7, #16]
 800b50a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b50e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800b510:	69fb      	ldr	r3, [r7, #28]
 800b512:	015a      	lsls	r2, r3, #5
 800b514:	6a3b      	ldr	r3, [r7, #32]
 800b516:	4413      	add	r3, r2
 800b518:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b51c:	461a      	mov	r2, r3
 800b51e:	693b      	ldr	r3, [r7, #16]
 800b520:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800b522:	79fb      	ldrb	r3, [r7, #7]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d003      	beq.n	800b530 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800b528:	2300      	movs	r3, #0
 800b52a:	e055      	b.n	800b5d8 <USB_HC_StartXfer+0x4ec>
 800b52c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800b530:	68bb      	ldr	r3, [r7, #8]
 800b532:	78db      	ldrb	r3, [r3, #3]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d14e      	bne.n	800b5d6 <USB_HC_StartXfer+0x4ea>
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	6a1b      	ldr	r3, [r3, #32]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d04a      	beq.n	800b5d6 <USB_HC_StartXfer+0x4ea>
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	79db      	ldrb	r3, [r3, #7]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d146      	bne.n	800b5d6 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	7c9b      	ldrb	r3, [r3, #18]
 800b54c:	2b03      	cmp	r3, #3
 800b54e:	d831      	bhi.n	800b5b4 <USB_HC_StartXfer+0x4c8>
 800b550:	a201      	add	r2, pc, #4	@ (adr r2, 800b558 <USB_HC_StartXfer+0x46c>)
 800b552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b556:	bf00      	nop
 800b558:	0800b569 	.word	0x0800b569
 800b55c:	0800b58d 	.word	0x0800b58d
 800b560:	0800b569 	.word	0x0800b569
 800b564:	0800b58d 	.word	0x0800b58d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	6a1b      	ldr	r3, [r3, #32]
 800b56c:	3303      	adds	r3, #3
 800b56e:	089b      	lsrs	r3, r3, #2
 800b570:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800b572:	8afa      	ldrh	r2, [r7, #22]
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b578:	b29b      	uxth	r3, r3
 800b57a:	429a      	cmp	r2, r3
 800b57c:	d91c      	bls.n	800b5b8 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	699b      	ldr	r3, [r3, #24]
 800b582:	f043 0220 	orr.w	r2, r3, #32
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	619a      	str	r2, [r3, #24]
        }
        break;
 800b58a:	e015      	b.n	800b5b8 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	6a1b      	ldr	r3, [r3, #32]
 800b590:	3303      	adds	r3, #3
 800b592:	089b      	lsrs	r3, r3, #2
 800b594:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800b596:	8afa      	ldrh	r2, [r7, #22]
 800b598:	6a3b      	ldr	r3, [r7, #32]
 800b59a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b59e:	691b      	ldr	r3, [r3, #16]
 800b5a0:	b29b      	uxth	r3, r3
 800b5a2:	429a      	cmp	r2, r3
 800b5a4:	d90a      	bls.n	800b5bc <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	699b      	ldr	r3, [r3, #24]
 800b5aa:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	619a      	str	r2, [r3, #24]
        }
        break;
 800b5b2:	e003      	b.n	800b5bc <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800b5b4:	bf00      	nop
 800b5b6:	e002      	b.n	800b5be <USB_HC_StartXfer+0x4d2>
        break;
 800b5b8:	bf00      	nop
 800b5ba:	e000      	b.n	800b5be <USB_HC_StartXfer+0x4d2>
        break;
 800b5bc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	6999      	ldr	r1, [r3, #24]
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	785a      	ldrb	r2, [r3, #1]
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	6a1b      	ldr	r3, [r3, #32]
 800b5ca:	b29b      	uxth	r3, r3
 800b5cc:	2000      	movs	r0, #0
 800b5ce:	9000      	str	r0, [sp, #0]
 800b5d0:	68f8      	ldr	r0, [r7, #12]
 800b5d2:	f7ff f9a3 	bl	800a91c <USB_WritePacket>
  }

  return HAL_OK;
 800b5d6:	2300      	movs	r3, #0
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	3728      	adds	r7, #40	@ 0x28
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}

0800b5e0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b085      	sub	sp, #20
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b5f2:	695b      	ldr	r3, [r3, #20]
 800b5f4:	b29b      	uxth	r3, r3
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3714      	adds	r7, #20
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b600:	4770      	bx	lr

0800b602 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800b602:	b480      	push	{r7}
 800b604:	b089      	sub	sp, #36	@ 0x24
 800b606:	af00      	add	r7, sp, #0
 800b608:	6078      	str	r0, [r7, #4]
 800b60a:	460b      	mov	r3, r1
 800b60c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800b612:	78fb      	ldrb	r3, [r7, #3]
 800b614:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800b616:	2300      	movs	r3, #0
 800b618:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800b61a:	69bb      	ldr	r3, [r7, #24]
 800b61c:	015a      	lsls	r2, r3, #5
 800b61e:	69fb      	ldr	r3, [r7, #28]
 800b620:	4413      	add	r3, r2
 800b622:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	0c9b      	lsrs	r3, r3, #18
 800b62a:	f003 0303 	and.w	r3, r3, #3
 800b62e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800b630:	69bb      	ldr	r3, [r7, #24]
 800b632:	015a      	lsls	r2, r3, #5
 800b634:	69fb      	ldr	r3, [r7, #28]
 800b636:	4413      	add	r3, r2
 800b638:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	0fdb      	lsrs	r3, r3, #31
 800b640:	f003 0301 	and.w	r3, r3, #1
 800b644:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800b646:	69bb      	ldr	r3, [r7, #24]
 800b648:	015a      	lsls	r2, r3, #5
 800b64a:	69fb      	ldr	r3, [r7, #28]
 800b64c:	4413      	add	r3, r2
 800b64e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b652:	685b      	ldr	r3, [r3, #4]
 800b654:	0fdb      	lsrs	r3, r3, #31
 800b656:	f003 0301 	and.w	r3, r3, #1
 800b65a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	689b      	ldr	r3, [r3, #8]
 800b660:	f003 0320 	and.w	r3, r3, #32
 800b664:	2b20      	cmp	r3, #32
 800b666:	d10d      	bne.n	800b684 <USB_HC_Halt+0x82>
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d10a      	bne.n	800b684 <USB_HC_Halt+0x82>
 800b66e:	693b      	ldr	r3, [r7, #16]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d005      	beq.n	800b680 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800b674:	697b      	ldr	r3, [r7, #20]
 800b676:	2b01      	cmp	r3, #1
 800b678:	d002      	beq.n	800b680 <USB_HC_Halt+0x7e>
 800b67a:	697b      	ldr	r3, [r7, #20]
 800b67c:	2b03      	cmp	r3, #3
 800b67e:	d101      	bne.n	800b684 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800b680:	2300      	movs	r3, #0
 800b682:	e0d8      	b.n	800b836 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800b684:	697b      	ldr	r3, [r7, #20]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d002      	beq.n	800b690 <USB_HC_Halt+0x8e>
 800b68a:	697b      	ldr	r3, [r7, #20]
 800b68c:	2b02      	cmp	r3, #2
 800b68e:	d173      	bne.n	800b778 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b690:	69bb      	ldr	r3, [r7, #24]
 800b692:	015a      	lsls	r2, r3, #5
 800b694:	69fb      	ldr	r3, [r7, #28]
 800b696:	4413      	add	r3, r2
 800b698:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	69ba      	ldr	r2, [r7, #24]
 800b6a0:	0151      	lsls	r1, r2, #5
 800b6a2:	69fa      	ldr	r2, [r7, #28]
 800b6a4:	440a      	add	r2, r1
 800b6a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b6aa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b6ae:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	689b      	ldr	r3, [r3, #8]
 800b6b4:	f003 0320 	and.w	r3, r3, #32
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d14a      	bne.n	800b752 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6c0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d133      	bne.n	800b730 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b6c8:	69bb      	ldr	r3, [r7, #24]
 800b6ca:	015a      	lsls	r2, r3, #5
 800b6cc:	69fb      	ldr	r3, [r7, #28]
 800b6ce:	4413      	add	r3, r2
 800b6d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	69ba      	ldr	r2, [r7, #24]
 800b6d8:	0151      	lsls	r1, r2, #5
 800b6da:	69fa      	ldr	r2, [r7, #28]
 800b6dc:	440a      	add	r2, r1
 800b6de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b6e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b6e6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b6e8:	69bb      	ldr	r3, [r7, #24]
 800b6ea:	015a      	lsls	r2, r3, #5
 800b6ec:	69fb      	ldr	r3, [r7, #28]
 800b6ee:	4413      	add	r3, r2
 800b6f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	69ba      	ldr	r2, [r7, #24]
 800b6f8:	0151      	lsls	r1, r2, #5
 800b6fa:	69fa      	ldr	r2, [r7, #28]
 800b6fc:	440a      	add	r2, r1
 800b6fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b702:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b706:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	3301      	adds	r3, #1
 800b70c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b714:	d82e      	bhi.n	800b774 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b716:	69bb      	ldr	r3, [r7, #24]
 800b718:	015a      	lsls	r2, r3, #5
 800b71a:	69fb      	ldr	r3, [r7, #28]
 800b71c:	4413      	add	r3, r2
 800b71e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b728:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b72c:	d0ec      	beq.n	800b708 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b72e:	e081      	b.n	800b834 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b730:	69bb      	ldr	r3, [r7, #24]
 800b732:	015a      	lsls	r2, r3, #5
 800b734:	69fb      	ldr	r3, [r7, #28]
 800b736:	4413      	add	r3, r2
 800b738:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	69ba      	ldr	r2, [r7, #24]
 800b740:	0151      	lsls	r1, r2, #5
 800b742:	69fa      	ldr	r2, [r7, #28]
 800b744:	440a      	add	r2, r1
 800b746:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b74a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b74e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b750:	e070      	b.n	800b834 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b752:	69bb      	ldr	r3, [r7, #24]
 800b754:	015a      	lsls	r2, r3, #5
 800b756:	69fb      	ldr	r3, [r7, #28]
 800b758:	4413      	add	r3, r2
 800b75a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	69ba      	ldr	r2, [r7, #24]
 800b762:	0151      	lsls	r1, r2, #5
 800b764:	69fa      	ldr	r2, [r7, #28]
 800b766:	440a      	add	r2, r1
 800b768:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b76c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b770:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b772:	e05f      	b.n	800b834 <USB_HC_Halt+0x232>
            break;
 800b774:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b776:	e05d      	b.n	800b834 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b778:	69bb      	ldr	r3, [r7, #24]
 800b77a:	015a      	lsls	r2, r3, #5
 800b77c:	69fb      	ldr	r3, [r7, #28]
 800b77e:	4413      	add	r3, r2
 800b780:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	69ba      	ldr	r2, [r7, #24]
 800b788:	0151      	lsls	r1, r2, #5
 800b78a:	69fa      	ldr	r2, [r7, #28]
 800b78c:	440a      	add	r2, r1
 800b78e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b792:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b796:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800b798:	69fb      	ldr	r3, [r7, #28]
 800b79a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b79e:	691b      	ldr	r3, [r3, #16]
 800b7a0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d133      	bne.n	800b810 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b7a8:	69bb      	ldr	r3, [r7, #24]
 800b7aa:	015a      	lsls	r2, r3, #5
 800b7ac:	69fb      	ldr	r3, [r7, #28]
 800b7ae:	4413      	add	r3, r2
 800b7b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	69ba      	ldr	r2, [r7, #24]
 800b7b8:	0151      	lsls	r1, r2, #5
 800b7ba:	69fa      	ldr	r2, [r7, #28]
 800b7bc:	440a      	add	r2, r1
 800b7be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b7c2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b7c6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b7c8:	69bb      	ldr	r3, [r7, #24]
 800b7ca:	015a      	lsls	r2, r3, #5
 800b7cc:	69fb      	ldr	r3, [r7, #28]
 800b7ce:	4413      	add	r3, r2
 800b7d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	69ba      	ldr	r2, [r7, #24]
 800b7d8:	0151      	lsls	r1, r2, #5
 800b7da:	69fa      	ldr	r2, [r7, #28]
 800b7dc:	440a      	add	r2, r1
 800b7de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b7e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b7e6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	3301      	adds	r3, #1
 800b7ec:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b7f4:	d81d      	bhi.n	800b832 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b7f6:	69bb      	ldr	r3, [r7, #24]
 800b7f8:	015a      	lsls	r2, r3, #5
 800b7fa:	69fb      	ldr	r3, [r7, #28]
 800b7fc:	4413      	add	r3, r2
 800b7fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b808:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b80c:	d0ec      	beq.n	800b7e8 <USB_HC_Halt+0x1e6>
 800b80e:	e011      	b.n	800b834 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b810:	69bb      	ldr	r3, [r7, #24]
 800b812:	015a      	lsls	r2, r3, #5
 800b814:	69fb      	ldr	r3, [r7, #28]
 800b816:	4413      	add	r3, r2
 800b818:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	69ba      	ldr	r2, [r7, #24]
 800b820:	0151      	lsls	r1, r2, #5
 800b822:	69fa      	ldr	r2, [r7, #28]
 800b824:	440a      	add	r2, r1
 800b826:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b82a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b82e:	6013      	str	r3, [r2, #0]
 800b830:	e000      	b.n	800b834 <USB_HC_Halt+0x232>
          break;
 800b832:	bf00      	nop
    }
  }

  return HAL_OK;
 800b834:	2300      	movs	r3, #0
}
 800b836:	4618      	mov	r0, r3
 800b838:	3724      	adds	r7, #36	@ 0x24
 800b83a:	46bd      	mov	sp, r7
 800b83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b840:	4770      	bx	lr
	...

0800b844 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800b844:	b480      	push	{r7}
 800b846:	b087      	sub	sp, #28
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	460b      	mov	r3, r1
 800b84e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800b854:	78fb      	ldrb	r3, [r7, #3]
 800b856:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800b858:	2301      	movs	r3, #1
 800b85a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	04da      	lsls	r2, r3, #19
 800b860:	4b15      	ldr	r3, [pc, #84]	@ (800b8b8 <USB_DoPing+0x74>)
 800b862:	4013      	ands	r3, r2
 800b864:	693a      	ldr	r2, [r7, #16]
 800b866:	0151      	lsls	r1, r2, #5
 800b868:	697a      	ldr	r2, [r7, #20]
 800b86a:	440a      	add	r2, r1
 800b86c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b870:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b874:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800b876:	693b      	ldr	r3, [r7, #16]
 800b878:	015a      	lsls	r2, r3, #5
 800b87a:	697b      	ldr	r3, [r7, #20]
 800b87c:	4413      	add	r3, r2
 800b87e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b88c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b88e:	68bb      	ldr	r3, [r7, #8]
 800b890:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b894:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	015a      	lsls	r2, r3, #5
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	4413      	add	r3, r2
 800b89e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b8a2:	461a      	mov	r2, r3
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800b8a8:	2300      	movs	r3, #0
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	371c      	adds	r7, #28
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b4:	4770      	bx	lr
 800b8b6:	bf00      	nop
 800b8b8:	1ff80000 	.word	0x1ff80000

0800b8bc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b088      	sub	sp, #32
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	f7fe ff66 	bl	800a7a2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b8d6:	2110      	movs	r1, #16
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f7fe ffbf 	bl	800a85c <USB_FlushTxFifo>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d001      	beq.n	800b8e8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b8e8:	6878      	ldr	r0, [r7, #4]
 800b8ea:	f7fe ffe9 	bl	800a8c0 <USB_FlushRxFifo>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d001      	beq.n	800b8f8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	61bb      	str	r3, [r7, #24]
 800b8fc:	e01f      	b.n	800b93e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800b8fe:	69bb      	ldr	r3, [r7, #24]
 800b900:	015a      	lsls	r2, r3, #5
 800b902:	697b      	ldr	r3, [r7, #20]
 800b904:	4413      	add	r3, r2
 800b906:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b914:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800b916:	693b      	ldr	r3, [r7, #16]
 800b918:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b91c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b924:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800b926:	69bb      	ldr	r3, [r7, #24]
 800b928:	015a      	lsls	r2, r3, #5
 800b92a:	697b      	ldr	r3, [r7, #20]
 800b92c:	4413      	add	r3, r2
 800b92e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b932:	461a      	mov	r2, r3
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800b938:	69bb      	ldr	r3, [r7, #24]
 800b93a:	3301      	adds	r3, #1
 800b93c:	61bb      	str	r3, [r7, #24]
 800b93e:	69bb      	ldr	r3, [r7, #24]
 800b940:	2b0f      	cmp	r3, #15
 800b942:	d9dc      	bls.n	800b8fe <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800b944:	2300      	movs	r3, #0
 800b946:	61bb      	str	r3, [r7, #24]
 800b948:	e034      	b.n	800b9b4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800b94a:	69bb      	ldr	r3, [r7, #24]
 800b94c:	015a      	lsls	r2, r3, #5
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	4413      	add	r3, r2
 800b952:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800b95a:	693b      	ldr	r3, [r7, #16]
 800b95c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b960:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800b962:	693b      	ldr	r3, [r7, #16]
 800b964:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b968:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b96a:	693b      	ldr	r3, [r7, #16]
 800b96c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b970:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800b972:	69bb      	ldr	r3, [r7, #24]
 800b974:	015a      	lsls	r2, r3, #5
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	4413      	add	r3, r2
 800b97a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b97e:	461a      	mov	r2, r3
 800b980:	693b      	ldr	r3, [r7, #16]
 800b982:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	3301      	adds	r3, #1
 800b988:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b990:	d80c      	bhi.n	800b9ac <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b992:	69bb      	ldr	r3, [r7, #24]
 800b994:	015a      	lsls	r2, r3, #5
 800b996:	697b      	ldr	r3, [r7, #20]
 800b998:	4413      	add	r3, r2
 800b99a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b9a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b9a8:	d0ec      	beq.n	800b984 <USB_StopHost+0xc8>
 800b9aa:	e000      	b.n	800b9ae <USB_StopHost+0xf2>
        break;
 800b9ac:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800b9ae:	69bb      	ldr	r3, [r7, #24]
 800b9b0:	3301      	adds	r3, #1
 800b9b2:	61bb      	str	r3, [r7, #24]
 800b9b4:	69bb      	ldr	r3, [r7, #24]
 800b9b6:	2b0f      	cmp	r3, #15
 800b9b8:	d9c7      	bls.n	800b94a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800b9ba:	697b      	ldr	r3, [r7, #20]
 800b9bc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b9c0:	461a      	mov	r2, r3
 800b9c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b9c6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b9ce:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	f7fe fed5 	bl	800a780 <USB_EnableGlobalInt>

  return ret;
 800b9d6:	7ffb      	ldrb	r3, [r7, #31]
}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	3720      	adds	r7, #32
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}

0800b9e0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800b9e0:	b590      	push	{r4, r7, lr}
 800b9e2:	b089      	sub	sp, #36	@ 0x24
 800b9e4:	af04      	add	r7, sp, #16
 800b9e6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	2202      	movs	r2, #2
 800b9ec:	2102      	movs	r1, #2
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f000 fc85 	bl	800c2fe <USBH_FindInterface>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800b9f8:	7bfb      	ldrb	r3, [r7, #15]
 800b9fa:	2bff      	cmp	r3, #255	@ 0xff
 800b9fc:	d002      	beq.n	800ba04 <USBH_CDC_InterfaceInit+0x24>
 800b9fe:	7bfb      	ldrb	r3, [r7, #15]
 800ba00:	2b01      	cmp	r3, #1
 800ba02:	d901      	bls.n	800ba08 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800ba04:	2302      	movs	r3, #2
 800ba06:	e13d      	b.n	800bc84 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800ba08:	7bfb      	ldrb	r3, [r7, #15]
 800ba0a:	4619      	mov	r1, r3
 800ba0c:	6878      	ldr	r0, [r7, #4]
 800ba0e:	f000 fc5a 	bl	800c2c6 <USBH_SelectInterface>
 800ba12:	4603      	mov	r3, r0
 800ba14:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800ba16:	7bbb      	ldrb	r3, [r7, #14]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d001      	beq.n	800ba20 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800ba1c:	2302      	movs	r3, #2
 800ba1e:	e131      	b.n	800bc84 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800ba26:	2050      	movs	r0, #80	@ 0x50
 800ba28:	f003 f8c4 	bl	800ebb4 <malloc>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ba36:	69db      	ldr	r3, [r3, #28]
 800ba38:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d101      	bne.n	800ba44 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800ba40:	2302      	movs	r3, #2
 800ba42:	e11f      	b.n	800bc84 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800ba44:	2250      	movs	r2, #80	@ 0x50
 800ba46:	2100      	movs	r1, #0
 800ba48:	68b8      	ldr	r0, [r7, #8]
 800ba4a:	f003 f971 	bl	800ed30 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800ba4e:	7bfb      	ldrb	r3, [r7, #15]
 800ba50:	687a      	ldr	r2, [r7, #4]
 800ba52:	211a      	movs	r1, #26
 800ba54:	fb01 f303 	mul.w	r3, r1, r3
 800ba58:	4413      	add	r3, r2
 800ba5a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800ba5e:	781b      	ldrb	r3, [r3, #0]
 800ba60:	b25b      	sxtb	r3, r3
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	da15      	bge.n	800ba92 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800ba66:	7bfb      	ldrb	r3, [r7, #15]
 800ba68:	687a      	ldr	r2, [r7, #4]
 800ba6a:	211a      	movs	r1, #26
 800ba6c:	fb01 f303 	mul.w	r3, r1, r3
 800ba70:	4413      	add	r3, r2
 800ba72:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800ba76:	781a      	ldrb	r2, [r3, #0]
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ba7c:	7bfb      	ldrb	r3, [r7, #15]
 800ba7e:	687a      	ldr	r2, [r7, #4]
 800ba80:	211a      	movs	r1, #26
 800ba82:	fb01 f303 	mul.w	r3, r1, r3
 800ba86:	4413      	add	r3, r2
 800ba88:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800ba8c:	881a      	ldrh	r2, [r3, #0]
 800ba8e:	68bb      	ldr	r3, [r7, #8]
 800ba90:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800ba92:	68bb      	ldr	r3, [r7, #8]
 800ba94:	785b      	ldrb	r3, [r3, #1]
 800ba96:	4619      	mov	r1, r3
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f001 ffbe 	bl	800da1a <USBH_AllocPipe>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	461a      	mov	r2, r3
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	7819      	ldrb	r1, [r3, #0]
 800baaa:	68bb      	ldr	r3, [r7, #8]
 800baac:	7858      	ldrb	r0, [r3, #1]
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800baba:	68ba      	ldr	r2, [r7, #8]
 800babc:	8952      	ldrh	r2, [r2, #10]
 800babe:	9202      	str	r2, [sp, #8]
 800bac0:	2203      	movs	r2, #3
 800bac2:	9201      	str	r2, [sp, #4]
 800bac4:	9300      	str	r3, [sp, #0]
 800bac6:	4623      	mov	r3, r4
 800bac8:	4602      	mov	r2, r0
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f001 ff76 	bl	800d9bc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800bad0:	68bb      	ldr	r3, [r7, #8]
 800bad2:	781b      	ldrb	r3, [r3, #0]
 800bad4:	2200      	movs	r2, #0
 800bad6:	4619      	mov	r1, r3
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	f003 f800 	bl	800eade <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800bade:	2300      	movs	r3, #0
 800bae0:	2200      	movs	r2, #0
 800bae2:	210a      	movs	r1, #10
 800bae4:	6878      	ldr	r0, [r7, #4]
 800bae6:	f000 fc0a 	bl	800c2fe <USBH_FindInterface>
 800baea:	4603      	mov	r3, r0
 800baec:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800baee:	7bfb      	ldrb	r3, [r7, #15]
 800baf0:	2bff      	cmp	r3, #255	@ 0xff
 800baf2:	d002      	beq.n	800bafa <USBH_CDC_InterfaceInit+0x11a>
 800baf4:	7bfb      	ldrb	r3, [r7, #15]
 800baf6:	2b01      	cmp	r3, #1
 800baf8:	d901      	bls.n	800bafe <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800bafa:	2302      	movs	r3, #2
 800bafc:	e0c2      	b.n	800bc84 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800bafe:	7bfb      	ldrb	r3, [r7, #15]
 800bb00:	687a      	ldr	r2, [r7, #4]
 800bb02:	211a      	movs	r1, #26
 800bb04:	fb01 f303 	mul.w	r3, r1, r3
 800bb08:	4413      	add	r3, r2
 800bb0a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800bb0e:	781b      	ldrb	r3, [r3, #0]
 800bb10:	b25b      	sxtb	r3, r3
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	da16      	bge.n	800bb44 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800bb16:	7bfb      	ldrb	r3, [r7, #15]
 800bb18:	687a      	ldr	r2, [r7, #4]
 800bb1a:	211a      	movs	r1, #26
 800bb1c:	fb01 f303 	mul.w	r3, r1, r3
 800bb20:	4413      	add	r3, r2
 800bb22:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800bb26:	781a      	ldrb	r2, [r3, #0]
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800bb2c:	7bfb      	ldrb	r3, [r7, #15]
 800bb2e:	687a      	ldr	r2, [r7, #4]
 800bb30:	211a      	movs	r1, #26
 800bb32:	fb01 f303 	mul.w	r3, r1, r3
 800bb36:	4413      	add	r3, r2
 800bb38:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800bb3c:	881a      	ldrh	r2, [r3, #0]
 800bb3e:	68bb      	ldr	r3, [r7, #8]
 800bb40:	835a      	strh	r2, [r3, #26]
 800bb42:	e015      	b.n	800bb70 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800bb44:	7bfb      	ldrb	r3, [r7, #15]
 800bb46:	687a      	ldr	r2, [r7, #4]
 800bb48:	211a      	movs	r1, #26
 800bb4a:	fb01 f303 	mul.w	r3, r1, r3
 800bb4e:	4413      	add	r3, r2
 800bb50:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800bb54:	781a      	ldrb	r2, [r3, #0]
 800bb56:	68bb      	ldr	r3, [r7, #8]
 800bb58:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800bb5a:	7bfb      	ldrb	r3, [r7, #15]
 800bb5c:	687a      	ldr	r2, [r7, #4]
 800bb5e:	211a      	movs	r1, #26
 800bb60:	fb01 f303 	mul.w	r3, r1, r3
 800bb64:	4413      	add	r3, r2
 800bb66:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800bb6a:	881a      	ldrh	r2, [r3, #0]
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800bb70:	7bfb      	ldrb	r3, [r7, #15]
 800bb72:	687a      	ldr	r2, [r7, #4]
 800bb74:	211a      	movs	r1, #26
 800bb76:	fb01 f303 	mul.w	r3, r1, r3
 800bb7a:	4413      	add	r3, r2
 800bb7c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800bb80:	781b      	ldrb	r3, [r3, #0]
 800bb82:	b25b      	sxtb	r3, r3
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	da16      	bge.n	800bbb6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800bb88:	7bfb      	ldrb	r3, [r7, #15]
 800bb8a:	687a      	ldr	r2, [r7, #4]
 800bb8c:	211a      	movs	r1, #26
 800bb8e:	fb01 f303 	mul.w	r3, r1, r3
 800bb92:	4413      	add	r3, r2
 800bb94:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800bb98:	781a      	ldrb	r2, [r3, #0]
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800bb9e:	7bfb      	ldrb	r3, [r7, #15]
 800bba0:	687a      	ldr	r2, [r7, #4]
 800bba2:	211a      	movs	r1, #26
 800bba4:	fb01 f303 	mul.w	r3, r1, r3
 800bba8:	4413      	add	r3, r2
 800bbaa:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800bbae:	881a      	ldrh	r2, [r3, #0]
 800bbb0:	68bb      	ldr	r3, [r7, #8]
 800bbb2:	835a      	strh	r2, [r3, #26]
 800bbb4:	e015      	b.n	800bbe2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800bbb6:	7bfb      	ldrb	r3, [r7, #15]
 800bbb8:	687a      	ldr	r2, [r7, #4]
 800bbba:	211a      	movs	r1, #26
 800bbbc:	fb01 f303 	mul.w	r3, r1, r3
 800bbc0:	4413      	add	r3, r2
 800bbc2:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800bbc6:	781a      	ldrb	r2, [r3, #0]
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800bbcc:	7bfb      	ldrb	r3, [r7, #15]
 800bbce:	687a      	ldr	r2, [r7, #4]
 800bbd0:	211a      	movs	r1, #26
 800bbd2:	fb01 f303 	mul.w	r3, r1, r3
 800bbd6:	4413      	add	r3, r2
 800bbd8:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800bbdc:	881a      	ldrh	r2, [r3, #0]
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800bbe2:	68bb      	ldr	r3, [r7, #8]
 800bbe4:	7b9b      	ldrb	r3, [r3, #14]
 800bbe6:	4619      	mov	r1, r3
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	f001 ff16 	bl	800da1a <USBH_AllocPipe>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	461a      	mov	r2, r3
 800bbf2:	68bb      	ldr	r3, [r7, #8]
 800bbf4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800bbf6:	68bb      	ldr	r3, [r7, #8]
 800bbf8:	7bdb      	ldrb	r3, [r3, #15]
 800bbfa:	4619      	mov	r1, r3
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	f001 ff0c 	bl	800da1a <USBH_AllocPipe>
 800bc02:	4603      	mov	r3, r0
 800bc04:	461a      	mov	r2, r3
 800bc06:	68bb      	ldr	r3, [r7, #8]
 800bc08:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	7b59      	ldrb	r1, [r3, #13]
 800bc0e:	68bb      	ldr	r3, [r7, #8]
 800bc10:	7b98      	ldrb	r0, [r3, #14]
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bc1e:	68ba      	ldr	r2, [r7, #8]
 800bc20:	8b12      	ldrh	r2, [r2, #24]
 800bc22:	9202      	str	r2, [sp, #8]
 800bc24:	2202      	movs	r2, #2
 800bc26:	9201      	str	r2, [sp, #4]
 800bc28:	9300      	str	r3, [sp, #0]
 800bc2a:	4623      	mov	r3, r4
 800bc2c:	4602      	mov	r2, r0
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f001 fec4 	bl	800d9bc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	7b19      	ldrb	r1, [r3, #12]
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	7bd8      	ldrb	r0, [r3, #15]
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bc48:	68ba      	ldr	r2, [r7, #8]
 800bc4a:	8b52      	ldrh	r2, [r2, #26]
 800bc4c:	9202      	str	r2, [sp, #8]
 800bc4e:	2202      	movs	r2, #2
 800bc50:	9201      	str	r2, [sp, #4]
 800bc52:	9300      	str	r3, [sp, #0]
 800bc54:	4623      	mov	r3, r4
 800bc56:	4602      	mov	r2, r0
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f001 feaf 	bl	800d9bc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	2200      	movs	r2, #0
 800bc62:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800bc66:	68bb      	ldr	r3, [r7, #8]
 800bc68:	7b5b      	ldrb	r3, [r3, #13]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	4619      	mov	r1, r3
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	f002 ff35 	bl	800eade <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	7b1b      	ldrb	r3, [r3, #12]
 800bc78:	2200      	movs	r2, #0
 800bc7a:	4619      	mov	r1, r3
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	f002 ff2e 	bl	800eade <USBH_LL_SetToggle>

  return USBH_OK;
 800bc82:	2300      	movs	r3, #0
}
 800bc84:	4618      	mov	r0, r3
 800bc86:	3714      	adds	r7, #20
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd90      	pop	{r4, r7, pc}

0800bc8c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b084      	sub	sp, #16
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bc9a:	69db      	ldr	r3, [r3, #28]
 800bc9c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	781b      	ldrb	r3, [r3, #0]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d00e      	beq.n	800bcc4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	781b      	ldrb	r3, [r3, #0]
 800bcaa:	4619      	mov	r1, r3
 800bcac:	6878      	ldr	r0, [r7, #4]
 800bcae:	f001 fea4 	bl	800d9fa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	781b      	ldrb	r3, [r3, #0]
 800bcb6:	4619      	mov	r1, r3
 800bcb8:	6878      	ldr	r0, [r7, #4]
 800bcba:	f001 fecf 	bl	800da5c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	7b1b      	ldrb	r3, [r3, #12]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d00e      	beq.n	800bcea <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	7b1b      	ldrb	r3, [r3, #12]
 800bcd0:	4619      	mov	r1, r3
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f001 fe91 	bl	800d9fa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	7b1b      	ldrb	r3, [r3, #12]
 800bcdc:	4619      	mov	r1, r3
 800bcde:	6878      	ldr	r0, [r7, #4]
 800bce0:	f001 febc 	bl	800da5c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	2200      	movs	r2, #0
 800bce8:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	7b5b      	ldrb	r3, [r3, #13]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d00e      	beq.n	800bd10 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	7b5b      	ldrb	r3, [r3, #13]
 800bcf6:	4619      	mov	r1, r3
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f001 fe7e 	bl	800d9fa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	7b5b      	ldrb	r3, [r3, #13]
 800bd02:	4619      	mov	r1, r3
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f001 fea9 	bl	800da5c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bd16:	69db      	ldr	r3, [r3, #28]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d00b      	beq.n	800bd34 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bd22:	69db      	ldr	r3, [r3, #28]
 800bd24:	4618      	mov	r0, r3
 800bd26:	f002 ff4d 	bl	800ebc4 <free>
    phost->pActiveClass->pData = 0U;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bd30:	2200      	movs	r2, #0
 800bd32:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800bd34:	2300      	movs	r3, #0
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	3710      	adds	r7, #16
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}

0800bd3e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800bd3e:	b580      	push	{r7, lr}
 800bd40:	b084      	sub	sp, #16
 800bd42:	af00      	add	r7, sp, #0
 800bd44:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bd4c:	69db      	ldr	r3, [r3, #28]
 800bd4e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	3340      	adds	r3, #64	@ 0x40
 800bd54:	4619      	mov	r1, r3
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	f000 f8b1 	bl	800bebe <GetLineCoding>
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800bd60:	7afb      	ldrb	r3, [r7, #11]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d105      	bne.n	800bd72 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800bd6c:	2102      	movs	r1, #2
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800bd72:	7afb      	ldrb	r3, [r7, #11]
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	3710      	adds	r7, #16
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}

0800bd7c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b084      	sub	sp, #16
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800bd84:	2301      	movs	r3, #1
 800bd86:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bd92:	69db      	ldr	r3, [r3, #28]
 800bd94:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800bd9c:	2b04      	cmp	r3, #4
 800bd9e:	d877      	bhi.n	800be90 <USBH_CDC_Process+0x114>
 800bda0:	a201      	add	r2, pc, #4	@ (adr r2, 800bda8 <USBH_CDC_Process+0x2c>)
 800bda2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bda6:	bf00      	nop
 800bda8:	0800bdbd 	.word	0x0800bdbd
 800bdac:	0800bdc3 	.word	0x0800bdc3
 800bdb0:	0800bdf3 	.word	0x0800bdf3
 800bdb4:	0800be67 	.word	0x0800be67
 800bdb8:	0800be75 	.word	0x0800be75
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	73fb      	strb	r3, [r7, #15]
      break;
 800bdc0:	e06d      	b.n	800be9e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bdc6:	4619      	mov	r1, r3
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	f000 f897 	bl	800befc <SetLineCoding>
 800bdce:	4603      	mov	r3, r0
 800bdd0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800bdd2:	7bbb      	ldrb	r3, [r7, #14]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d104      	bne.n	800bde2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800bdd8:	68bb      	ldr	r3, [r7, #8]
 800bdda:	2202      	movs	r2, #2
 800bddc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800bde0:	e058      	b.n	800be94 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800bde2:	7bbb      	ldrb	r3, [r7, #14]
 800bde4:	2b01      	cmp	r3, #1
 800bde6:	d055      	beq.n	800be94 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	2204      	movs	r2, #4
 800bdec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800bdf0:	e050      	b.n	800be94 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	3340      	adds	r3, #64	@ 0x40
 800bdf6:	4619      	mov	r1, r3
 800bdf8:	6878      	ldr	r0, [r7, #4]
 800bdfa:	f000 f860 	bl	800bebe <GetLineCoding>
 800bdfe:	4603      	mov	r3, r0
 800be00:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800be02:	7bbb      	ldrb	r3, [r7, #14]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d126      	bne.n	800be56 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	2200      	movs	r2, #0
 800be0c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800be1a:	791b      	ldrb	r3, [r3, #4]
 800be1c:	429a      	cmp	r2, r3
 800be1e:	d13b      	bne.n	800be98 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800be2a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800be2c:	429a      	cmp	r2, r3
 800be2e:	d133      	bne.n	800be98 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800be36:	68bb      	ldr	r3, [r7, #8]
 800be38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800be3a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800be3c:	429a      	cmp	r2, r3
 800be3e:	d12b      	bne.n	800be98 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800be48:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800be4a:	429a      	cmp	r2, r3
 800be4c:	d124      	bne.n	800be98 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f000 f958 	bl	800c104 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800be54:	e020      	b.n	800be98 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800be56:	7bbb      	ldrb	r3, [r7, #14]
 800be58:	2b01      	cmp	r3, #1
 800be5a:	d01d      	beq.n	800be98 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	2204      	movs	r2, #4
 800be60:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800be64:	e018      	b.n	800be98 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f000 f867 	bl	800bf3a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800be6c:	6878      	ldr	r0, [r7, #4]
 800be6e:	f000 f8da 	bl	800c026 <CDC_ProcessReception>
      break;
 800be72:	e014      	b.n	800be9e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800be74:	2100      	movs	r1, #0
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	f001 f81a 	bl	800ceb0 <USBH_ClrFeature>
 800be7c:	4603      	mov	r3, r0
 800be7e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800be80:	7bbb      	ldrb	r3, [r7, #14]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d10a      	bne.n	800be9c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800be86:	68bb      	ldr	r3, [r7, #8]
 800be88:	2200      	movs	r2, #0
 800be8a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800be8e:	e005      	b.n	800be9c <USBH_CDC_Process+0x120>

    default:
      break;
 800be90:	bf00      	nop
 800be92:	e004      	b.n	800be9e <USBH_CDC_Process+0x122>
      break;
 800be94:	bf00      	nop
 800be96:	e002      	b.n	800be9e <USBH_CDC_Process+0x122>
      break;
 800be98:	bf00      	nop
 800be9a:	e000      	b.n	800be9e <USBH_CDC_Process+0x122>
      break;
 800be9c:	bf00      	nop

  }

  return status;
 800be9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bea0:	4618      	mov	r0, r3
 800bea2:	3710      	adds	r7, #16
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}

0800bea8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800bea8:	b480      	push	{r7}
 800beaa:	b083      	sub	sp, #12
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800beb0:	2300      	movs	r3, #0
}
 800beb2:	4618      	mov	r0, r3
 800beb4:	370c      	adds	r7, #12
 800beb6:	46bd      	mov	sp, r7
 800beb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebc:	4770      	bx	lr

0800bebe <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800bebe:	b580      	push	{r7, lr}
 800bec0:	b082      	sub	sp, #8
 800bec2:	af00      	add	r7, sp, #0
 800bec4:	6078      	str	r0, [r7, #4]
 800bec6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	22a1      	movs	r2, #161	@ 0xa1
 800becc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2221      	movs	r2, #33	@ 0x21
 800bed2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2200      	movs	r2, #0
 800bed8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	2200      	movs	r2, #0
 800bede:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2207      	movs	r2, #7
 800bee4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	2207      	movs	r2, #7
 800beea:	4619      	mov	r1, r3
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f001 fb14 	bl	800d51a <USBH_CtlReq>
 800bef2:	4603      	mov	r3, r0
}
 800bef4:	4618      	mov	r0, r3
 800bef6:	3708      	adds	r7, #8
 800bef8:	46bd      	mov	sp, r7
 800befa:	bd80      	pop	{r7, pc}

0800befc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b082      	sub	sp, #8
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
 800bf04:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	2221      	movs	r2, #33	@ 0x21
 800bf0a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2220      	movs	r2, #32
 800bf10:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2200      	movs	r2, #0
 800bf16:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2207      	movs	r2, #7
 800bf22:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	2207      	movs	r2, #7
 800bf28:	4619      	mov	r1, r3
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	f001 faf5 	bl	800d51a <USBH_CtlReq>
 800bf30:	4603      	mov	r3, r0
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	3708      	adds	r7, #8
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}

0800bf3a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800bf3a:	b580      	push	{r7, lr}
 800bf3c:	b086      	sub	sp, #24
 800bf3e:	af02      	add	r7, sp, #8
 800bf40:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bf48:	69db      	ldr	r3, [r3, #28]
 800bf4a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800bf56:	2b01      	cmp	r3, #1
 800bf58:	d002      	beq.n	800bf60 <CDC_ProcessTransmission+0x26>
 800bf5a:	2b02      	cmp	r3, #2
 800bf5c:	d023      	beq.n	800bfa6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800bf5e:	e05e      	b.n	800c01e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf64:	68fa      	ldr	r2, [r7, #12]
 800bf66:	8b12      	ldrh	r2, [r2, #24]
 800bf68:	4293      	cmp	r3, r2
 800bf6a:	d90b      	bls.n	800bf84 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	69d9      	ldr	r1, [r3, #28]
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	8b1a      	ldrh	r2, [r3, #24]
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	7b5b      	ldrb	r3, [r3, #13]
 800bf78:	2001      	movs	r0, #1
 800bf7a:	9000      	str	r0, [sp, #0]
 800bf7c:	6878      	ldr	r0, [r7, #4]
 800bf7e:	f001 fcda 	bl	800d936 <USBH_BulkSendData>
 800bf82:	e00b      	b.n	800bf9c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800bf8c:	b29a      	uxth	r2, r3
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	7b5b      	ldrb	r3, [r3, #13]
 800bf92:	2001      	movs	r0, #1
 800bf94:	9000      	str	r0, [sp, #0]
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f001 fccd 	bl	800d936 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	2202      	movs	r2, #2
 800bfa0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800bfa4:	e03b      	b.n	800c01e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	7b5b      	ldrb	r3, [r3, #13]
 800bfaa:	4619      	mov	r1, r3
 800bfac:	6878      	ldr	r0, [r7, #4]
 800bfae:	f002 fd75 	bl	800ea9c <USBH_LL_GetURBState>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800bfb6:	7afb      	ldrb	r3, [r7, #11]
 800bfb8:	2b01      	cmp	r3, #1
 800bfba:	d128      	bne.n	800c00e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfc0:	68fa      	ldr	r2, [r7, #12]
 800bfc2:	8b12      	ldrh	r2, [r2, #24]
 800bfc4:	4293      	cmp	r3, r2
 800bfc6:	d90e      	bls.n	800bfe6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfcc:	68fa      	ldr	r2, [r7, #12]
 800bfce:	8b12      	ldrh	r2, [r2, #24]
 800bfd0:	1a9a      	subs	r2, r3, r2
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	69db      	ldr	r3, [r3, #28]
 800bfda:	68fa      	ldr	r2, [r7, #12]
 800bfdc:	8b12      	ldrh	r2, [r2, #24]
 800bfde:	441a      	add	r2, r3
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	61da      	str	r2, [r3, #28]
 800bfe4:	e002      	b.n	800bfec <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	2200      	movs	r2, #0
 800bfea:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d004      	beq.n	800bffe <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	2201      	movs	r2, #1
 800bff8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800bffc:	e00e      	b.n	800c01c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	2200      	movs	r2, #0
 800c002:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f000 f868 	bl	800c0dc <USBH_CDC_TransmitCallback>
      break;
 800c00c:	e006      	b.n	800c01c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800c00e:	7afb      	ldrb	r3, [r7, #11]
 800c010:	2b02      	cmp	r3, #2
 800c012:	d103      	bne.n	800c01c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	2201      	movs	r2, #1
 800c018:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800c01c:	bf00      	nop
  }
}
 800c01e:	bf00      	nop
 800c020:	3710      	adds	r7, #16
 800c022:	46bd      	mov	sp, r7
 800c024:	bd80      	pop	{r7, pc}

0800c026 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800c026:	b580      	push	{r7, lr}
 800c028:	b086      	sub	sp, #24
 800c02a:	af00      	add	r7, sp, #0
 800c02c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c034:	69db      	ldr	r3, [r3, #28]
 800c036:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c038:	2300      	movs	r3, #0
 800c03a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800c03c:	697b      	ldr	r3, [r7, #20]
 800c03e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800c042:	2b03      	cmp	r3, #3
 800c044:	d002      	beq.n	800c04c <CDC_ProcessReception+0x26>
 800c046:	2b04      	cmp	r3, #4
 800c048:	d00e      	beq.n	800c068 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800c04a:	e043      	b.n	800c0d4 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800c04c:	697b      	ldr	r3, [r7, #20]
 800c04e:	6a19      	ldr	r1, [r3, #32]
 800c050:	697b      	ldr	r3, [r7, #20]
 800c052:	8b5a      	ldrh	r2, [r3, #26]
 800c054:	697b      	ldr	r3, [r7, #20]
 800c056:	7b1b      	ldrb	r3, [r3, #12]
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	f001 fc91 	bl	800d980 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800c05e:	697b      	ldr	r3, [r7, #20]
 800c060:	2204      	movs	r2, #4
 800c062:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800c066:	e035      	b.n	800c0d4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800c068:	697b      	ldr	r3, [r7, #20]
 800c06a:	7b1b      	ldrb	r3, [r3, #12]
 800c06c:	4619      	mov	r1, r3
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f002 fd14 	bl	800ea9c <USBH_LL_GetURBState>
 800c074:	4603      	mov	r3, r0
 800c076:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800c078:	7cfb      	ldrb	r3, [r7, #19]
 800c07a:	2b01      	cmp	r3, #1
 800c07c:	d129      	bne.n	800c0d2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800c07e:	697b      	ldr	r3, [r7, #20]
 800c080:	7b1b      	ldrb	r3, [r3, #12]
 800c082:	4619      	mov	r1, r3
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f002 fc77 	bl	800e978 <USBH_LL_GetLastXferSize>
 800c08a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800c08c:	697b      	ldr	r3, [r7, #20]
 800c08e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c090:	68fa      	ldr	r2, [r7, #12]
 800c092:	429a      	cmp	r2, r3
 800c094:	d016      	beq.n	800c0c4 <CDC_ProcessReception+0x9e>
 800c096:	697b      	ldr	r3, [r7, #20]
 800c098:	8b5b      	ldrh	r3, [r3, #26]
 800c09a:	461a      	mov	r2, r3
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	4293      	cmp	r3, r2
 800c0a0:	d110      	bne.n	800c0c4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800c0a2:	697b      	ldr	r3, [r7, #20]
 800c0a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	1ad2      	subs	r2, r2, r3
 800c0aa:	697b      	ldr	r3, [r7, #20]
 800c0ac:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800c0ae:	697b      	ldr	r3, [r7, #20]
 800c0b0:	6a1a      	ldr	r2, [r3, #32]
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	441a      	add	r2, r3
 800c0b6:	697b      	ldr	r3, [r7, #20]
 800c0b8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800c0ba:	697b      	ldr	r3, [r7, #20]
 800c0bc:	2203      	movs	r2, #3
 800c0be:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800c0c2:	e006      	b.n	800c0d2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800c0c4:	697b      	ldr	r3, [r7, #20]
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800c0cc:	6878      	ldr	r0, [r7, #4]
 800c0ce:	f000 f80f 	bl	800c0f0 <USBH_CDC_ReceiveCallback>
      break;
 800c0d2:	bf00      	nop
  }
}
 800c0d4:	bf00      	nop
 800c0d6:	3718      	adds	r7, #24
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}

0800c0dc <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b083      	sub	sp, #12
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c0e4:	bf00      	nop
 800c0e6:	370c      	adds	r7, #12
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ee:	4770      	bx	lr

0800c0f0 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800c0f0:	b480      	push	{r7}
 800c0f2:	b083      	sub	sp, #12
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c0f8:	bf00      	nop
 800c0fa:	370c      	adds	r7, #12
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c102:	4770      	bx	lr

0800c104 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800c104:	b480      	push	{r7}
 800c106:	b083      	sub	sp, #12
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c10c:	bf00      	nop
 800c10e:	370c      	adds	r7, #12
 800c110:	46bd      	mov	sp, r7
 800c112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c116:	4770      	bx	lr

0800c118 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b084      	sub	sp, #16
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	60f8      	str	r0, [r7, #12]
 800c120:	60b9      	str	r1, [r7, #8]
 800c122:	4613      	mov	r3, r2
 800c124:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d101      	bne.n	800c130 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800c12c:	2302      	movs	r3, #2
 800c12e:	e029      	b.n	800c184 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	79fa      	ldrb	r2, [r7, #7]
 800c134:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	2200      	movs	r2, #0
 800c13c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	2200      	movs	r2, #0
 800c144:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800c148:	68f8      	ldr	r0, [r7, #12]
 800c14a:	f000 f81f 	bl	800c18c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	2200      	movs	r2, #0
 800c152:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	2200      	movs	r2, #0
 800c15a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	2200      	movs	r2, #0
 800c162:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	2200      	movs	r2, #0
 800c16a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d003      	beq.n	800c17c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	68ba      	ldr	r2, [r7, #8]
 800c178:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800c17c:	68f8      	ldr	r0, [r7, #12]
 800c17e:	f002 fb41 	bl	800e804 <USBH_LL_Init>

  return USBH_OK;
 800c182:	2300      	movs	r3, #0
}
 800c184:	4618      	mov	r0, r3
 800c186:	3710      	adds	r7, #16
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd80      	pop	{r7, pc}

0800c18c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b084      	sub	sp, #16
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800c194:	2300      	movs	r3, #0
 800c196:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c198:	2300      	movs	r3, #0
 800c19a:	60fb      	str	r3, [r7, #12]
 800c19c:	e009      	b.n	800c1b2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800c19e:	687a      	ldr	r2, [r7, #4]
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	33e0      	adds	r3, #224	@ 0xe0
 800c1a4:	009b      	lsls	r3, r3, #2
 800c1a6:	4413      	add	r3, r2
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	3301      	adds	r3, #1
 800c1b0:	60fb      	str	r3, [r7, #12]
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	2b0f      	cmp	r3, #15
 800c1b6:	d9f2      	bls.n	800c19e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	60fb      	str	r3, [r7, #12]
 800c1bc:	e009      	b.n	800c1d2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800c1be:	687a      	ldr	r2, [r7, #4]
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	4413      	add	r3, r2
 800c1c4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	3301      	adds	r3, #1
 800c1d0:	60fb      	str	r3, [r7, #12]
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c1d8:	d3f1      	bcc.n	800c1be <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	2200      	movs	r2, #0
 800c1de:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2201      	movs	r2, #1
 800c1ea:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2201      	movs	r2, #1
 800c1f8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2240      	movs	r2, #64	@ 0x40
 800c1fe:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2200      	movs	r2, #0
 800c204:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2200      	movs	r2, #0
 800c20a:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	2201      	movs	r2, #1
 800c212:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2200      	movs	r2, #0
 800c21a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2200      	movs	r2, #0
 800c222:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	331c      	adds	r3, #28
 800c22a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c22e:	2100      	movs	r1, #0
 800c230:	4618      	mov	r0, r3
 800c232:	f002 fd7d 	bl	800ed30 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800c23c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c240:	2100      	movs	r1, #0
 800c242:	4618      	mov	r0, r3
 800c244:	f002 fd74 	bl	800ed30 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800c24e:	2212      	movs	r2, #18
 800c250:	2100      	movs	r1, #0
 800c252:	4618      	mov	r0, r3
 800c254:	f002 fd6c 	bl	800ed30 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800c25e:	223e      	movs	r2, #62	@ 0x3e
 800c260:	2100      	movs	r1, #0
 800c262:	4618      	mov	r0, r3
 800c264:	f002 fd64 	bl	800ed30 <memset>

  return USBH_OK;
 800c268:	2300      	movs	r3, #0
}
 800c26a:	4618      	mov	r0, r3
 800c26c:	3710      	adds	r7, #16
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd80      	pop	{r7, pc}

0800c272 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800c272:	b480      	push	{r7}
 800c274:	b085      	sub	sp, #20
 800c276:	af00      	add	r7, sp, #0
 800c278:	6078      	str	r0, [r7, #4]
 800c27a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800c27c:	2300      	movs	r3, #0
 800c27e:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d016      	beq.n	800c2b4 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d10e      	bne.n	800c2ae <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800c296:	1c59      	adds	r1, r3, #1
 800c298:	687a      	ldr	r2, [r7, #4]
 800c29a:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800c29e:	687a      	ldr	r2, [r7, #4]
 800c2a0:	33de      	adds	r3, #222	@ 0xde
 800c2a2:	6839      	ldr	r1, [r7, #0]
 800c2a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	73fb      	strb	r3, [r7, #15]
 800c2ac:	e004      	b.n	800c2b8 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800c2ae:	2302      	movs	r3, #2
 800c2b0:	73fb      	strb	r3, [r7, #15]
 800c2b2:	e001      	b.n	800c2b8 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800c2b4:	2302      	movs	r3, #2
 800c2b6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c2b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	3714      	adds	r7, #20
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c4:	4770      	bx	lr

0800c2c6 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800c2c6:	b480      	push	{r7}
 800c2c8:	b085      	sub	sp, #20
 800c2ca:	af00      	add	r7, sp, #0
 800c2cc:	6078      	str	r0, [r7, #4]
 800c2ce:	460b      	mov	r3, r1
 800c2d0:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800c2dc:	78fa      	ldrb	r2, [r7, #3]
 800c2de:	429a      	cmp	r2, r3
 800c2e0:	d204      	bcs.n	800c2ec <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	78fa      	ldrb	r2, [r7, #3]
 800c2e6:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800c2ea:	e001      	b.n	800c2f0 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800c2ec:	2302      	movs	r3, #2
 800c2ee:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c2f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	3714      	adds	r7, #20
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fc:	4770      	bx	lr

0800c2fe <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800c2fe:	b480      	push	{r7}
 800c300:	b087      	sub	sp, #28
 800c302:	af00      	add	r7, sp, #0
 800c304:	6078      	str	r0, [r7, #4]
 800c306:	4608      	mov	r0, r1
 800c308:	4611      	mov	r1, r2
 800c30a:	461a      	mov	r2, r3
 800c30c:	4603      	mov	r3, r0
 800c30e:	70fb      	strb	r3, [r7, #3]
 800c310:	460b      	mov	r3, r1
 800c312:	70bb      	strb	r3, [r7, #2]
 800c314:	4613      	mov	r3, r2
 800c316:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800c318:	2300      	movs	r3, #0
 800c31a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c31c:	2300      	movs	r3, #0
 800c31e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800c326:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c328:	e025      	b.n	800c376 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800c32a:	7dfb      	ldrb	r3, [r7, #23]
 800c32c:	221a      	movs	r2, #26
 800c32e:	fb02 f303 	mul.w	r3, r2, r3
 800c332:	3308      	adds	r3, #8
 800c334:	68fa      	ldr	r2, [r7, #12]
 800c336:	4413      	add	r3, r2
 800c338:	3302      	adds	r3, #2
 800c33a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c33c:	693b      	ldr	r3, [r7, #16]
 800c33e:	795b      	ldrb	r3, [r3, #5]
 800c340:	78fa      	ldrb	r2, [r7, #3]
 800c342:	429a      	cmp	r2, r3
 800c344:	d002      	beq.n	800c34c <USBH_FindInterface+0x4e>
 800c346:	78fb      	ldrb	r3, [r7, #3]
 800c348:	2bff      	cmp	r3, #255	@ 0xff
 800c34a:	d111      	bne.n	800c370 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c34c:	693b      	ldr	r3, [r7, #16]
 800c34e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c350:	78ba      	ldrb	r2, [r7, #2]
 800c352:	429a      	cmp	r2, r3
 800c354:	d002      	beq.n	800c35c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c356:	78bb      	ldrb	r3, [r7, #2]
 800c358:	2bff      	cmp	r3, #255	@ 0xff
 800c35a:	d109      	bne.n	800c370 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c35c:	693b      	ldr	r3, [r7, #16]
 800c35e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c360:	787a      	ldrb	r2, [r7, #1]
 800c362:	429a      	cmp	r2, r3
 800c364:	d002      	beq.n	800c36c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c366:	787b      	ldrb	r3, [r7, #1]
 800c368:	2bff      	cmp	r3, #255	@ 0xff
 800c36a:	d101      	bne.n	800c370 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800c36c:	7dfb      	ldrb	r3, [r7, #23]
 800c36e:	e006      	b.n	800c37e <USBH_FindInterface+0x80>
    }
    if_ix++;
 800c370:	7dfb      	ldrb	r3, [r7, #23]
 800c372:	3301      	adds	r3, #1
 800c374:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c376:	7dfb      	ldrb	r3, [r7, #23]
 800c378:	2b01      	cmp	r3, #1
 800c37a:	d9d6      	bls.n	800c32a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800c37c:	23ff      	movs	r3, #255	@ 0xff
}
 800c37e:	4618      	mov	r0, r3
 800c380:	371c      	adds	r7, #28
 800c382:	46bd      	mov	sp, r7
 800c384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c388:	4770      	bx	lr

0800c38a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800c38a:	b580      	push	{r7, lr}
 800c38c:	b082      	sub	sp, #8
 800c38e:	af00      	add	r7, sp, #0
 800c390:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	f002 fa78 	bl	800e888 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800c398:	2101      	movs	r1, #1
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f002 fb91 	bl	800eac2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800c3a0:	2300      	movs	r3, #0
}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	3708      	adds	r7, #8
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bd80      	pop	{r7, pc}
	...

0800c3ac <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b088      	sub	sp, #32
 800c3b0:	af04      	add	r7, sp, #16
 800c3b2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800c3b4:	2302      	movs	r3, #2
 800c3b6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800c3c2:	b2db      	uxtb	r3, r3
 800c3c4:	2b01      	cmp	r3, #1
 800c3c6:	d102      	bne.n	800c3ce <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2203      	movs	r2, #3
 800c3cc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	781b      	ldrb	r3, [r3, #0]
 800c3d2:	b2db      	uxtb	r3, r3
 800c3d4:	2b0b      	cmp	r3, #11
 800c3d6:	f200 81bb 	bhi.w	800c750 <USBH_Process+0x3a4>
 800c3da:	a201      	add	r2, pc, #4	@ (adr r2, 800c3e0 <USBH_Process+0x34>)
 800c3dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3e0:	0800c411 	.word	0x0800c411
 800c3e4:	0800c443 	.word	0x0800c443
 800c3e8:	0800c4ab 	.word	0x0800c4ab
 800c3ec:	0800c6eb 	.word	0x0800c6eb
 800c3f0:	0800c751 	.word	0x0800c751
 800c3f4:	0800c54b 	.word	0x0800c54b
 800c3f8:	0800c691 	.word	0x0800c691
 800c3fc:	0800c581 	.word	0x0800c581
 800c400:	0800c5a1 	.word	0x0800c5a1
 800c404:	0800c5bf 	.word	0x0800c5bf
 800c408:	0800c603 	.word	0x0800c603
 800c40c:	0800c6d3 	.word	0x0800c6d3
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800c416:	b2db      	uxtb	r3, r3
 800c418:	2b00      	cmp	r3, #0
 800c41a:	f000 819b 	beq.w	800c754 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2201      	movs	r2, #1
 800c422:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800c424:	20c8      	movs	r0, #200	@ 0xc8
 800c426:	f002 fb8d 	bl	800eb44 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800c42a:	6878      	ldr	r0, [r7, #4]
 800c42c:	f002 fa89 	bl	800e942 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2200      	movs	r2, #0
 800c434:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2200      	movs	r2, #0
 800c43c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c440:	e188      	b.n	800c754 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800c448:	2b01      	cmp	r3, #1
 800c44a:	d107      	bne.n	800c45c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2200      	movs	r2, #0
 800c450:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2202      	movs	r2, #2
 800c458:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c45a:	e18a      	b.n	800c772 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800c462:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c466:	d914      	bls.n	800c492 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800c46e:	3301      	adds	r3, #1
 800c470:	b2da      	uxtb	r2, r3
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800c47e:	2b03      	cmp	r3, #3
 800c480:	d903      	bls.n	800c48a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	220d      	movs	r2, #13
 800c486:	701a      	strb	r2, [r3, #0]
      break;
 800c488:	e173      	b.n	800c772 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2200      	movs	r2, #0
 800c48e:	701a      	strb	r2, [r3, #0]
      break;
 800c490:	e16f      	b.n	800c772 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800c498:	f103 020a 	add.w	r2, r3, #10
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800c4a2:	200a      	movs	r0, #10
 800c4a4:	f002 fb4e 	bl	800eb44 <USBH_Delay>
      break;
 800c4a8:	e163      	b.n	800c772 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d005      	beq.n	800c4c0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c4ba:	2104      	movs	r1, #4
 800c4bc:	6878      	ldr	r0, [r7, #4]
 800c4be:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800c4c0:	2064      	movs	r0, #100	@ 0x64
 800c4c2:	f002 fb3f 	bl	800eb44 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800c4c6:	6878      	ldr	r0, [r7, #4]
 800c4c8:	f002 fa14 	bl	800e8f4 <USBH_LL_GetSpeed>
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	461a      	mov	r2, r3
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2205      	movs	r2, #5
 800c4da:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800c4dc:	2100      	movs	r1, #0
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f001 fa9b 	bl	800da1a <USBH_AllocPipe>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	461a      	mov	r2, r3
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800c4ec:	2180      	movs	r1, #128	@ 0x80
 800c4ee:	6878      	ldr	r0, [r7, #4]
 800c4f0:	f001 fa93 	bl	800da1a <USBH_AllocPipe>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	461a      	mov	r2, r3
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	7919      	ldrb	r1, [r3, #4]
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c50c:	687a      	ldr	r2, [r7, #4]
 800c50e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c510:	9202      	str	r2, [sp, #8]
 800c512:	2200      	movs	r2, #0
 800c514:	9201      	str	r2, [sp, #4]
 800c516:	9300      	str	r3, [sp, #0]
 800c518:	4603      	mov	r3, r0
 800c51a:	2280      	movs	r2, #128	@ 0x80
 800c51c:	6878      	ldr	r0, [r7, #4]
 800c51e:	f001 fa4d 	bl	800d9bc <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	7959      	ldrb	r1, [r3, #5]
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c532:	687a      	ldr	r2, [r7, #4]
 800c534:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c536:	9202      	str	r2, [sp, #8]
 800c538:	2200      	movs	r2, #0
 800c53a:	9201      	str	r2, [sp, #4]
 800c53c:	9300      	str	r3, [sp, #0]
 800c53e:	4603      	mov	r3, r0
 800c540:	2200      	movs	r2, #0
 800c542:	6878      	ldr	r0, [r7, #4]
 800c544:	f001 fa3a 	bl	800d9bc <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c548:	e113      	b.n	800c772 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800c54a:	6878      	ldr	r0, [r7, #4]
 800c54c:	f000 f916 	bl	800c77c <USBH_HandleEnum>
 800c550:	4603      	mov	r3, r0
 800c552:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800c554:	7bbb      	ldrb	r3, [r7, #14]
 800c556:	b2db      	uxtb	r3, r3
 800c558:	2b00      	cmp	r3, #0
 800c55a:	f040 80fd 	bne.w	800c758 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2200      	movs	r2, #0
 800c562:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800c56c:	2b01      	cmp	r3, #1
 800c56e:	d103      	bne.n	800c578 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2208      	movs	r2, #8
 800c574:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c576:	e0ef      	b.n	800c758 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2207      	movs	r2, #7
 800c57c:	701a      	strb	r2, [r3, #0]
      break;
 800c57e:	e0eb      	b.n	800c758 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c586:	2b00      	cmp	r3, #0
 800c588:	f000 80e8 	beq.w	800c75c <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c592:	2101      	movs	r1, #1
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	2208      	movs	r2, #8
 800c59c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800c59e:	e0dd      	b.n	800c75c <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800c5a6:	4619      	mov	r1, r3
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	f000 fc3a 	bl	800ce22 <USBH_SetCfg>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	f040 80d5 	bne.w	800c760 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	2209      	movs	r2, #9
 800c5ba:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c5bc:	e0d0      	b.n	800c760 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800c5c4:	f003 0320 	and.w	r3, r3, #32
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d016      	beq.n	800c5fa <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800c5cc:	2101      	movs	r1, #1
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f000 fc4a 	bl	800ce68 <USBH_SetFeature>
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800c5d8:	7bbb      	ldrb	r3, [r7, #14]
 800c5da:	b2db      	uxtb	r3, r3
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d103      	bne.n	800c5e8 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	220a      	movs	r2, #10
 800c5e4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c5e6:	e0bd      	b.n	800c764 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 800c5e8:	7bbb      	ldrb	r3, [r7, #14]
 800c5ea:	b2db      	uxtb	r3, r3
 800c5ec:	2b03      	cmp	r3, #3
 800c5ee:	f040 80b9 	bne.w	800c764 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	220a      	movs	r2, #10
 800c5f6:	701a      	strb	r2, [r3, #0]
      break;
 800c5f8:	e0b4      	b.n	800c764 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	220a      	movs	r2, #10
 800c5fe:	701a      	strb	r2, [r3, #0]
      break;
 800c600:	e0b0      	b.n	800c764 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800c608:	2b00      	cmp	r3, #0
 800c60a:	f000 80ad 	beq.w	800c768 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	2200      	movs	r2, #0
 800c612:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c616:	2300      	movs	r3, #0
 800c618:	73fb      	strb	r3, [r7, #15]
 800c61a:	e016      	b.n	800c64a <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800c61c:	7bfa      	ldrb	r2, [r7, #15]
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	32de      	adds	r2, #222	@ 0xde
 800c622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c626:	791a      	ldrb	r2, [r3, #4]
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800c62e:	429a      	cmp	r2, r3
 800c630:	d108      	bne.n	800c644 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800c632:	7bfa      	ldrb	r2, [r7, #15]
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	32de      	adds	r2, #222	@ 0xde
 800c638:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800c642:	e005      	b.n	800c650 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c644:	7bfb      	ldrb	r3, [r7, #15]
 800c646:	3301      	adds	r3, #1
 800c648:	73fb      	strb	r3, [r7, #15]
 800c64a:	7bfb      	ldrb	r3, [r7, #15]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d0e5      	beq.n	800c61c <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c656:	2b00      	cmp	r3, #0
 800c658:	d016      	beq.n	800c688 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c660:	689b      	ldr	r3, [r3, #8]
 800c662:	6878      	ldr	r0, [r7, #4]
 800c664:	4798      	blx	r3
 800c666:	4603      	mov	r3, r0
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d109      	bne.n	800c680 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2206      	movs	r2, #6
 800c670:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c678:	2103      	movs	r1, #3
 800c67a:	6878      	ldr	r0, [r7, #4]
 800c67c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c67e:	e073      	b.n	800c768 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	220d      	movs	r2, #13
 800c684:	701a      	strb	r2, [r3, #0]
      break;
 800c686:	e06f      	b.n	800c768 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	220d      	movs	r2, #13
 800c68c:	701a      	strb	r2, [r3, #0]
      break;
 800c68e:	e06b      	b.n	800c768 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c696:	2b00      	cmp	r3, #0
 800c698:	d017      	beq.n	800c6ca <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c6a0:	691b      	ldr	r3, [r3, #16]
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	4798      	blx	r3
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800c6aa:	7bbb      	ldrb	r3, [r7, #14]
 800c6ac:	b2db      	uxtb	r3, r3
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d103      	bne.n	800c6ba <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	220b      	movs	r2, #11
 800c6b6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c6b8:	e058      	b.n	800c76c <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 800c6ba:	7bbb      	ldrb	r3, [r7, #14]
 800c6bc:	b2db      	uxtb	r3, r3
 800c6be:	2b02      	cmp	r3, #2
 800c6c0:	d154      	bne.n	800c76c <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	220d      	movs	r2, #13
 800c6c6:	701a      	strb	r2, [r3, #0]
      break;
 800c6c8:	e050      	b.n	800c76c <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	220d      	movs	r2, #13
 800c6ce:	701a      	strb	r2, [r3, #0]
      break;
 800c6d0:	e04c      	b.n	800c76c <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d049      	beq.n	800c770 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c6e2:	695b      	ldr	r3, [r3, #20]
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	4798      	blx	r3
      }
      break;
 800c6e8:	e042      	b.n	800c770 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	f7ff fd4a 	bl	800c18c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d009      	beq.n	800c716 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c708:	68db      	ldr	r3, [r3, #12]
 800c70a:	6878      	ldr	r0, [r7, #4]
 800c70c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	2200      	movs	r2, #0
 800c712:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d005      	beq.n	800c72c <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c726:	2105      	movs	r1, #5
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800c732:	b2db      	uxtb	r3, r3
 800c734:	2b01      	cmp	r3, #1
 800c736:	d107      	bne.n	800c748 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2200      	movs	r2, #0
 800c73c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	f7ff fe22 	bl	800c38a <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c746:	e014      	b.n	800c772 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 800c748:	6878      	ldr	r0, [r7, #4]
 800c74a:	f002 f89d 	bl	800e888 <USBH_LL_Start>
      break;
 800c74e:	e010      	b.n	800c772 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 800c750:	bf00      	nop
 800c752:	e00e      	b.n	800c772 <USBH_Process+0x3c6>
      break;
 800c754:	bf00      	nop
 800c756:	e00c      	b.n	800c772 <USBH_Process+0x3c6>
      break;
 800c758:	bf00      	nop
 800c75a:	e00a      	b.n	800c772 <USBH_Process+0x3c6>
    break;
 800c75c:	bf00      	nop
 800c75e:	e008      	b.n	800c772 <USBH_Process+0x3c6>
      break;
 800c760:	bf00      	nop
 800c762:	e006      	b.n	800c772 <USBH_Process+0x3c6>
      break;
 800c764:	bf00      	nop
 800c766:	e004      	b.n	800c772 <USBH_Process+0x3c6>
      break;
 800c768:	bf00      	nop
 800c76a:	e002      	b.n	800c772 <USBH_Process+0x3c6>
      break;
 800c76c:	bf00      	nop
 800c76e:	e000      	b.n	800c772 <USBH_Process+0x3c6>
      break;
 800c770:	bf00      	nop
  }
  return USBH_OK;
 800c772:	2300      	movs	r3, #0
}
 800c774:	4618      	mov	r0, r3
 800c776:	3710      	adds	r7, #16
 800c778:	46bd      	mov	sp, r7
 800c77a:	bd80      	pop	{r7, pc}

0800c77c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b088      	sub	sp, #32
 800c780:	af04      	add	r7, sp, #16
 800c782:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800c784:	2301      	movs	r3, #1
 800c786:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800c788:	2301      	movs	r3, #1
 800c78a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	785b      	ldrb	r3, [r3, #1]
 800c790:	2b07      	cmp	r3, #7
 800c792:	f200 81bd 	bhi.w	800cb10 <USBH_HandleEnum+0x394>
 800c796:	a201      	add	r2, pc, #4	@ (adr r2, 800c79c <USBH_HandleEnum+0x20>)
 800c798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c79c:	0800c7bd 	.word	0x0800c7bd
 800c7a0:	0800c877 	.word	0x0800c877
 800c7a4:	0800c8e1 	.word	0x0800c8e1
 800c7a8:	0800c96b 	.word	0x0800c96b
 800c7ac:	0800c9d5 	.word	0x0800c9d5
 800c7b0:	0800ca45 	.word	0x0800ca45
 800c7b4:	0800ca8b 	.word	0x0800ca8b
 800c7b8:	0800cad1 	.word	0x0800cad1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800c7bc:	2108      	movs	r1, #8
 800c7be:	6878      	ldr	r0, [r7, #4]
 800c7c0:	f000 fa4c 	bl	800cc5c <USBH_Get_DevDesc>
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c7c8:	7bbb      	ldrb	r3, [r7, #14]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d12e      	bne.n	800c82c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2201      	movs	r2, #1
 800c7dc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	7919      	ldrb	r1, [r3, #4]
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c7ee:	687a      	ldr	r2, [r7, #4]
 800c7f0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c7f2:	9202      	str	r2, [sp, #8]
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	9201      	str	r2, [sp, #4]
 800c7f8:	9300      	str	r3, [sp, #0]
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	2280      	movs	r2, #128	@ 0x80
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f001 f8dc 	bl	800d9bc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	7959      	ldrb	r1, [r3, #5]
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c814:	687a      	ldr	r2, [r7, #4]
 800c816:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c818:	9202      	str	r2, [sp, #8]
 800c81a:	2200      	movs	r2, #0
 800c81c:	9201      	str	r2, [sp, #4]
 800c81e:	9300      	str	r3, [sp, #0]
 800c820:	4603      	mov	r3, r0
 800c822:	2200      	movs	r2, #0
 800c824:	6878      	ldr	r0, [r7, #4]
 800c826:	f001 f8c9 	bl	800d9bc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c82a:	e173      	b.n	800cb14 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c82c:	7bbb      	ldrb	r3, [r7, #14]
 800c82e:	2b03      	cmp	r3, #3
 800c830:	f040 8170 	bne.w	800cb14 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c83a:	3301      	adds	r3, #1
 800c83c:	b2da      	uxtb	r2, r3
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c84a:	2b03      	cmp	r3, #3
 800c84c:	d903      	bls.n	800c856 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	220d      	movs	r2, #13
 800c852:	701a      	strb	r2, [r3, #0]
      break;
 800c854:	e15e      	b.n	800cb14 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	795b      	ldrb	r3, [r3, #5]
 800c85a:	4619      	mov	r1, r3
 800c85c:	6878      	ldr	r0, [r7, #4]
 800c85e:	f001 f8fd 	bl	800da5c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	791b      	ldrb	r3, [r3, #4]
 800c866:	4619      	mov	r1, r3
 800c868:	6878      	ldr	r0, [r7, #4]
 800c86a:	f001 f8f7 	bl	800da5c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2200      	movs	r2, #0
 800c872:	701a      	strb	r2, [r3, #0]
      break;
 800c874:	e14e      	b.n	800cb14 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800c876:	2112      	movs	r1, #18
 800c878:	6878      	ldr	r0, [r7, #4]
 800c87a:	f000 f9ef 	bl	800cc5c <USBH_Get_DevDesc>
 800c87e:	4603      	mov	r3, r0
 800c880:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c882:	7bbb      	ldrb	r3, [r7, #14]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d103      	bne.n	800c890 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2202      	movs	r2, #2
 800c88c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c88e:	e143      	b.n	800cb18 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c890:	7bbb      	ldrb	r3, [r7, #14]
 800c892:	2b03      	cmp	r3, #3
 800c894:	f040 8140 	bne.w	800cb18 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c89e:	3301      	adds	r3, #1
 800c8a0:	b2da      	uxtb	r2, r3
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c8ae:	2b03      	cmp	r3, #3
 800c8b0:	d903      	bls.n	800c8ba <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	220d      	movs	r2, #13
 800c8b6:	701a      	strb	r2, [r3, #0]
      break;
 800c8b8:	e12e      	b.n	800cb18 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	795b      	ldrb	r3, [r3, #5]
 800c8be:	4619      	mov	r1, r3
 800c8c0:	6878      	ldr	r0, [r7, #4]
 800c8c2:	f001 f8cb 	bl	800da5c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	791b      	ldrb	r3, [r3, #4]
 800c8ca:	4619      	mov	r1, r3
 800c8cc:	6878      	ldr	r0, [r7, #4]
 800c8ce:	f001 f8c5 	bl	800da5c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	2200      	movs	r2, #0
 800c8dc:	701a      	strb	r2, [r3, #0]
      break;
 800c8de:	e11b      	b.n	800cb18 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800c8e0:	2101      	movs	r1, #1
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f000 fa79 	bl	800cdda <USBH_SetAddress>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c8ec:	7bbb      	ldrb	r3, [r7, #14]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d130      	bne.n	800c954 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800c8f2:	2002      	movs	r0, #2
 800c8f4:	f002 f926 	bl	800eb44 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	2201      	movs	r2, #1
 800c8fc:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2203      	movs	r2, #3
 800c904:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	7919      	ldrb	r1, [r3, #4]
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c916:	687a      	ldr	r2, [r7, #4]
 800c918:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c91a:	9202      	str	r2, [sp, #8]
 800c91c:	2200      	movs	r2, #0
 800c91e:	9201      	str	r2, [sp, #4]
 800c920:	9300      	str	r3, [sp, #0]
 800c922:	4603      	mov	r3, r0
 800c924:	2280      	movs	r2, #128	@ 0x80
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	f001 f848 	bl	800d9bc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	7959      	ldrb	r1, [r3, #5]
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c93c:	687a      	ldr	r2, [r7, #4]
 800c93e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c940:	9202      	str	r2, [sp, #8]
 800c942:	2200      	movs	r2, #0
 800c944:	9201      	str	r2, [sp, #4]
 800c946:	9300      	str	r3, [sp, #0]
 800c948:	4603      	mov	r3, r0
 800c94a:	2200      	movs	r2, #0
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	f001 f835 	bl	800d9bc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c952:	e0e3      	b.n	800cb1c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c954:	7bbb      	ldrb	r3, [r7, #14]
 800c956:	2b03      	cmp	r3, #3
 800c958:	f040 80e0 	bne.w	800cb1c <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	220d      	movs	r2, #13
 800c960:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2200      	movs	r2, #0
 800c966:	705a      	strb	r2, [r3, #1]
      break;
 800c968:	e0d8      	b.n	800cb1c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800c96a:	2109      	movs	r1, #9
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	f000 f9a1 	bl	800ccb4 <USBH_Get_CfgDesc>
 800c972:	4603      	mov	r3, r0
 800c974:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c976:	7bbb      	ldrb	r3, [r7, #14]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d103      	bne.n	800c984 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2204      	movs	r2, #4
 800c980:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c982:	e0cd      	b.n	800cb20 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c984:	7bbb      	ldrb	r3, [r7, #14]
 800c986:	2b03      	cmp	r3, #3
 800c988:	f040 80ca 	bne.w	800cb20 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c992:	3301      	adds	r3, #1
 800c994:	b2da      	uxtb	r2, r3
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c9a2:	2b03      	cmp	r3, #3
 800c9a4:	d903      	bls.n	800c9ae <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	220d      	movs	r2, #13
 800c9aa:	701a      	strb	r2, [r3, #0]
      break;
 800c9ac:	e0b8      	b.n	800cb20 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	795b      	ldrb	r3, [r3, #5]
 800c9b2:	4619      	mov	r1, r3
 800c9b4:	6878      	ldr	r0, [r7, #4]
 800c9b6:	f001 f851 	bl	800da5c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	791b      	ldrb	r3, [r3, #4]
 800c9be:	4619      	mov	r1, r3
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f001 f84b 	bl	800da5c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	701a      	strb	r2, [r3, #0]
      break;
 800c9d2:	e0a5      	b.n	800cb20 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800c9da:	4619      	mov	r1, r3
 800c9dc:	6878      	ldr	r0, [r7, #4]
 800c9de:	f000 f969 	bl	800ccb4 <USBH_Get_CfgDesc>
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c9e6:	7bbb      	ldrb	r3, [r7, #14]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d103      	bne.n	800c9f4 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	2205      	movs	r2, #5
 800c9f0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c9f2:	e097      	b.n	800cb24 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c9f4:	7bbb      	ldrb	r3, [r7, #14]
 800c9f6:	2b03      	cmp	r3, #3
 800c9f8:	f040 8094 	bne.w	800cb24 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800ca02:	3301      	adds	r3, #1
 800ca04:	b2da      	uxtb	r2, r3
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800ca12:	2b03      	cmp	r3, #3
 800ca14:	d903      	bls.n	800ca1e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	220d      	movs	r2, #13
 800ca1a:	701a      	strb	r2, [r3, #0]
      break;
 800ca1c:	e082      	b.n	800cb24 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	795b      	ldrb	r3, [r3, #5]
 800ca22:	4619      	mov	r1, r3
 800ca24:	6878      	ldr	r0, [r7, #4]
 800ca26:	f001 f819 	bl	800da5c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	791b      	ldrb	r3, [r3, #4]
 800ca2e:	4619      	mov	r1, r3
 800ca30:	6878      	ldr	r0, [r7, #4]
 800ca32:	f001 f813 	bl	800da5c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2200      	movs	r2, #0
 800ca3a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2200      	movs	r2, #0
 800ca40:	701a      	strb	r2, [r3, #0]
      break;
 800ca42:	e06f      	b.n	800cb24 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d019      	beq.n	800ca82 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ca5a:	23ff      	movs	r3, #255	@ 0xff
 800ca5c:	6878      	ldr	r0, [r7, #4]
 800ca5e:	f000 f953 	bl	800cd08 <USBH_Get_StringDesc>
 800ca62:	4603      	mov	r3, r0
 800ca64:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ca66:	7bbb      	ldrb	r3, [r7, #14]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d103      	bne.n	800ca74 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2206      	movs	r2, #6
 800ca70:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ca72:	e059      	b.n	800cb28 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ca74:	7bbb      	ldrb	r3, [r7, #14]
 800ca76:	2b03      	cmp	r3, #3
 800ca78:	d156      	bne.n	800cb28 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	2206      	movs	r2, #6
 800ca7e:	705a      	strb	r2, [r3, #1]
      break;
 800ca80:	e052      	b.n	800cb28 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	2206      	movs	r2, #6
 800ca86:	705a      	strb	r2, [r3, #1]
      break;
 800ca88:	e04e      	b.n	800cb28 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d019      	beq.n	800cac8 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800caa0:	23ff      	movs	r3, #255	@ 0xff
 800caa2:	6878      	ldr	r0, [r7, #4]
 800caa4:	f000 f930 	bl	800cd08 <USBH_Get_StringDesc>
 800caa8:	4603      	mov	r3, r0
 800caaa:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800caac:	7bbb      	ldrb	r3, [r7, #14]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d103      	bne.n	800caba <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	2207      	movs	r2, #7
 800cab6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800cab8:	e038      	b.n	800cb2c <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800caba:	7bbb      	ldrb	r3, [r7, #14]
 800cabc:	2b03      	cmp	r3, #3
 800cabe:	d135      	bne.n	800cb2c <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	2207      	movs	r2, #7
 800cac4:	705a      	strb	r2, [r3, #1]
      break;
 800cac6:	e031      	b.n	800cb2c <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2207      	movs	r2, #7
 800cacc:	705a      	strb	r2, [r3, #1]
      break;
 800cace:	e02d      	b.n	800cb2c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d017      	beq.n	800cb0a <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800cae6:	23ff      	movs	r3, #255	@ 0xff
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	f000 f90d 	bl	800cd08 <USBH_Get_StringDesc>
 800caee:	4603      	mov	r3, r0
 800caf0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800caf2:	7bbb      	ldrb	r3, [r7, #14]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d102      	bne.n	800cafe <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800caf8:	2300      	movs	r3, #0
 800cafa:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800cafc:	e018      	b.n	800cb30 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cafe:	7bbb      	ldrb	r3, [r7, #14]
 800cb00:	2b03      	cmp	r3, #3
 800cb02:	d115      	bne.n	800cb30 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800cb04:	2300      	movs	r3, #0
 800cb06:	73fb      	strb	r3, [r7, #15]
      break;
 800cb08:	e012      	b.n	800cb30 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	73fb      	strb	r3, [r7, #15]
      break;
 800cb0e:	e00f      	b.n	800cb30 <USBH_HandleEnum+0x3b4>

    default:
      break;
 800cb10:	bf00      	nop
 800cb12:	e00e      	b.n	800cb32 <USBH_HandleEnum+0x3b6>
      break;
 800cb14:	bf00      	nop
 800cb16:	e00c      	b.n	800cb32 <USBH_HandleEnum+0x3b6>
      break;
 800cb18:	bf00      	nop
 800cb1a:	e00a      	b.n	800cb32 <USBH_HandleEnum+0x3b6>
      break;
 800cb1c:	bf00      	nop
 800cb1e:	e008      	b.n	800cb32 <USBH_HandleEnum+0x3b6>
      break;
 800cb20:	bf00      	nop
 800cb22:	e006      	b.n	800cb32 <USBH_HandleEnum+0x3b6>
      break;
 800cb24:	bf00      	nop
 800cb26:	e004      	b.n	800cb32 <USBH_HandleEnum+0x3b6>
      break;
 800cb28:	bf00      	nop
 800cb2a:	e002      	b.n	800cb32 <USBH_HandleEnum+0x3b6>
      break;
 800cb2c:	bf00      	nop
 800cb2e:	e000      	b.n	800cb32 <USBH_HandleEnum+0x3b6>
      break;
 800cb30:	bf00      	nop
  }
  return Status;
 800cb32:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb34:	4618      	mov	r0, r3
 800cb36:	3710      	adds	r7, #16
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}

0800cb3c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800cb3c:	b480      	push	{r7}
 800cb3e:	b083      	sub	sp, #12
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
 800cb44:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	683a      	ldr	r2, [r7, #0]
 800cb4a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800cb4e:	bf00      	nop
 800cb50:	370c      	adds	r7, #12
 800cb52:	46bd      	mov	sp, r7
 800cb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb58:	4770      	bx	lr

0800cb5a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800cb5a:	b580      	push	{r7, lr}
 800cb5c:	b082      	sub	sp, #8
 800cb5e:	af00      	add	r7, sp, #0
 800cb60:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800cb68:	1c5a      	adds	r2, r3, #1
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800cb70:	6878      	ldr	r0, [r7, #4]
 800cb72:	f000 f804 	bl	800cb7e <USBH_HandleSof>
}
 800cb76:	bf00      	nop
 800cb78:	3708      	adds	r7, #8
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}

0800cb7e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800cb7e:	b580      	push	{r7, lr}
 800cb80:	b082      	sub	sp, #8
 800cb82:	af00      	add	r7, sp, #0
 800cb84:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	781b      	ldrb	r3, [r3, #0]
 800cb8a:	b2db      	uxtb	r3, r3
 800cb8c:	2b0b      	cmp	r3, #11
 800cb8e:	d10a      	bne.n	800cba6 <USBH_HandleSof+0x28>
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d005      	beq.n	800cba6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cba0:	699b      	ldr	r3, [r3, #24]
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	4798      	blx	r3
  }
}
 800cba6:	bf00      	nop
 800cba8:	3708      	adds	r7, #8
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bd80      	pop	{r7, pc}

0800cbae <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800cbae:	b480      	push	{r7}
 800cbb0:	b083      	sub	sp, #12
 800cbb2:	af00      	add	r7, sp, #0
 800cbb4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	2201      	movs	r2, #1
 800cbba:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800cbbe:	bf00      	nop
}
 800cbc0:	370c      	adds	r7, #12
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc8:	4770      	bx	lr

0800cbca <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800cbca:	b480      	push	{r7}
 800cbcc:	b083      	sub	sp, #12
 800cbce:	af00      	add	r7, sp, #0
 800cbd0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800cbda:	bf00      	nop
}
 800cbdc:	370c      	adds	r7, #12
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe4:	4770      	bx	lr

0800cbe6 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800cbe6:	b480      	push	{r7}
 800cbe8:	b083      	sub	sp, #12
 800cbea:	af00      	add	r7, sp, #0
 800cbec:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2201      	movs	r2, #1
 800cbf2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	2200      	movs	r2, #0
 800cc02:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800cc06:	2300      	movs	r3, #0
}
 800cc08:	4618      	mov	r0, r3
 800cc0a:	370c      	adds	r7, #12
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc12:	4770      	bx	lr

0800cc14 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b082      	sub	sp, #8
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2201      	movs	r2, #1
 800cc20:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2200      	movs	r2, #0
 800cc28:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2200      	movs	r2, #0
 800cc30:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f001 fe42 	bl	800e8be <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	791b      	ldrb	r3, [r3, #4]
 800cc3e:	4619      	mov	r1, r3
 800cc40:	6878      	ldr	r0, [r7, #4]
 800cc42:	f000 ff0b 	bl	800da5c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	795b      	ldrb	r3, [r3, #5]
 800cc4a:	4619      	mov	r1, r3
 800cc4c:	6878      	ldr	r0, [r7, #4]
 800cc4e:	f000 ff05 	bl	800da5c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800cc52:	2300      	movs	r3, #0
}
 800cc54:	4618      	mov	r0, r3
 800cc56:	3708      	adds	r7, #8
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	bd80      	pop	{r7, pc}

0800cc5c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b086      	sub	sp, #24
 800cc60:	af02      	add	r7, sp, #8
 800cc62:	6078      	str	r0, [r7, #4]
 800cc64:	460b      	mov	r3, r1
 800cc66:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800cc68:	887b      	ldrh	r3, [r7, #2]
 800cc6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cc6e:	d901      	bls.n	800cc74 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800cc70:	2303      	movs	r3, #3
 800cc72:	e01b      	b.n	800ccac <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800cc7a:	887b      	ldrh	r3, [r7, #2]
 800cc7c:	9300      	str	r3, [sp, #0]
 800cc7e:	4613      	mov	r3, r2
 800cc80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cc84:	2100      	movs	r1, #0
 800cc86:	6878      	ldr	r0, [r7, #4]
 800cc88:	f000 f872 	bl	800cd70 <USBH_GetDescriptor>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800cc90:	7bfb      	ldrb	r3, [r7, #15]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d109      	bne.n	800ccaa <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800cc9c:	887a      	ldrh	r2, [r7, #2]
 800cc9e:	4619      	mov	r1, r3
 800cca0:	6878      	ldr	r0, [r7, #4]
 800cca2:	f000 f929 	bl	800cef8 <USBH_ParseDevDesc>
 800cca6:	4603      	mov	r3, r0
 800cca8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ccaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccac:	4618      	mov	r0, r3
 800ccae:	3710      	adds	r7, #16
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	bd80      	pop	{r7, pc}

0800ccb4 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b086      	sub	sp, #24
 800ccb8:	af02      	add	r7, sp, #8
 800ccba:	6078      	str	r0, [r7, #4]
 800ccbc:	460b      	mov	r3, r1
 800ccbe:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	331c      	adds	r3, #28
 800ccc4:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800ccc6:	887b      	ldrh	r3, [r7, #2]
 800ccc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cccc:	d901      	bls.n	800ccd2 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800ccce:	2303      	movs	r3, #3
 800ccd0:	e016      	b.n	800cd00 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800ccd2:	887b      	ldrh	r3, [r7, #2]
 800ccd4:	9300      	str	r3, [sp, #0]
 800ccd6:	68bb      	ldr	r3, [r7, #8]
 800ccd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ccdc:	2100      	movs	r1, #0
 800ccde:	6878      	ldr	r0, [r7, #4]
 800cce0:	f000 f846 	bl	800cd70 <USBH_GetDescriptor>
 800cce4:	4603      	mov	r3, r0
 800cce6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800cce8:	7bfb      	ldrb	r3, [r7, #15]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d107      	bne.n	800ccfe <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800ccee:	887b      	ldrh	r3, [r7, #2]
 800ccf0:	461a      	mov	r2, r3
 800ccf2:	68b9      	ldr	r1, [r7, #8]
 800ccf4:	6878      	ldr	r0, [r7, #4]
 800ccf6:	f000 f9af 	bl	800d058 <USBH_ParseCfgDesc>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ccfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd00:	4618      	mov	r0, r3
 800cd02:	3710      	adds	r7, #16
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bd80      	pop	{r7, pc}

0800cd08 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b088      	sub	sp, #32
 800cd0c:	af02      	add	r7, sp, #8
 800cd0e:	60f8      	str	r0, [r7, #12]
 800cd10:	607a      	str	r2, [r7, #4]
 800cd12:	461a      	mov	r2, r3
 800cd14:	460b      	mov	r3, r1
 800cd16:	72fb      	strb	r3, [r7, #11]
 800cd18:	4613      	mov	r3, r2
 800cd1a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800cd1c:	893b      	ldrh	r3, [r7, #8]
 800cd1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cd22:	d802      	bhi.n	800cd2a <USBH_Get_StringDesc+0x22>
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d101      	bne.n	800cd2e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800cd2a:	2303      	movs	r3, #3
 800cd2c:	e01c      	b.n	800cd68 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800cd2e:	7afb      	ldrb	r3, [r7, #11]
 800cd30:	b29b      	uxth	r3, r3
 800cd32:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800cd36:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800cd3e:	893b      	ldrh	r3, [r7, #8]
 800cd40:	9300      	str	r3, [sp, #0]
 800cd42:	460b      	mov	r3, r1
 800cd44:	2100      	movs	r1, #0
 800cd46:	68f8      	ldr	r0, [r7, #12]
 800cd48:	f000 f812 	bl	800cd70 <USBH_GetDescriptor>
 800cd4c:	4603      	mov	r3, r0
 800cd4e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800cd50:	7dfb      	ldrb	r3, [r7, #23]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d107      	bne.n	800cd66 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800cd5c:	893a      	ldrh	r2, [r7, #8]
 800cd5e:	6879      	ldr	r1, [r7, #4]
 800cd60:	4618      	mov	r0, r3
 800cd62:	f000 fb8d 	bl	800d480 <USBH_ParseStringDesc>
  }

  return status;
 800cd66:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd68:	4618      	mov	r0, r3
 800cd6a:	3718      	adds	r7, #24
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}

0800cd70 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b084      	sub	sp, #16
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	60f8      	str	r0, [r7, #12]
 800cd78:	607b      	str	r3, [r7, #4]
 800cd7a:	460b      	mov	r3, r1
 800cd7c:	72fb      	strb	r3, [r7, #11]
 800cd7e:	4613      	mov	r3, r2
 800cd80:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	789b      	ldrb	r3, [r3, #2]
 800cd86:	2b01      	cmp	r3, #1
 800cd88:	d11c      	bne.n	800cdc4 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800cd8a:	7afb      	ldrb	r3, [r7, #11]
 800cd8c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800cd90:	b2da      	uxtb	r2, r3
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	2206      	movs	r2, #6
 800cd9a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	893a      	ldrh	r2, [r7, #8]
 800cda0:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800cda2:	893b      	ldrh	r3, [r7, #8]
 800cda4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800cda8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cdac:	d104      	bne.n	800cdb8 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	f240 4209 	movw	r2, #1033	@ 0x409
 800cdb4:	829a      	strh	r2, [r3, #20]
 800cdb6:	e002      	b.n	800cdbe <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	2200      	movs	r2, #0
 800cdbc:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	8b3a      	ldrh	r2, [r7, #24]
 800cdc2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800cdc4:	8b3b      	ldrh	r3, [r7, #24]
 800cdc6:	461a      	mov	r2, r3
 800cdc8:	6879      	ldr	r1, [r7, #4]
 800cdca:	68f8      	ldr	r0, [r7, #12]
 800cdcc:	f000 fba5 	bl	800d51a <USBH_CtlReq>
 800cdd0:	4603      	mov	r3, r0
}
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	3710      	adds	r7, #16
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bd80      	pop	{r7, pc}

0800cdda <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800cdda:	b580      	push	{r7, lr}
 800cddc:	b082      	sub	sp, #8
 800cdde:	af00      	add	r7, sp, #0
 800cde0:	6078      	str	r0, [r7, #4]
 800cde2:	460b      	mov	r3, r1
 800cde4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	789b      	ldrb	r3, [r3, #2]
 800cdea:	2b01      	cmp	r3, #1
 800cdec:	d10f      	bne.n	800ce0e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	2205      	movs	r2, #5
 800cdf8:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800cdfa:	78fb      	ldrb	r3, [r7, #3]
 800cdfc:	b29a      	uxth	r2, r3
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	2200      	movs	r2, #0
 800ce06:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ce0e:	2200      	movs	r2, #0
 800ce10:	2100      	movs	r1, #0
 800ce12:	6878      	ldr	r0, [r7, #4]
 800ce14:	f000 fb81 	bl	800d51a <USBH_CtlReq>
 800ce18:	4603      	mov	r3, r0
}
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	3708      	adds	r7, #8
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	bd80      	pop	{r7, pc}

0800ce22 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800ce22:	b580      	push	{r7, lr}
 800ce24:	b082      	sub	sp, #8
 800ce26:	af00      	add	r7, sp, #0
 800ce28:	6078      	str	r0, [r7, #4]
 800ce2a:	460b      	mov	r3, r1
 800ce2c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	789b      	ldrb	r3, [r3, #2]
 800ce32:	2b01      	cmp	r3, #1
 800ce34:	d10e      	bne.n	800ce54 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2200      	movs	r2, #0
 800ce3a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2209      	movs	r2, #9
 800ce40:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	887a      	ldrh	r2, [r7, #2]
 800ce46:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	2200      	movs	r2, #0
 800ce52:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ce54:	2200      	movs	r2, #0
 800ce56:	2100      	movs	r1, #0
 800ce58:	6878      	ldr	r0, [r7, #4]
 800ce5a:	f000 fb5e 	bl	800d51a <USBH_CtlReq>
 800ce5e:	4603      	mov	r3, r0
}
 800ce60:	4618      	mov	r0, r3
 800ce62:	3708      	adds	r7, #8
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd80      	pop	{r7, pc}

0800ce68 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b082      	sub	sp, #8
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
 800ce70:	460b      	mov	r3, r1
 800ce72:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	789b      	ldrb	r3, [r3, #2]
 800ce78:	2b01      	cmp	r3, #1
 800ce7a:	d10f      	bne.n	800ce9c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	2200      	movs	r2, #0
 800ce80:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	2203      	movs	r2, #3
 800ce86:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800ce88:	78fb      	ldrb	r3, [r7, #3]
 800ce8a:	b29a      	uxth	r2, r3
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	2200      	movs	r2, #0
 800ce94:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2200      	movs	r2, #0
 800ce9a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	2100      	movs	r1, #0
 800cea0:	6878      	ldr	r0, [r7, #4]
 800cea2:	f000 fb3a 	bl	800d51a <USBH_CtlReq>
 800cea6:	4603      	mov	r3, r0
}
 800cea8:	4618      	mov	r0, r3
 800ceaa:	3708      	adds	r7, #8
 800ceac:	46bd      	mov	sp, r7
 800ceae:	bd80      	pop	{r7, pc}

0800ceb0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b082      	sub	sp, #8
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
 800ceb8:	460b      	mov	r3, r1
 800ceba:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	789b      	ldrb	r3, [r3, #2]
 800cec0:	2b01      	cmp	r3, #1
 800cec2:	d10f      	bne.n	800cee4 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2202      	movs	r2, #2
 800cec8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2201      	movs	r2, #1
 800cece:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2200      	movs	r2, #0
 800ced4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800ced6:	78fb      	ldrb	r3, [r7, #3]
 800ced8:	b29a      	uxth	r2, r3
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	2200      	movs	r2, #0
 800cee2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800cee4:	2200      	movs	r2, #0
 800cee6:	2100      	movs	r1, #0
 800cee8:	6878      	ldr	r0, [r7, #4]
 800ceea:	f000 fb16 	bl	800d51a <USBH_CtlReq>
 800ceee:	4603      	mov	r3, r0
}
 800cef0:	4618      	mov	r0, r3
 800cef2:	3708      	adds	r7, #8
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bd80      	pop	{r7, pc}

0800cef8 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800cef8:	b480      	push	{r7}
 800cefa:	b087      	sub	sp, #28
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	60f8      	str	r0, [r7, #12]
 800cf00:	60b9      	str	r1, [r7, #8]
 800cf02:	4613      	mov	r3, r2
 800cf04:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800cf0c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800cf0e:	2300      	movs	r3, #0
 800cf10:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800cf12:	68bb      	ldr	r3, [r7, #8]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d101      	bne.n	800cf1c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800cf18:	2302      	movs	r3, #2
 800cf1a:	e094      	b.n	800d046 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800cf1c:	68bb      	ldr	r3, [r7, #8]
 800cf1e:	781a      	ldrb	r2, [r3, #0]
 800cf20:	693b      	ldr	r3, [r7, #16]
 800cf22:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800cf24:	68bb      	ldr	r3, [r7, #8]
 800cf26:	785a      	ldrb	r2, [r3, #1]
 800cf28:	693b      	ldr	r3, [r7, #16]
 800cf2a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800cf2c:	68bb      	ldr	r3, [r7, #8]
 800cf2e:	3302      	adds	r3, #2
 800cf30:	781b      	ldrb	r3, [r3, #0]
 800cf32:	461a      	mov	r2, r3
 800cf34:	68bb      	ldr	r3, [r7, #8]
 800cf36:	3303      	adds	r3, #3
 800cf38:	781b      	ldrb	r3, [r3, #0]
 800cf3a:	021b      	lsls	r3, r3, #8
 800cf3c:	b29b      	uxth	r3, r3
 800cf3e:	4313      	orrs	r3, r2
 800cf40:	b29a      	uxth	r2, r3
 800cf42:	693b      	ldr	r3, [r7, #16]
 800cf44:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800cf46:	68bb      	ldr	r3, [r7, #8]
 800cf48:	791a      	ldrb	r2, [r3, #4]
 800cf4a:	693b      	ldr	r3, [r7, #16]
 800cf4c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800cf4e:	68bb      	ldr	r3, [r7, #8]
 800cf50:	795a      	ldrb	r2, [r3, #5]
 800cf52:	693b      	ldr	r3, [r7, #16]
 800cf54:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800cf56:	68bb      	ldr	r3, [r7, #8]
 800cf58:	799a      	ldrb	r2, [r3, #6]
 800cf5a:	693b      	ldr	r3, [r7, #16]
 800cf5c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800cf5e:	68bb      	ldr	r3, [r7, #8]
 800cf60:	79da      	ldrb	r2, [r3, #7]
 800cf62:	693b      	ldr	r3, [r7, #16]
 800cf64:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d004      	beq.n	800cf7a <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800cf76:	2b01      	cmp	r3, #1
 800cf78:	d11b      	bne.n	800cfb2 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800cf7a:	693b      	ldr	r3, [r7, #16]
 800cf7c:	79db      	ldrb	r3, [r3, #7]
 800cf7e:	2b20      	cmp	r3, #32
 800cf80:	dc0f      	bgt.n	800cfa2 <USBH_ParseDevDesc+0xaa>
 800cf82:	2b08      	cmp	r3, #8
 800cf84:	db0f      	blt.n	800cfa6 <USBH_ParseDevDesc+0xae>
 800cf86:	3b08      	subs	r3, #8
 800cf88:	4a32      	ldr	r2, [pc, #200]	@ (800d054 <USBH_ParseDevDesc+0x15c>)
 800cf8a:	fa22 f303 	lsr.w	r3, r2, r3
 800cf8e:	f003 0301 	and.w	r3, r3, #1
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	bf14      	ite	ne
 800cf96:	2301      	movne	r3, #1
 800cf98:	2300      	moveq	r3, #0
 800cf9a:	b2db      	uxtb	r3, r3
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d106      	bne.n	800cfae <USBH_ParseDevDesc+0xb6>
 800cfa0:	e001      	b.n	800cfa6 <USBH_ParseDevDesc+0xae>
 800cfa2:	2b40      	cmp	r3, #64	@ 0x40
 800cfa4:	d003      	beq.n	800cfae <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800cfa6:	693b      	ldr	r3, [r7, #16]
 800cfa8:	2208      	movs	r2, #8
 800cfaa:	71da      	strb	r2, [r3, #7]
        break;
 800cfac:	e000      	b.n	800cfb0 <USBH_ParseDevDesc+0xb8>
        break;
 800cfae:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800cfb0:	e00e      	b.n	800cfd0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800cfb8:	2b02      	cmp	r3, #2
 800cfba:	d107      	bne.n	800cfcc <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800cfbc:	693b      	ldr	r3, [r7, #16]
 800cfbe:	79db      	ldrb	r3, [r3, #7]
 800cfc0:	2b08      	cmp	r3, #8
 800cfc2:	d005      	beq.n	800cfd0 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800cfc4:	693b      	ldr	r3, [r7, #16]
 800cfc6:	2208      	movs	r2, #8
 800cfc8:	71da      	strb	r2, [r3, #7]
 800cfca:	e001      	b.n	800cfd0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800cfcc:	2303      	movs	r3, #3
 800cfce:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800cfd0:	88fb      	ldrh	r3, [r7, #6]
 800cfd2:	2b08      	cmp	r3, #8
 800cfd4:	d936      	bls.n	800d044 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800cfd6:	68bb      	ldr	r3, [r7, #8]
 800cfd8:	3308      	adds	r3, #8
 800cfda:	781b      	ldrb	r3, [r3, #0]
 800cfdc:	461a      	mov	r2, r3
 800cfde:	68bb      	ldr	r3, [r7, #8]
 800cfe0:	3309      	adds	r3, #9
 800cfe2:	781b      	ldrb	r3, [r3, #0]
 800cfe4:	021b      	lsls	r3, r3, #8
 800cfe6:	b29b      	uxth	r3, r3
 800cfe8:	4313      	orrs	r3, r2
 800cfea:	b29a      	uxth	r2, r3
 800cfec:	693b      	ldr	r3, [r7, #16]
 800cfee:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800cff0:	68bb      	ldr	r3, [r7, #8]
 800cff2:	330a      	adds	r3, #10
 800cff4:	781b      	ldrb	r3, [r3, #0]
 800cff6:	461a      	mov	r2, r3
 800cff8:	68bb      	ldr	r3, [r7, #8]
 800cffa:	330b      	adds	r3, #11
 800cffc:	781b      	ldrb	r3, [r3, #0]
 800cffe:	021b      	lsls	r3, r3, #8
 800d000:	b29b      	uxth	r3, r3
 800d002:	4313      	orrs	r3, r2
 800d004:	b29a      	uxth	r2, r3
 800d006:	693b      	ldr	r3, [r7, #16]
 800d008:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800d00a:	68bb      	ldr	r3, [r7, #8]
 800d00c:	330c      	adds	r3, #12
 800d00e:	781b      	ldrb	r3, [r3, #0]
 800d010:	461a      	mov	r2, r3
 800d012:	68bb      	ldr	r3, [r7, #8]
 800d014:	330d      	adds	r3, #13
 800d016:	781b      	ldrb	r3, [r3, #0]
 800d018:	021b      	lsls	r3, r3, #8
 800d01a:	b29b      	uxth	r3, r3
 800d01c:	4313      	orrs	r3, r2
 800d01e:	b29a      	uxth	r2, r3
 800d020:	693b      	ldr	r3, [r7, #16]
 800d022:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800d024:	68bb      	ldr	r3, [r7, #8]
 800d026:	7b9a      	ldrb	r2, [r3, #14]
 800d028:	693b      	ldr	r3, [r7, #16]
 800d02a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800d02c:	68bb      	ldr	r3, [r7, #8]
 800d02e:	7bda      	ldrb	r2, [r3, #15]
 800d030:	693b      	ldr	r3, [r7, #16]
 800d032:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800d034:	68bb      	ldr	r3, [r7, #8]
 800d036:	7c1a      	ldrb	r2, [r3, #16]
 800d038:	693b      	ldr	r3, [r7, #16]
 800d03a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	7c5a      	ldrb	r2, [r3, #17]
 800d040:	693b      	ldr	r3, [r7, #16]
 800d042:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800d044:	7dfb      	ldrb	r3, [r7, #23]
}
 800d046:	4618      	mov	r0, r3
 800d048:	371c      	adds	r7, #28
 800d04a:	46bd      	mov	sp, r7
 800d04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d050:	4770      	bx	lr
 800d052:	bf00      	nop
 800d054:	01000101 	.word	0x01000101

0800d058 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b08c      	sub	sp, #48	@ 0x30
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	60f8      	str	r0, [r7, #12]
 800d060:	60b9      	str	r1, [r7, #8]
 800d062:	4613      	mov	r3, r2
 800d064:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800d06c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800d06e:	2300      	movs	r3, #0
 800d070:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800d074:	2300      	movs	r3, #0
 800d076:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800d07a:	2300      	movs	r3, #0
 800d07c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800d080:	68bb      	ldr	r3, [r7, #8]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d101      	bne.n	800d08a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800d086:	2302      	movs	r3, #2
 800d088:	e0da      	b.n	800d240 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800d08a:	68bb      	ldr	r3, [r7, #8]
 800d08c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800d08e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d090:	781b      	ldrb	r3, [r3, #0]
 800d092:	2b09      	cmp	r3, #9
 800d094:	d002      	beq.n	800d09c <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800d096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d098:	2209      	movs	r2, #9
 800d09a:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800d09c:	68bb      	ldr	r3, [r7, #8]
 800d09e:	781a      	ldrb	r2, [r3, #0]
 800d0a0:	6a3b      	ldr	r3, [r7, #32]
 800d0a2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800d0a4:	68bb      	ldr	r3, [r7, #8]
 800d0a6:	785a      	ldrb	r2, [r3, #1]
 800d0a8:	6a3b      	ldr	r3, [r7, #32]
 800d0aa:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800d0ac:	68bb      	ldr	r3, [r7, #8]
 800d0ae:	3302      	adds	r3, #2
 800d0b0:	781b      	ldrb	r3, [r3, #0]
 800d0b2:	461a      	mov	r2, r3
 800d0b4:	68bb      	ldr	r3, [r7, #8]
 800d0b6:	3303      	adds	r3, #3
 800d0b8:	781b      	ldrb	r3, [r3, #0]
 800d0ba:	021b      	lsls	r3, r3, #8
 800d0bc:	b29b      	uxth	r3, r3
 800d0be:	4313      	orrs	r3, r2
 800d0c0:	b29b      	uxth	r3, r3
 800d0c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d0c6:	bf28      	it	cs
 800d0c8:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800d0cc:	b29a      	uxth	r2, r3
 800d0ce:	6a3b      	ldr	r3, [r7, #32]
 800d0d0:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800d0d2:	68bb      	ldr	r3, [r7, #8]
 800d0d4:	791a      	ldrb	r2, [r3, #4]
 800d0d6:	6a3b      	ldr	r3, [r7, #32]
 800d0d8:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800d0da:	68bb      	ldr	r3, [r7, #8]
 800d0dc:	795a      	ldrb	r2, [r3, #5]
 800d0de:	6a3b      	ldr	r3, [r7, #32]
 800d0e0:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800d0e2:	68bb      	ldr	r3, [r7, #8]
 800d0e4:	799a      	ldrb	r2, [r3, #6]
 800d0e6:	6a3b      	ldr	r3, [r7, #32]
 800d0e8:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800d0ea:	68bb      	ldr	r3, [r7, #8]
 800d0ec:	79da      	ldrb	r2, [r3, #7]
 800d0ee:	6a3b      	ldr	r3, [r7, #32]
 800d0f0:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800d0f2:	68bb      	ldr	r3, [r7, #8]
 800d0f4:	7a1a      	ldrb	r2, [r3, #8]
 800d0f6:	6a3b      	ldr	r3, [r7, #32]
 800d0f8:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800d0fa:	88fb      	ldrh	r3, [r7, #6]
 800d0fc:	2b09      	cmp	r3, #9
 800d0fe:	f240 809d 	bls.w	800d23c <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800d102:	2309      	movs	r3, #9
 800d104:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800d106:	2300      	movs	r3, #0
 800d108:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d10a:	e081      	b.n	800d210 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d10c:	f107 0316 	add.w	r3, r7, #22
 800d110:	4619      	mov	r1, r3
 800d112:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d114:	f000 f9e7 	bl	800d4e6 <USBH_GetNextDesc>
 800d118:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800d11a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d11c:	785b      	ldrb	r3, [r3, #1]
 800d11e:	2b04      	cmp	r3, #4
 800d120:	d176      	bne.n	800d210 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800d122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d124:	781b      	ldrb	r3, [r3, #0]
 800d126:	2b09      	cmp	r3, #9
 800d128:	d002      	beq.n	800d130 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800d12a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d12c:	2209      	movs	r2, #9
 800d12e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800d130:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d134:	221a      	movs	r2, #26
 800d136:	fb02 f303 	mul.w	r3, r2, r3
 800d13a:	3308      	adds	r3, #8
 800d13c:	6a3a      	ldr	r2, [r7, #32]
 800d13e:	4413      	add	r3, r2
 800d140:	3302      	adds	r3, #2
 800d142:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800d144:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d146:	69f8      	ldr	r0, [r7, #28]
 800d148:	f000 f87e 	bl	800d248 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800d14c:	2300      	movs	r3, #0
 800d14e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800d152:	2300      	movs	r3, #0
 800d154:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d156:	e043      	b.n	800d1e0 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d158:	f107 0316 	add.w	r3, r7, #22
 800d15c:	4619      	mov	r1, r3
 800d15e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d160:	f000 f9c1 	bl	800d4e6 <USBH_GetNextDesc>
 800d164:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d168:	785b      	ldrb	r3, [r3, #1]
 800d16a:	2b05      	cmp	r3, #5
 800d16c:	d138      	bne.n	800d1e0 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800d16e:	69fb      	ldr	r3, [r7, #28]
 800d170:	795b      	ldrb	r3, [r3, #5]
 800d172:	2b01      	cmp	r3, #1
 800d174:	d113      	bne.n	800d19e <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800d176:	69fb      	ldr	r3, [r7, #28]
 800d178:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800d17a:	2b02      	cmp	r3, #2
 800d17c:	d003      	beq.n	800d186 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800d17e:	69fb      	ldr	r3, [r7, #28]
 800d180:	799b      	ldrb	r3, [r3, #6]
 800d182:	2b03      	cmp	r3, #3
 800d184:	d10b      	bne.n	800d19e <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d186:	69fb      	ldr	r3, [r7, #28]
 800d188:	79db      	ldrb	r3, [r3, #7]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d10b      	bne.n	800d1a6 <USBH_ParseCfgDesc+0x14e>
 800d18e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d190:	781b      	ldrb	r3, [r3, #0]
 800d192:	2b09      	cmp	r3, #9
 800d194:	d007      	beq.n	800d1a6 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800d196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d198:	2209      	movs	r2, #9
 800d19a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d19c:	e003      	b.n	800d1a6 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800d19e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1a0:	2207      	movs	r2, #7
 800d1a2:	701a      	strb	r2, [r3, #0]
 800d1a4:	e000      	b.n	800d1a8 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d1a6:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800d1a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d1ac:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800d1b0:	3201      	adds	r2, #1
 800d1b2:	00d2      	lsls	r2, r2, #3
 800d1b4:	211a      	movs	r1, #26
 800d1b6:	fb01 f303 	mul.w	r3, r1, r3
 800d1ba:	4413      	add	r3, r2
 800d1bc:	3308      	adds	r3, #8
 800d1be:	6a3a      	ldr	r2, [r7, #32]
 800d1c0:	4413      	add	r3, r2
 800d1c2:	3304      	adds	r3, #4
 800d1c4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800d1c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d1c8:	69b9      	ldr	r1, [r7, #24]
 800d1ca:	68f8      	ldr	r0, [r7, #12]
 800d1cc:	f000 f870 	bl	800d2b0 <USBH_ParseEPDesc>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800d1d6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d1da:	3301      	adds	r3, #1
 800d1dc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d1e0:	69fb      	ldr	r3, [r7, #28]
 800d1e2:	791b      	ldrb	r3, [r3, #4]
 800d1e4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800d1e8:	429a      	cmp	r2, r3
 800d1ea:	d204      	bcs.n	800d1f6 <USBH_ParseCfgDesc+0x19e>
 800d1ec:	6a3b      	ldr	r3, [r7, #32]
 800d1ee:	885a      	ldrh	r2, [r3, #2]
 800d1f0:	8afb      	ldrh	r3, [r7, #22]
 800d1f2:	429a      	cmp	r2, r3
 800d1f4:	d8b0      	bhi.n	800d158 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800d1f6:	69fb      	ldr	r3, [r7, #28]
 800d1f8:	791b      	ldrb	r3, [r3, #4]
 800d1fa:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800d1fe:	429a      	cmp	r2, r3
 800d200:	d201      	bcs.n	800d206 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800d202:	2303      	movs	r3, #3
 800d204:	e01c      	b.n	800d240 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800d206:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d20a:	3301      	adds	r3, #1
 800d20c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d210:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d214:	2b01      	cmp	r3, #1
 800d216:	d805      	bhi.n	800d224 <USBH_ParseCfgDesc+0x1cc>
 800d218:	6a3b      	ldr	r3, [r7, #32]
 800d21a:	885a      	ldrh	r2, [r3, #2]
 800d21c:	8afb      	ldrh	r3, [r7, #22]
 800d21e:	429a      	cmp	r2, r3
 800d220:	f63f af74 	bhi.w	800d10c <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800d224:	6a3b      	ldr	r3, [r7, #32]
 800d226:	791b      	ldrb	r3, [r3, #4]
 800d228:	2b02      	cmp	r3, #2
 800d22a:	bf28      	it	cs
 800d22c:	2302      	movcs	r3, #2
 800d22e:	b2db      	uxtb	r3, r3
 800d230:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800d234:	429a      	cmp	r2, r3
 800d236:	d201      	bcs.n	800d23c <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800d238:	2303      	movs	r3, #3
 800d23a:	e001      	b.n	800d240 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800d23c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800d240:	4618      	mov	r0, r3
 800d242:	3730      	adds	r7, #48	@ 0x30
 800d244:	46bd      	mov	sp, r7
 800d246:	bd80      	pop	{r7, pc}

0800d248 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800d248:	b480      	push	{r7}
 800d24a:	b083      	sub	sp, #12
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
 800d250:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800d252:	683b      	ldr	r3, [r7, #0]
 800d254:	781a      	ldrb	r2, [r3, #0]
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	785a      	ldrb	r2, [r3, #1]
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	789a      	ldrb	r2, [r3, #2]
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800d26a:	683b      	ldr	r3, [r7, #0]
 800d26c:	78da      	ldrb	r2, [r3, #3]
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	3304      	adds	r3, #4
 800d276:	781b      	ldrb	r3, [r3, #0]
 800d278:	2b02      	cmp	r3, #2
 800d27a:	bf28      	it	cs
 800d27c:	2302      	movcs	r3, #2
 800d27e:	b2da      	uxtb	r2, r3
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	795a      	ldrb	r2, [r3, #5]
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800d28c:	683b      	ldr	r3, [r7, #0]
 800d28e:	799a      	ldrb	r2, [r3, #6]
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	79da      	ldrb	r2, [r3, #7]
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	7a1a      	ldrb	r2, [r3, #8]
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	721a      	strb	r2, [r3, #8]
}
 800d2a4:	bf00      	nop
 800d2a6:	370c      	adds	r7, #12
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ae:	4770      	bx	lr

0800d2b0 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800d2b0:	b480      	push	{r7}
 800d2b2:	b087      	sub	sp, #28
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	60f8      	str	r0, [r7, #12]
 800d2b8:	60b9      	str	r1, [r7, #8]
 800d2ba:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800d2bc:	2300      	movs	r3, #0
 800d2be:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	781a      	ldrb	r2, [r3, #0]
 800d2c4:	68bb      	ldr	r3, [r7, #8]
 800d2c6:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	785a      	ldrb	r2, [r3, #1]
 800d2cc:	68bb      	ldr	r3, [r7, #8]
 800d2ce:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	789a      	ldrb	r2, [r3, #2]
 800d2d4:	68bb      	ldr	r3, [r7, #8]
 800d2d6:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	78da      	ldrb	r2, [r3, #3]
 800d2dc:	68bb      	ldr	r3, [r7, #8]
 800d2de:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	3304      	adds	r3, #4
 800d2e4:	781b      	ldrb	r3, [r3, #0]
 800d2e6:	461a      	mov	r2, r3
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	3305      	adds	r3, #5
 800d2ec:	781b      	ldrb	r3, [r3, #0]
 800d2ee:	021b      	lsls	r3, r3, #8
 800d2f0:	b29b      	uxth	r3, r3
 800d2f2:	4313      	orrs	r3, r2
 800d2f4:	b29a      	uxth	r2, r3
 800d2f6:	68bb      	ldr	r3, [r7, #8]
 800d2f8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	799a      	ldrb	r2, [r3, #6]
 800d2fe:	68bb      	ldr	r3, [r7, #8]
 800d300:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800d302:	68bb      	ldr	r3, [r7, #8]
 800d304:	889b      	ldrh	r3, [r3, #4]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d009      	beq.n	800d31e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800d30e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d312:	d804      	bhi.n	800d31e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800d314:	68bb      	ldr	r3, [r7, #8]
 800d316:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800d318:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d31c:	d901      	bls.n	800d322 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800d31e:	2303      	movs	r3, #3
 800d320:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d136      	bne.n	800d39a <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800d32c:	68bb      	ldr	r3, [r7, #8]
 800d32e:	78db      	ldrb	r3, [r3, #3]
 800d330:	f003 0303 	and.w	r3, r3, #3
 800d334:	2b02      	cmp	r3, #2
 800d336:	d108      	bne.n	800d34a <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800d338:	68bb      	ldr	r3, [r7, #8]
 800d33a:	889b      	ldrh	r3, [r3, #4]
 800d33c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d340:	f240 8097 	bls.w	800d472 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d344:	2303      	movs	r3, #3
 800d346:	75fb      	strb	r3, [r7, #23]
 800d348:	e093      	b.n	800d472 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800d34a:	68bb      	ldr	r3, [r7, #8]
 800d34c:	78db      	ldrb	r3, [r3, #3]
 800d34e:	f003 0303 	and.w	r3, r3, #3
 800d352:	2b00      	cmp	r3, #0
 800d354:	d107      	bne.n	800d366 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800d356:	68bb      	ldr	r3, [r7, #8]
 800d358:	889b      	ldrh	r3, [r3, #4]
 800d35a:	2b40      	cmp	r3, #64	@ 0x40
 800d35c:	f240 8089 	bls.w	800d472 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d360:	2303      	movs	r3, #3
 800d362:	75fb      	strb	r3, [r7, #23]
 800d364:	e085      	b.n	800d472 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800d366:	68bb      	ldr	r3, [r7, #8]
 800d368:	78db      	ldrb	r3, [r3, #3]
 800d36a:	f003 0303 	and.w	r3, r3, #3
 800d36e:	2b01      	cmp	r3, #1
 800d370:	d005      	beq.n	800d37e <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800d372:	68bb      	ldr	r3, [r7, #8]
 800d374:	78db      	ldrb	r3, [r3, #3]
 800d376:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800d37a:	2b03      	cmp	r3, #3
 800d37c:	d10a      	bne.n	800d394 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d37e:	68bb      	ldr	r3, [r7, #8]
 800d380:	799b      	ldrb	r3, [r3, #6]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d003      	beq.n	800d38e <USBH_ParseEPDesc+0xde>
 800d386:	68bb      	ldr	r3, [r7, #8]
 800d388:	799b      	ldrb	r3, [r3, #6]
 800d38a:	2b10      	cmp	r3, #16
 800d38c:	d970      	bls.n	800d470 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800d38e:	2303      	movs	r3, #3
 800d390:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d392:	e06d      	b.n	800d470 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800d394:	2303      	movs	r3, #3
 800d396:	75fb      	strb	r3, [r7, #23]
 800d398:	e06b      	b.n	800d472 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d3a0:	2b01      	cmp	r3, #1
 800d3a2:	d13c      	bne.n	800d41e <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800d3a4:	68bb      	ldr	r3, [r7, #8]
 800d3a6:	78db      	ldrb	r3, [r3, #3]
 800d3a8:	f003 0303 	and.w	r3, r3, #3
 800d3ac:	2b02      	cmp	r3, #2
 800d3ae:	d005      	beq.n	800d3bc <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800d3b0:	68bb      	ldr	r3, [r7, #8]
 800d3b2:	78db      	ldrb	r3, [r3, #3]
 800d3b4:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d106      	bne.n	800d3ca <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800d3bc:	68bb      	ldr	r3, [r7, #8]
 800d3be:	889b      	ldrh	r3, [r3, #4]
 800d3c0:	2b40      	cmp	r3, #64	@ 0x40
 800d3c2:	d956      	bls.n	800d472 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d3c4:	2303      	movs	r3, #3
 800d3c6:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800d3c8:	e053      	b.n	800d472 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800d3ca:	68bb      	ldr	r3, [r7, #8]
 800d3cc:	78db      	ldrb	r3, [r3, #3]
 800d3ce:	f003 0303 	and.w	r3, r3, #3
 800d3d2:	2b01      	cmp	r3, #1
 800d3d4:	d10e      	bne.n	800d3f4 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800d3d6:	68bb      	ldr	r3, [r7, #8]
 800d3d8:	799b      	ldrb	r3, [r3, #6]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d007      	beq.n	800d3ee <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800d3de:	68bb      	ldr	r3, [r7, #8]
 800d3e0:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800d3e2:	2b10      	cmp	r3, #16
 800d3e4:	d803      	bhi.n	800d3ee <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800d3e6:	68bb      	ldr	r3, [r7, #8]
 800d3e8:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800d3ea:	2b40      	cmp	r3, #64	@ 0x40
 800d3ec:	d941      	bls.n	800d472 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d3ee:	2303      	movs	r3, #3
 800d3f0:	75fb      	strb	r3, [r7, #23]
 800d3f2:	e03e      	b.n	800d472 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800d3f4:	68bb      	ldr	r3, [r7, #8]
 800d3f6:	78db      	ldrb	r3, [r3, #3]
 800d3f8:	f003 0303 	and.w	r3, r3, #3
 800d3fc:	2b03      	cmp	r3, #3
 800d3fe:	d10b      	bne.n	800d418 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800d400:	68bb      	ldr	r3, [r7, #8]
 800d402:	799b      	ldrb	r3, [r3, #6]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d004      	beq.n	800d412 <USBH_ParseEPDesc+0x162>
 800d408:	68bb      	ldr	r3, [r7, #8]
 800d40a:	889b      	ldrh	r3, [r3, #4]
 800d40c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d410:	d32f      	bcc.n	800d472 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d412:	2303      	movs	r3, #3
 800d414:	75fb      	strb	r3, [r7, #23]
 800d416:	e02c      	b.n	800d472 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800d418:	2303      	movs	r3, #3
 800d41a:	75fb      	strb	r3, [r7, #23]
 800d41c:	e029      	b.n	800d472 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d424:	2b02      	cmp	r3, #2
 800d426:	d120      	bne.n	800d46a <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800d428:	68bb      	ldr	r3, [r7, #8]
 800d42a:	78db      	ldrb	r3, [r3, #3]
 800d42c:	f003 0303 	and.w	r3, r3, #3
 800d430:	2b00      	cmp	r3, #0
 800d432:	d106      	bne.n	800d442 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800d434:	68bb      	ldr	r3, [r7, #8]
 800d436:	889b      	ldrh	r3, [r3, #4]
 800d438:	2b08      	cmp	r3, #8
 800d43a:	d01a      	beq.n	800d472 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d43c:	2303      	movs	r3, #3
 800d43e:	75fb      	strb	r3, [r7, #23]
 800d440:	e017      	b.n	800d472 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800d442:	68bb      	ldr	r3, [r7, #8]
 800d444:	78db      	ldrb	r3, [r3, #3]
 800d446:	f003 0303 	and.w	r3, r3, #3
 800d44a:	2b03      	cmp	r3, #3
 800d44c:	d10a      	bne.n	800d464 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800d44e:	68bb      	ldr	r3, [r7, #8]
 800d450:	799b      	ldrb	r3, [r3, #6]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d003      	beq.n	800d45e <USBH_ParseEPDesc+0x1ae>
 800d456:	68bb      	ldr	r3, [r7, #8]
 800d458:	889b      	ldrh	r3, [r3, #4]
 800d45a:	2b08      	cmp	r3, #8
 800d45c:	d909      	bls.n	800d472 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d45e:	2303      	movs	r3, #3
 800d460:	75fb      	strb	r3, [r7, #23]
 800d462:	e006      	b.n	800d472 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800d464:	2303      	movs	r3, #3
 800d466:	75fb      	strb	r3, [r7, #23]
 800d468:	e003      	b.n	800d472 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800d46a:	2303      	movs	r3, #3
 800d46c:	75fb      	strb	r3, [r7, #23]
 800d46e:	e000      	b.n	800d472 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d470:	bf00      	nop
  }

  return status;
 800d472:	7dfb      	ldrb	r3, [r7, #23]
}
 800d474:	4618      	mov	r0, r3
 800d476:	371c      	adds	r7, #28
 800d478:	46bd      	mov	sp, r7
 800d47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47e:	4770      	bx	lr

0800d480 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800d480:	b480      	push	{r7}
 800d482:	b087      	sub	sp, #28
 800d484:	af00      	add	r7, sp, #0
 800d486:	60f8      	str	r0, [r7, #12]
 800d488:	60b9      	str	r1, [r7, #8]
 800d48a:	4613      	mov	r3, r2
 800d48c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	3301      	adds	r3, #1
 800d492:	781b      	ldrb	r3, [r3, #0]
 800d494:	2b03      	cmp	r3, #3
 800d496:	d120      	bne.n	800d4da <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	781b      	ldrb	r3, [r3, #0]
 800d49c:	1e9a      	subs	r2, r3, #2
 800d49e:	88fb      	ldrh	r3, [r7, #6]
 800d4a0:	4293      	cmp	r3, r2
 800d4a2:	bf28      	it	cs
 800d4a4:	4613      	movcs	r3, r2
 800d4a6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	3302      	adds	r3, #2
 800d4ac:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	82fb      	strh	r3, [r7, #22]
 800d4b2:	e00b      	b.n	800d4cc <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800d4b4:	8afb      	ldrh	r3, [r7, #22]
 800d4b6:	68fa      	ldr	r2, [r7, #12]
 800d4b8:	4413      	add	r3, r2
 800d4ba:	781a      	ldrb	r2, [r3, #0]
 800d4bc:	68bb      	ldr	r3, [r7, #8]
 800d4be:	701a      	strb	r2, [r3, #0]
      pdest++;
 800d4c0:	68bb      	ldr	r3, [r7, #8]
 800d4c2:	3301      	adds	r3, #1
 800d4c4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800d4c6:	8afb      	ldrh	r3, [r7, #22]
 800d4c8:	3302      	adds	r3, #2
 800d4ca:	82fb      	strh	r3, [r7, #22]
 800d4cc:	8afa      	ldrh	r2, [r7, #22]
 800d4ce:	8abb      	ldrh	r3, [r7, #20]
 800d4d0:	429a      	cmp	r2, r3
 800d4d2:	d3ef      	bcc.n	800d4b4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	701a      	strb	r2, [r3, #0]
  }
}
 800d4da:	bf00      	nop
 800d4dc:	371c      	adds	r7, #28
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e4:	4770      	bx	lr

0800d4e6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d4e6:	b480      	push	{r7}
 800d4e8:	b085      	sub	sp, #20
 800d4ea:	af00      	add	r7, sp, #0
 800d4ec:	6078      	str	r0, [r7, #4]
 800d4ee:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800d4f0:	683b      	ldr	r3, [r7, #0]
 800d4f2:	881b      	ldrh	r3, [r3, #0]
 800d4f4:	687a      	ldr	r2, [r7, #4]
 800d4f6:	7812      	ldrb	r2, [r2, #0]
 800d4f8:	4413      	add	r3, r2
 800d4fa:	b29a      	uxth	r2, r3
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	781b      	ldrb	r3, [r3, #0]
 800d504:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	4413      	add	r3, r2
 800d50a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d50c:	68fb      	ldr	r3, [r7, #12]
}
 800d50e:	4618      	mov	r0, r3
 800d510:	3714      	adds	r7, #20
 800d512:	46bd      	mov	sp, r7
 800d514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d518:	4770      	bx	lr

0800d51a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800d51a:	b580      	push	{r7, lr}
 800d51c:	b086      	sub	sp, #24
 800d51e:	af00      	add	r7, sp, #0
 800d520:	60f8      	str	r0, [r7, #12]
 800d522:	60b9      	str	r1, [r7, #8]
 800d524:	4613      	mov	r3, r2
 800d526:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800d528:	2301      	movs	r3, #1
 800d52a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	789b      	ldrb	r3, [r3, #2]
 800d530:	2b01      	cmp	r3, #1
 800d532:	d002      	beq.n	800d53a <USBH_CtlReq+0x20>
 800d534:	2b02      	cmp	r3, #2
 800d536:	d00f      	beq.n	800d558 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800d538:	e027      	b.n	800d58a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	68ba      	ldr	r2, [r7, #8]
 800d53e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	88fa      	ldrh	r2, [r7, #6]
 800d544:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	2201      	movs	r2, #1
 800d54a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	2202      	movs	r2, #2
 800d550:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800d552:	2301      	movs	r3, #1
 800d554:	75fb      	strb	r3, [r7, #23]
      break;
 800d556:	e018      	b.n	800d58a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800d558:	68f8      	ldr	r0, [r7, #12]
 800d55a:	f000 f81b 	bl	800d594 <USBH_HandleControl>
 800d55e:	4603      	mov	r3, r0
 800d560:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800d562:	7dfb      	ldrb	r3, [r7, #23]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d002      	beq.n	800d56e <USBH_CtlReq+0x54>
 800d568:	7dfb      	ldrb	r3, [r7, #23]
 800d56a:	2b03      	cmp	r3, #3
 800d56c:	d106      	bne.n	800d57c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	2201      	movs	r2, #1
 800d572:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	2200      	movs	r2, #0
 800d578:	761a      	strb	r2, [r3, #24]
      break;
 800d57a:	e005      	b.n	800d588 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800d57c:	7dfb      	ldrb	r3, [r7, #23]
 800d57e:	2b02      	cmp	r3, #2
 800d580:	d102      	bne.n	800d588 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	2201      	movs	r2, #1
 800d586:	709a      	strb	r2, [r3, #2]
      break;
 800d588:	bf00      	nop
  }
  return status;
 800d58a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d58c:	4618      	mov	r0, r3
 800d58e:	3718      	adds	r7, #24
 800d590:	46bd      	mov	sp, r7
 800d592:	bd80      	pop	{r7, pc}

0800d594 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b086      	sub	sp, #24
 800d598:	af02      	add	r7, sp, #8
 800d59a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800d59c:	2301      	movs	r3, #1
 800d59e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	7e1b      	ldrb	r3, [r3, #24]
 800d5a8:	3b01      	subs	r3, #1
 800d5aa:	2b0a      	cmp	r3, #10
 800d5ac:	f200 8156 	bhi.w	800d85c <USBH_HandleControl+0x2c8>
 800d5b0:	a201      	add	r2, pc, #4	@ (adr r2, 800d5b8 <USBH_HandleControl+0x24>)
 800d5b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5b6:	bf00      	nop
 800d5b8:	0800d5e5 	.word	0x0800d5e5
 800d5bc:	0800d5ff 	.word	0x0800d5ff
 800d5c0:	0800d669 	.word	0x0800d669
 800d5c4:	0800d68f 	.word	0x0800d68f
 800d5c8:	0800d6c7 	.word	0x0800d6c7
 800d5cc:	0800d6f1 	.word	0x0800d6f1
 800d5d0:	0800d743 	.word	0x0800d743
 800d5d4:	0800d765 	.word	0x0800d765
 800d5d8:	0800d7a1 	.word	0x0800d7a1
 800d5dc:	0800d7c7 	.word	0x0800d7c7
 800d5e0:	0800d805 	.word	0x0800d805
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f103 0110 	add.w	r1, r3, #16
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	795b      	ldrb	r3, [r3, #5]
 800d5ee:	461a      	mov	r2, r3
 800d5f0:	6878      	ldr	r0, [r7, #4]
 800d5f2:	f000 f943 	bl	800d87c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	2202      	movs	r2, #2
 800d5fa:	761a      	strb	r2, [r3, #24]
      break;
 800d5fc:	e139      	b.n	800d872 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	795b      	ldrb	r3, [r3, #5]
 800d602:	4619      	mov	r1, r3
 800d604:	6878      	ldr	r0, [r7, #4]
 800d606:	f001 fa49 	bl	800ea9c <USBH_LL_GetURBState>
 800d60a:	4603      	mov	r3, r0
 800d60c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800d60e:	7bbb      	ldrb	r3, [r7, #14]
 800d610:	2b01      	cmp	r3, #1
 800d612:	d11e      	bne.n	800d652 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	7c1b      	ldrb	r3, [r3, #16]
 800d618:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d61c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	8adb      	ldrh	r3, [r3, #22]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d00a      	beq.n	800d63c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800d626:	7b7b      	ldrb	r3, [r7, #13]
 800d628:	2b80      	cmp	r3, #128	@ 0x80
 800d62a:	d103      	bne.n	800d634 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2203      	movs	r2, #3
 800d630:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d632:	e115      	b.n	800d860 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	2205      	movs	r2, #5
 800d638:	761a      	strb	r2, [r3, #24]
      break;
 800d63a:	e111      	b.n	800d860 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800d63c:	7b7b      	ldrb	r3, [r7, #13]
 800d63e:	2b80      	cmp	r3, #128	@ 0x80
 800d640:	d103      	bne.n	800d64a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	2209      	movs	r2, #9
 800d646:	761a      	strb	r2, [r3, #24]
      break;
 800d648:	e10a      	b.n	800d860 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	2207      	movs	r2, #7
 800d64e:	761a      	strb	r2, [r3, #24]
      break;
 800d650:	e106      	b.n	800d860 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800d652:	7bbb      	ldrb	r3, [r7, #14]
 800d654:	2b04      	cmp	r3, #4
 800d656:	d003      	beq.n	800d660 <USBH_HandleControl+0xcc>
 800d658:	7bbb      	ldrb	r3, [r7, #14]
 800d65a:	2b02      	cmp	r3, #2
 800d65c:	f040 8100 	bne.w	800d860 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	220b      	movs	r2, #11
 800d664:	761a      	strb	r2, [r3, #24]
      break;
 800d666:	e0fb      	b.n	800d860 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800d66e:	b29a      	uxth	r2, r3
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	6899      	ldr	r1, [r3, #8]
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	899a      	ldrh	r2, [r3, #12]
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	791b      	ldrb	r3, [r3, #4]
 800d680:	6878      	ldr	r0, [r7, #4]
 800d682:	f000 f93a 	bl	800d8fa <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	2204      	movs	r2, #4
 800d68a:	761a      	strb	r2, [r3, #24]
      break;
 800d68c:	e0f1      	b.n	800d872 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	791b      	ldrb	r3, [r3, #4]
 800d692:	4619      	mov	r1, r3
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	f001 fa01 	bl	800ea9c <USBH_LL_GetURBState>
 800d69a:	4603      	mov	r3, r0
 800d69c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800d69e:	7bbb      	ldrb	r3, [r7, #14]
 800d6a0:	2b01      	cmp	r3, #1
 800d6a2:	d102      	bne.n	800d6aa <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	2209      	movs	r2, #9
 800d6a8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800d6aa:	7bbb      	ldrb	r3, [r7, #14]
 800d6ac:	2b05      	cmp	r3, #5
 800d6ae:	d102      	bne.n	800d6b6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800d6b0:	2303      	movs	r3, #3
 800d6b2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d6b4:	e0d6      	b.n	800d864 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800d6b6:	7bbb      	ldrb	r3, [r7, #14]
 800d6b8:	2b04      	cmp	r3, #4
 800d6ba:	f040 80d3 	bne.w	800d864 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	220b      	movs	r2, #11
 800d6c2:	761a      	strb	r2, [r3, #24]
      break;
 800d6c4:	e0ce      	b.n	800d864 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	6899      	ldr	r1, [r3, #8]
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	899a      	ldrh	r2, [r3, #12]
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	795b      	ldrb	r3, [r3, #5]
 800d6d2:	2001      	movs	r0, #1
 800d6d4:	9000      	str	r0, [sp, #0]
 800d6d6:	6878      	ldr	r0, [r7, #4]
 800d6d8:	f000 f8ea 	bl	800d8b0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800d6e2:	b29a      	uxth	r2, r3
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	2206      	movs	r2, #6
 800d6ec:	761a      	strb	r2, [r3, #24]
      break;
 800d6ee:	e0c0      	b.n	800d872 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	795b      	ldrb	r3, [r3, #5]
 800d6f4:	4619      	mov	r1, r3
 800d6f6:	6878      	ldr	r0, [r7, #4]
 800d6f8:	f001 f9d0 	bl	800ea9c <USBH_LL_GetURBState>
 800d6fc:	4603      	mov	r3, r0
 800d6fe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d700:	7bbb      	ldrb	r3, [r7, #14]
 800d702:	2b01      	cmp	r3, #1
 800d704:	d103      	bne.n	800d70e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	2207      	movs	r2, #7
 800d70a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d70c:	e0ac      	b.n	800d868 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800d70e:	7bbb      	ldrb	r3, [r7, #14]
 800d710:	2b05      	cmp	r3, #5
 800d712:	d105      	bne.n	800d720 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	220c      	movs	r2, #12
 800d718:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800d71a:	2303      	movs	r3, #3
 800d71c:	73fb      	strb	r3, [r7, #15]
      break;
 800d71e:	e0a3      	b.n	800d868 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d720:	7bbb      	ldrb	r3, [r7, #14]
 800d722:	2b02      	cmp	r3, #2
 800d724:	d103      	bne.n	800d72e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	2205      	movs	r2, #5
 800d72a:	761a      	strb	r2, [r3, #24]
      break;
 800d72c:	e09c      	b.n	800d868 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800d72e:	7bbb      	ldrb	r3, [r7, #14]
 800d730:	2b04      	cmp	r3, #4
 800d732:	f040 8099 	bne.w	800d868 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	220b      	movs	r2, #11
 800d73a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800d73c:	2302      	movs	r3, #2
 800d73e:	73fb      	strb	r3, [r7, #15]
      break;
 800d740:	e092      	b.n	800d868 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	791b      	ldrb	r3, [r3, #4]
 800d746:	2200      	movs	r2, #0
 800d748:	2100      	movs	r1, #0
 800d74a:	6878      	ldr	r0, [r7, #4]
 800d74c:	f000 f8d5 	bl	800d8fa <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800d756:	b29a      	uxth	r2, r3
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	2208      	movs	r2, #8
 800d760:	761a      	strb	r2, [r3, #24]

      break;
 800d762:	e086      	b.n	800d872 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	791b      	ldrb	r3, [r3, #4]
 800d768:	4619      	mov	r1, r3
 800d76a:	6878      	ldr	r0, [r7, #4]
 800d76c:	f001 f996 	bl	800ea9c <USBH_LL_GetURBState>
 800d770:	4603      	mov	r3, r0
 800d772:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d774:	7bbb      	ldrb	r3, [r7, #14]
 800d776:	2b01      	cmp	r3, #1
 800d778:	d105      	bne.n	800d786 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	220d      	movs	r2, #13
 800d77e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800d780:	2300      	movs	r3, #0
 800d782:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d784:	e072      	b.n	800d86c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800d786:	7bbb      	ldrb	r3, [r7, #14]
 800d788:	2b04      	cmp	r3, #4
 800d78a:	d103      	bne.n	800d794 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	220b      	movs	r2, #11
 800d790:	761a      	strb	r2, [r3, #24]
      break;
 800d792:	e06b      	b.n	800d86c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800d794:	7bbb      	ldrb	r3, [r7, #14]
 800d796:	2b05      	cmp	r3, #5
 800d798:	d168      	bne.n	800d86c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800d79a:	2303      	movs	r3, #3
 800d79c:	73fb      	strb	r3, [r7, #15]
      break;
 800d79e:	e065      	b.n	800d86c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	795b      	ldrb	r3, [r3, #5]
 800d7a4:	2201      	movs	r2, #1
 800d7a6:	9200      	str	r2, [sp, #0]
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	2100      	movs	r1, #0
 800d7ac:	6878      	ldr	r0, [r7, #4]
 800d7ae:	f000 f87f 	bl	800d8b0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800d7b8:	b29a      	uxth	r2, r3
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	220a      	movs	r2, #10
 800d7c2:	761a      	strb	r2, [r3, #24]
      break;
 800d7c4:	e055      	b.n	800d872 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	795b      	ldrb	r3, [r3, #5]
 800d7ca:	4619      	mov	r1, r3
 800d7cc:	6878      	ldr	r0, [r7, #4]
 800d7ce:	f001 f965 	bl	800ea9c <USBH_LL_GetURBState>
 800d7d2:	4603      	mov	r3, r0
 800d7d4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800d7d6:	7bbb      	ldrb	r3, [r7, #14]
 800d7d8:	2b01      	cmp	r3, #1
 800d7da:	d105      	bne.n	800d7e8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800d7dc:	2300      	movs	r3, #0
 800d7de:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	220d      	movs	r2, #13
 800d7e4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d7e6:	e043      	b.n	800d870 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d7e8:	7bbb      	ldrb	r3, [r7, #14]
 800d7ea:	2b02      	cmp	r3, #2
 800d7ec:	d103      	bne.n	800d7f6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	2209      	movs	r2, #9
 800d7f2:	761a      	strb	r2, [r3, #24]
      break;
 800d7f4:	e03c      	b.n	800d870 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800d7f6:	7bbb      	ldrb	r3, [r7, #14]
 800d7f8:	2b04      	cmp	r3, #4
 800d7fa:	d139      	bne.n	800d870 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	220b      	movs	r2, #11
 800d800:	761a      	strb	r2, [r3, #24]
      break;
 800d802:	e035      	b.n	800d870 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	7e5b      	ldrb	r3, [r3, #25]
 800d808:	3301      	adds	r3, #1
 800d80a:	b2da      	uxtb	r2, r3
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	765a      	strb	r2, [r3, #25]
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	7e5b      	ldrb	r3, [r3, #25]
 800d814:	2b02      	cmp	r3, #2
 800d816:	d806      	bhi.n	800d826 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	2201      	movs	r2, #1
 800d81c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	2201      	movs	r2, #1
 800d822:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800d824:	e025      	b.n	800d872 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800d82c:	2106      	movs	r1, #6
 800d82e:	6878      	ldr	r0, [r7, #4]
 800d830:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	2200      	movs	r2, #0
 800d836:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	795b      	ldrb	r3, [r3, #5]
 800d83c:	4619      	mov	r1, r3
 800d83e:	6878      	ldr	r0, [r7, #4]
 800d840:	f000 f90c 	bl	800da5c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	791b      	ldrb	r3, [r3, #4]
 800d848:	4619      	mov	r1, r3
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	f000 f906 	bl	800da5c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	2200      	movs	r2, #0
 800d854:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800d856:	2302      	movs	r3, #2
 800d858:	73fb      	strb	r3, [r7, #15]
      break;
 800d85a:	e00a      	b.n	800d872 <USBH_HandleControl+0x2de>

    default:
      break;
 800d85c:	bf00      	nop
 800d85e:	e008      	b.n	800d872 <USBH_HandleControl+0x2de>
      break;
 800d860:	bf00      	nop
 800d862:	e006      	b.n	800d872 <USBH_HandleControl+0x2de>
      break;
 800d864:	bf00      	nop
 800d866:	e004      	b.n	800d872 <USBH_HandleControl+0x2de>
      break;
 800d868:	bf00      	nop
 800d86a:	e002      	b.n	800d872 <USBH_HandleControl+0x2de>
      break;
 800d86c:	bf00      	nop
 800d86e:	e000      	b.n	800d872 <USBH_HandleControl+0x2de>
      break;
 800d870:	bf00      	nop
  }

  return status;
 800d872:	7bfb      	ldrb	r3, [r7, #15]
}
 800d874:	4618      	mov	r0, r3
 800d876:	3710      	adds	r7, #16
 800d878:	46bd      	mov	sp, r7
 800d87a:	bd80      	pop	{r7, pc}

0800d87c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b088      	sub	sp, #32
 800d880:	af04      	add	r7, sp, #16
 800d882:	60f8      	str	r0, [r7, #12]
 800d884:	60b9      	str	r1, [r7, #8]
 800d886:	4613      	mov	r3, r2
 800d888:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d88a:	79f9      	ldrb	r1, [r7, #7]
 800d88c:	2300      	movs	r3, #0
 800d88e:	9303      	str	r3, [sp, #12]
 800d890:	2308      	movs	r3, #8
 800d892:	9302      	str	r3, [sp, #8]
 800d894:	68bb      	ldr	r3, [r7, #8]
 800d896:	9301      	str	r3, [sp, #4]
 800d898:	2300      	movs	r3, #0
 800d89a:	9300      	str	r3, [sp, #0]
 800d89c:	2300      	movs	r3, #0
 800d89e:	2200      	movs	r2, #0
 800d8a0:	68f8      	ldr	r0, [r7, #12]
 800d8a2:	f001 f8ca 	bl	800ea3a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800d8a6:	2300      	movs	r3, #0
}
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	3710      	adds	r7, #16
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}

0800d8b0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b088      	sub	sp, #32
 800d8b4:	af04      	add	r7, sp, #16
 800d8b6:	60f8      	str	r0, [r7, #12]
 800d8b8:	60b9      	str	r1, [r7, #8]
 800d8ba:	4611      	mov	r1, r2
 800d8bc:	461a      	mov	r2, r3
 800d8be:	460b      	mov	r3, r1
 800d8c0:	80fb      	strh	r3, [r7, #6]
 800d8c2:	4613      	mov	r3, r2
 800d8c4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d001      	beq.n	800d8d4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d8d4:	7979      	ldrb	r1, [r7, #5]
 800d8d6:	7e3b      	ldrb	r3, [r7, #24]
 800d8d8:	9303      	str	r3, [sp, #12]
 800d8da:	88fb      	ldrh	r3, [r7, #6]
 800d8dc:	9302      	str	r3, [sp, #8]
 800d8de:	68bb      	ldr	r3, [r7, #8]
 800d8e0:	9301      	str	r3, [sp, #4]
 800d8e2:	2301      	movs	r3, #1
 800d8e4:	9300      	str	r3, [sp, #0]
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	68f8      	ldr	r0, [r7, #12]
 800d8ec:	f001 f8a5 	bl	800ea3a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800d8f0:	2300      	movs	r3, #0
}
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	3710      	adds	r7, #16
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bd80      	pop	{r7, pc}

0800d8fa <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800d8fa:	b580      	push	{r7, lr}
 800d8fc:	b088      	sub	sp, #32
 800d8fe:	af04      	add	r7, sp, #16
 800d900:	60f8      	str	r0, [r7, #12]
 800d902:	60b9      	str	r1, [r7, #8]
 800d904:	4611      	mov	r1, r2
 800d906:	461a      	mov	r2, r3
 800d908:	460b      	mov	r3, r1
 800d90a:	80fb      	strh	r3, [r7, #6]
 800d90c:	4613      	mov	r3, r2
 800d90e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d910:	7979      	ldrb	r1, [r7, #5]
 800d912:	2300      	movs	r3, #0
 800d914:	9303      	str	r3, [sp, #12]
 800d916:	88fb      	ldrh	r3, [r7, #6]
 800d918:	9302      	str	r3, [sp, #8]
 800d91a:	68bb      	ldr	r3, [r7, #8]
 800d91c:	9301      	str	r3, [sp, #4]
 800d91e:	2301      	movs	r3, #1
 800d920:	9300      	str	r3, [sp, #0]
 800d922:	2300      	movs	r3, #0
 800d924:	2201      	movs	r2, #1
 800d926:	68f8      	ldr	r0, [r7, #12]
 800d928:	f001 f887 	bl	800ea3a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d92c:	2300      	movs	r3, #0

}
 800d92e:	4618      	mov	r0, r3
 800d930:	3710      	adds	r7, #16
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}

0800d936 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800d936:	b580      	push	{r7, lr}
 800d938:	b088      	sub	sp, #32
 800d93a:	af04      	add	r7, sp, #16
 800d93c:	60f8      	str	r0, [r7, #12]
 800d93e:	60b9      	str	r1, [r7, #8]
 800d940:	4611      	mov	r1, r2
 800d942:	461a      	mov	r2, r3
 800d944:	460b      	mov	r3, r1
 800d946:	80fb      	strh	r3, [r7, #6]
 800d948:	4613      	mov	r3, r2
 800d94a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d952:	2b00      	cmp	r3, #0
 800d954:	d001      	beq.n	800d95a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800d956:	2300      	movs	r3, #0
 800d958:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d95a:	7979      	ldrb	r1, [r7, #5]
 800d95c:	7e3b      	ldrb	r3, [r7, #24]
 800d95e:	9303      	str	r3, [sp, #12]
 800d960:	88fb      	ldrh	r3, [r7, #6]
 800d962:	9302      	str	r3, [sp, #8]
 800d964:	68bb      	ldr	r3, [r7, #8]
 800d966:	9301      	str	r3, [sp, #4]
 800d968:	2301      	movs	r3, #1
 800d96a:	9300      	str	r3, [sp, #0]
 800d96c:	2302      	movs	r3, #2
 800d96e:	2200      	movs	r2, #0
 800d970:	68f8      	ldr	r0, [r7, #12]
 800d972:	f001 f862 	bl	800ea3a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800d976:	2300      	movs	r3, #0
}
 800d978:	4618      	mov	r0, r3
 800d97a:	3710      	adds	r7, #16
 800d97c:	46bd      	mov	sp, r7
 800d97e:	bd80      	pop	{r7, pc}

0800d980 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b088      	sub	sp, #32
 800d984:	af04      	add	r7, sp, #16
 800d986:	60f8      	str	r0, [r7, #12]
 800d988:	60b9      	str	r1, [r7, #8]
 800d98a:	4611      	mov	r1, r2
 800d98c:	461a      	mov	r2, r3
 800d98e:	460b      	mov	r3, r1
 800d990:	80fb      	strh	r3, [r7, #6]
 800d992:	4613      	mov	r3, r2
 800d994:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d996:	7979      	ldrb	r1, [r7, #5]
 800d998:	2300      	movs	r3, #0
 800d99a:	9303      	str	r3, [sp, #12]
 800d99c:	88fb      	ldrh	r3, [r7, #6]
 800d99e:	9302      	str	r3, [sp, #8]
 800d9a0:	68bb      	ldr	r3, [r7, #8]
 800d9a2:	9301      	str	r3, [sp, #4]
 800d9a4:	2301      	movs	r3, #1
 800d9a6:	9300      	str	r3, [sp, #0]
 800d9a8:	2302      	movs	r3, #2
 800d9aa:	2201      	movs	r2, #1
 800d9ac:	68f8      	ldr	r0, [r7, #12]
 800d9ae:	f001 f844 	bl	800ea3a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d9b2:	2300      	movs	r3, #0
}
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	3710      	adds	r7, #16
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	bd80      	pop	{r7, pc}

0800d9bc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b086      	sub	sp, #24
 800d9c0:	af04      	add	r7, sp, #16
 800d9c2:	6078      	str	r0, [r7, #4]
 800d9c4:	4608      	mov	r0, r1
 800d9c6:	4611      	mov	r1, r2
 800d9c8:	461a      	mov	r2, r3
 800d9ca:	4603      	mov	r3, r0
 800d9cc:	70fb      	strb	r3, [r7, #3]
 800d9ce:	460b      	mov	r3, r1
 800d9d0:	70bb      	strb	r3, [r7, #2]
 800d9d2:	4613      	mov	r3, r2
 800d9d4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800d9d6:	7878      	ldrb	r0, [r7, #1]
 800d9d8:	78ba      	ldrb	r2, [r7, #2]
 800d9da:	78f9      	ldrb	r1, [r7, #3]
 800d9dc:	8b3b      	ldrh	r3, [r7, #24]
 800d9de:	9302      	str	r3, [sp, #8]
 800d9e0:	7d3b      	ldrb	r3, [r7, #20]
 800d9e2:	9301      	str	r3, [sp, #4]
 800d9e4:	7c3b      	ldrb	r3, [r7, #16]
 800d9e6:	9300      	str	r3, [sp, #0]
 800d9e8:	4603      	mov	r3, r0
 800d9ea:	6878      	ldr	r0, [r7, #4]
 800d9ec:	f000 ffd7 	bl	800e99e <USBH_LL_OpenPipe>

  return USBH_OK;
 800d9f0:	2300      	movs	r3, #0
}
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	3708      	adds	r7, #8
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	bd80      	pop	{r7, pc}

0800d9fa <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800d9fa:	b580      	push	{r7, lr}
 800d9fc:	b082      	sub	sp, #8
 800d9fe:	af00      	add	r7, sp, #0
 800da00:	6078      	str	r0, [r7, #4]
 800da02:	460b      	mov	r3, r1
 800da04:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800da06:	78fb      	ldrb	r3, [r7, #3]
 800da08:	4619      	mov	r1, r3
 800da0a:	6878      	ldr	r0, [r7, #4]
 800da0c:	f000 fff6 	bl	800e9fc <USBH_LL_ClosePipe>

  return USBH_OK;
 800da10:	2300      	movs	r3, #0
}
 800da12:	4618      	mov	r0, r3
 800da14:	3708      	adds	r7, #8
 800da16:	46bd      	mov	sp, r7
 800da18:	bd80      	pop	{r7, pc}

0800da1a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800da1a:	b580      	push	{r7, lr}
 800da1c:	b084      	sub	sp, #16
 800da1e:	af00      	add	r7, sp, #0
 800da20:	6078      	str	r0, [r7, #4]
 800da22:	460b      	mov	r3, r1
 800da24:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800da26:	6878      	ldr	r0, [r7, #4]
 800da28:	f000 f836 	bl	800da98 <USBH_GetFreePipe>
 800da2c:	4603      	mov	r3, r0
 800da2e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800da30:	89fb      	ldrh	r3, [r7, #14]
 800da32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800da36:	4293      	cmp	r3, r2
 800da38:	d00a      	beq.n	800da50 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800da3a:	78fa      	ldrb	r2, [r7, #3]
 800da3c:	89fb      	ldrh	r3, [r7, #14]
 800da3e:	f003 030f 	and.w	r3, r3, #15
 800da42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800da46:	6879      	ldr	r1, [r7, #4]
 800da48:	33e0      	adds	r3, #224	@ 0xe0
 800da4a:	009b      	lsls	r3, r3, #2
 800da4c:	440b      	add	r3, r1
 800da4e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800da50:	89fb      	ldrh	r3, [r7, #14]
 800da52:	b2db      	uxtb	r3, r3
}
 800da54:	4618      	mov	r0, r3
 800da56:	3710      	adds	r7, #16
 800da58:	46bd      	mov	sp, r7
 800da5a:	bd80      	pop	{r7, pc}

0800da5c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800da5c:	b480      	push	{r7}
 800da5e:	b083      	sub	sp, #12
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
 800da64:	460b      	mov	r3, r1
 800da66:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800da68:	78fb      	ldrb	r3, [r7, #3]
 800da6a:	2b0f      	cmp	r3, #15
 800da6c:	d80d      	bhi.n	800da8a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800da6e:	78fb      	ldrb	r3, [r7, #3]
 800da70:	687a      	ldr	r2, [r7, #4]
 800da72:	33e0      	adds	r3, #224	@ 0xe0
 800da74:	009b      	lsls	r3, r3, #2
 800da76:	4413      	add	r3, r2
 800da78:	685a      	ldr	r2, [r3, #4]
 800da7a:	78fb      	ldrb	r3, [r7, #3]
 800da7c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800da80:	6879      	ldr	r1, [r7, #4]
 800da82:	33e0      	adds	r3, #224	@ 0xe0
 800da84:	009b      	lsls	r3, r3, #2
 800da86:	440b      	add	r3, r1
 800da88:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800da8a:	2300      	movs	r3, #0
}
 800da8c:	4618      	mov	r0, r3
 800da8e:	370c      	adds	r7, #12
 800da90:	46bd      	mov	sp, r7
 800da92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da96:	4770      	bx	lr

0800da98 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800da98:	b480      	push	{r7}
 800da9a:	b085      	sub	sp, #20
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800daa0:	2300      	movs	r3, #0
 800daa2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800daa4:	2300      	movs	r3, #0
 800daa6:	73fb      	strb	r3, [r7, #15]
 800daa8:	e00f      	b.n	800daca <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800daaa:	7bfb      	ldrb	r3, [r7, #15]
 800daac:	687a      	ldr	r2, [r7, #4]
 800daae:	33e0      	adds	r3, #224	@ 0xe0
 800dab0:	009b      	lsls	r3, r3, #2
 800dab2:	4413      	add	r3, r2
 800dab4:	685b      	ldr	r3, [r3, #4]
 800dab6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d102      	bne.n	800dac4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800dabe:	7bfb      	ldrb	r3, [r7, #15]
 800dac0:	b29b      	uxth	r3, r3
 800dac2:	e007      	b.n	800dad4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800dac4:	7bfb      	ldrb	r3, [r7, #15]
 800dac6:	3301      	adds	r3, #1
 800dac8:	73fb      	strb	r3, [r7, #15]
 800daca:	7bfb      	ldrb	r3, [r7, #15]
 800dacc:	2b0f      	cmp	r3, #15
 800dace:	d9ec      	bls.n	800daaa <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800dad0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800dad4:	4618      	mov	r0, r3
 800dad6:	3714      	adds	r7, #20
 800dad8:	46bd      	mov	sp, r7
 800dada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dade:	4770      	bx	lr

0800dae0 <MX_TCPP_Init>:
static void USBnoPD_ProcessADC(void);
static void USBnoPD_IncrementDebounceCount(void);
static void USBnoPD_StateMachineRun(void);

void MX_TCPP_Init(void)
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	af00      	add	r7, sp, #0
  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(TCPP0203_PORT0_FLG_EXTI_IRQN, 0, 0);
 800dae4:	2200      	movs	r2, #0
 800dae6:	2100      	movs	r1, #0
 800dae8:	2018      	movs	r0, #24
 800daea:	f7f5 ff28 	bl	800393e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TCPP0203_PORT0_FLG_EXTI_IRQN);
 800daee:	2018      	movs	r0, #24
 800daf0:	f7f5 ff3f 	bl	8003972 <HAL_NVIC_EnableIRQ>

  HAL_GPIO_WritePin(TCPP0203_PORT0_ENABLE_GPIO_PORT, TCPP0203_PORT0_ENABLE_GPIO_PIN, GPIO_PIN_SET);
 800daf4:	2201      	movs	r2, #1
 800daf6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800dafa:	4808      	ldr	r0, [pc, #32]	@ (800db1c <MX_TCPP_Init+0x3c>)
 800dafc:	f7f7 fc44 	bl	8005388 <HAL_GPIO_WritePin>

  BSP_USBPD_PWR_Init(USBPD_PWR_TYPE_C_PORT_1);
 800db00:	2000      	movs	r0, #0
 800db02:	f000 fa71 	bl	800dfe8 <BSP_USBPD_PWR_Init>
  BSP_USBPD_PWR_SetPowerMode(USBPD_PWR_TYPE_C_PORT_1, USBPD_PWR_MODE_NORMAL);
 800db06:	2103      	movs	r1, #3
 800db08:	2000      	movs	r0, #0
 800db0a:	f000 fad7 	bl	800e0bc <BSP_USBPD_PWR_SetPowerMode>

  ADC_Start();
 800db0e:	f000 fd5f 	bl	800e5d0 <ADC_Start>
  USBnoPD_State = USBnoPD_State_DETACHED;
 800db12:	4b03      	ldr	r3, [pc, #12]	@ (800db20 <MX_TCPP_Init+0x40>)
 800db14:	2200      	movs	r2, #0
 800db16:	701a      	strb	r2, [r3, #0]
}
 800db18:	bf00      	nop
 800db1a:	bd80      	pop	{r7, pc}
 800db1c:	58023000 	.word	0x58023000
 800db20:	24000484 	.word	0x24000484

0800db24 <MX_TCPP_Process>:

void MX_TCPP_Process(void)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	af00      	add	r7, sp, #0
  USBnoPD_StateMachineRun();
 800db28:	f000 f802 	bl	800db30 <USBnoPD_StateMachineRun>
}
 800db2c:	bf00      	nop
 800db2e:	bd80      	pop	{r7, pc}

0800db30 <USBnoPD_StateMachineRun>:
  * @brief  Main state machine
  * @param  none
  * @retval none
  */
static void USBnoPD_StateMachineRun(void)
{
 800db30:	b580      	push	{r7, lr}
 800db32:	af00      	add	r7, sp, #0
  switch(USBnoPD_State)
 800db34:	4b96      	ldr	r3, [pc, #600]	@ (800dd90 <USBnoPD_StateMachineRun+0x260>)
 800db36:	781b      	ldrb	r3, [r3, #0]
 800db38:	2b05      	cmp	r3, #5
 800db3a:	f200 8150 	bhi.w	800ddde <USBnoPD_StateMachineRun+0x2ae>
 800db3e:	a201      	add	r2, pc, #4	@ (adr r2, 800db44 <USBnoPD_StateMachineRun+0x14>)
 800db40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db44:	0800db5d 	.word	0x0800db5d
 800db48:	0800dbfd 	.word	0x0800dbfd
 800db4c:	0800dc77 	.word	0x0800dc77
 800db50:	0800dd0f 	.word	0x0800dd0f
 800db54:	0800dd6f 	.word	0x0800dd6f
 800db58:	0800dda1 	.word	0x0800dda1
  {
    case USBnoPD_State_DETACHED:      /* IDLE, nothing connected         */
      /* Transition to next state */
      if (USBnoPD_adc_converted_buffer[USBnoPD_ADC_Index_VPROV] > USBNOPD_VPROV_VOLTAGE_MIN)
 800db5c:	4b8d      	ldr	r3, [pc, #564]	@ (800dd94 <USBnoPD_StateMachineRun+0x264>)
 800db5e:	891b      	ldrh	r3, [r3, #8]
 800db60:	f241 1294 	movw	r2, #4500	@ 0x1194
 800db64:	4293      	cmp	r3, r2
 800db66:	f240 8144 	bls.w	800ddf2 <USBnoPD_StateMachineRun+0x2c2>
      {
        /* Connection detected on CC1 */
        if ((USBnoPD_adc_converted_buffer[USBnoPD_ADC_Index_CC1] > USBNOPD_CC_VOLTAGE_MINRD) &&
 800db6a:	4b8a      	ldr	r3, [pc, #552]	@ (800dd94 <USBnoPD_StateMachineRun+0x264>)
 800db6c:	881b      	ldrh	r3, [r3, #0]
 800db6e:	f240 3252 	movw	r2, #850	@ 0x352
 800db72:	4293      	cmp	r3, r2
 800db74:	d91c      	bls.n	800dbb0 <USBnoPD_StateMachineRun+0x80>
            (USBnoPD_adc_converted_buffer[USBnoPD_ADC_Index_CC1] < USBNOPD_CC_VOLTAGE_MAXRD) &&
 800db76:	4b87      	ldr	r3, [pc, #540]	@ (800dd94 <USBnoPD_StateMachineRun+0x264>)
 800db78:	881b      	ldrh	r3, [r3, #0]
        if ((USBnoPD_adc_converted_buffer[USBnoPD_ADC_Index_CC1] > USBNOPD_CC_VOLTAGE_MINRD) &&
 800db7a:	f640 1291 	movw	r2, #2449	@ 0x991
 800db7e:	4293      	cmp	r3, r2
 800db80:	d816      	bhi.n	800dbb0 <USBnoPD_StateMachineRun+0x80>
            (USBnoPD_adc_converted_buffer[USBnoPD_ADC_Index_CC2] < USBNOPD_CC_VOLTAGE_MAXRA ||
 800db82:	4b84      	ldr	r3, [pc, #528]	@ (800dd94 <USBnoPD_StateMachineRun+0x264>)
 800db84:	885b      	ldrh	r3, [r3, #2]
            (USBnoPD_adc_converted_buffer[USBnoPD_ADC_Index_CC1] < USBNOPD_CC_VOLTAGE_MAXRD) &&
 800db86:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 800db8a:	d305      	bcc.n	800db98 <USBnoPD_StateMachineRun+0x68>
             USBnoPD_adc_converted_buffer[USBnoPD_ADC_Index_CC2] > USBNOPD_CC_VOLTAGE_MINOPEN))
 800db8c:	4b81      	ldr	r3, [pc, #516]	@ (800dd94 <USBnoPD_StateMachineRun+0x264>)
 800db8e:	885b      	ldrh	r3, [r3, #2]
            (USBnoPD_adc_converted_buffer[USBnoPD_ADC_Index_CC2] < USBNOPD_CC_VOLTAGE_MAXRA ||
 800db90:	f640 22be 	movw	r2, #2750	@ 0xabe
 800db94:	4293      	cmp	r3, r2
 800db96:	d90b      	bls.n	800dbb0 <USBnoPD_StateMachineRun+0x80>
        {
          /* Reset debouncing counter */
          USBnoPD_debounce_counter = 0u;
 800db98:	4b7f      	ldr	r3, [pc, #508]	@ (800dd98 <USBnoPD_StateMachineRun+0x268>)
 800db9a:	2200      	movs	r2, #0
 800db9c:	801a      	strh	r2, [r3, #0]

          /* Start the debouncing timer */
          TIM_Base_Start_IT();
 800db9e:	f000 fa0f 	bl	800dfc0 <TIM_Base_Start_IT>

          /* Active CC is now CC1 */
          USBnoPD_activeCC = USBnoPD_CC1;
 800dba2:	4b7e      	ldr	r3, [pc, #504]	@ (800dd9c <USBnoPD_StateMachineRun+0x26c>)
 800dba4:	2200      	movs	r2, #0
 800dba6:	701a      	strb	r2, [r3, #0]

          /* Go to attaching state */
          USBnoPD_State = USBnoPD_State_ATTACHING;
 800dba8:	4b79      	ldr	r3, [pc, #484]	@ (800dd90 <USBnoPD_StateMachineRun+0x260>)
 800dbaa:	2201      	movs	r2, #1
 800dbac:	701a      	strb	r2, [r3, #0]

          /* Go to attaching state */
          USBnoPD_State = USBnoPD_State_ATTACHING;
        }
      }
      break;
 800dbae:	e120      	b.n	800ddf2 <USBnoPD_StateMachineRun+0x2c2>
        else if ((USBnoPD_adc_converted_buffer[USBnoPD_ADC_Index_CC2] > USBNOPD_CC_VOLTAGE_MINRD) &&
 800dbb0:	4b78      	ldr	r3, [pc, #480]	@ (800dd94 <USBnoPD_StateMachineRun+0x264>)
 800dbb2:	885b      	ldrh	r3, [r3, #2]
 800dbb4:	f240 3252 	movw	r2, #850	@ 0x352
 800dbb8:	4293      	cmp	r3, r2
 800dbba:	f240 811a 	bls.w	800ddf2 <USBnoPD_StateMachineRun+0x2c2>
                 (USBnoPD_adc_converted_buffer[USBnoPD_ADC_Index_CC2] < USBNOPD_CC_VOLTAGE_MAXRD) &&
 800dbbe:	4b75      	ldr	r3, [pc, #468]	@ (800dd94 <USBnoPD_StateMachineRun+0x264>)
 800dbc0:	885b      	ldrh	r3, [r3, #2]
        else if ((USBnoPD_adc_converted_buffer[USBnoPD_ADC_Index_CC2] > USBNOPD_CC_VOLTAGE_MINRD) &&
 800dbc2:	f640 1291 	movw	r2, #2449	@ 0x991
 800dbc6:	4293      	cmp	r3, r2
 800dbc8:	f200 8113 	bhi.w	800ddf2 <USBnoPD_StateMachineRun+0x2c2>
                 (USBnoPD_adc_converted_buffer[USBnoPD_ADC_Index_CC1] < USBNOPD_CC_VOLTAGE_MAXRA ||
 800dbcc:	4b71      	ldr	r3, [pc, #452]	@ (800dd94 <USBnoPD_StateMachineRun+0x264>)
 800dbce:	881b      	ldrh	r3, [r3, #0]
                 (USBnoPD_adc_converted_buffer[USBnoPD_ADC_Index_CC2] < USBNOPD_CC_VOLTAGE_MAXRD) &&
 800dbd0:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 800dbd4:	d306      	bcc.n	800dbe4 <USBnoPD_StateMachineRun+0xb4>
                  USBnoPD_adc_converted_buffer[USBnoPD_ADC_Index_CC1] > USBNOPD_CC_VOLTAGE_MINOPEN))
 800dbd6:	4b6f      	ldr	r3, [pc, #444]	@ (800dd94 <USBnoPD_StateMachineRun+0x264>)
 800dbd8:	881b      	ldrh	r3, [r3, #0]
                 (USBnoPD_adc_converted_buffer[USBnoPD_ADC_Index_CC1] < USBNOPD_CC_VOLTAGE_MAXRA ||
 800dbda:	f640 22be 	movw	r2, #2750	@ 0xabe
 800dbde:	4293      	cmp	r3, r2
 800dbe0:	f240 8107 	bls.w	800ddf2 <USBnoPD_StateMachineRun+0x2c2>
          USBnoPD_debounce_counter = 0u;
 800dbe4:	4b6c      	ldr	r3, [pc, #432]	@ (800dd98 <USBnoPD_StateMachineRun+0x268>)
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	801a      	strh	r2, [r3, #0]
          TIM_Base_Start_IT();
 800dbea:	f000 f9e9 	bl	800dfc0 <TIM_Base_Start_IT>
          USBnoPD_activeCC = USBnoPD_CC2;
 800dbee:	4b6b      	ldr	r3, [pc, #428]	@ (800dd9c <USBnoPD_StateMachineRun+0x26c>)
 800dbf0:	2201      	movs	r2, #1
 800dbf2:	701a      	strb	r2, [r3, #0]
          USBnoPD_State = USBnoPD_State_ATTACHING;
 800dbf4:	4b66      	ldr	r3, [pc, #408]	@ (800dd90 <USBnoPD_StateMachineRun+0x260>)
 800dbf6:	2201      	movs	r2, #1
 800dbf8:	701a      	strb	r2, [r3, #0]
      break;
 800dbfa:	e0fa      	b.n	800ddf2 <USBnoPD_StateMachineRun+0x2c2>

    case USBnoPD_State_ATTACHING:     /* Attachment ongoing - debouncing */
      /* If a glitch is detected, reset debounce counter and go to detached state*/
      if (((USBnoPD_activeCC == USBnoPD_CC1) &&
 800dbfc:	4b67      	ldr	r3, [pc, #412]	@ (800dd9c <USBnoPD_StateMachineRun+0x26c>)
 800dbfe:	781b      	ldrb	r3, [r3, #0]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d10b      	bne.n	800dc1c <USBnoPD_StateMachineRun+0xec>
           ((USBnoPD_adc_converted_buffer[USBnoPD_ADC_Index_CC1] > USBNOPD_CC_VOLTAGE_MAXRD) ||
 800dc04:	4b63      	ldr	r3, [pc, #396]	@ (800dd94 <USBnoPD_StateMachineRun+0x264>)
 800dc06:	881b      	ldrh	r3, [r3, #0]
      if (((USBnoPD_activeCC == USBnoPD_CC1) &&
 800dc08:	f640 1292 	movw	r2, #2450	@ 0x992
 800dc0c:	4293      	cmp	r3, r2
 800dc0e:	d815      	bhi.n	800dc3c <USBnoPD_StateMachineRun+0x10c>
            (USBnoPD_adc_converted_buffer[USBnoPD_ADC_Index_CC1] < USBNOPD_CC_VOLTAGE_MINRD))) ||
 800dc10:	4b60      	ldr	r3, [pc, #384]	@ (800dd94 <USBnoPD_StateMachineRun+0x264>)
 800dc12:	881b      	ldrh	r3, [r3, #0]
           ((USBnoPD_adc_converted_buffer[USBnoPD_ADC_Index_CC1] > USBNOPD_CC_VOLTAGE_MAXRD) ||
 800dc14:	f240 3251 	movw	r2, #849	@ 0x351
 800dc18:	4293      	cmp	r3, r2
 800dc1a:	d90f      	bls.n	800dc3c <USBnoPD_StateMachineRun+0x10c>
          ((USBnoPD_activeCC == USBnoPD_CC2) &&
 800dc1c:	4b5f      	ldr	r3, [pc, #380]	@ (800dd9c <USBnoPD_StateMachineRun+0x26c>)
 800dc1e:	781b      	ldrb	r3, [r3, #0]
            (USBnoPD_adc_converted_buffer[USBnoPD_ADC_Index_CC1] < USBNOPD_CC_VOLTAGE_MINRD))) ||
 800dc20:	2b01      	cmp	r3, #1
 800dc22:	d114      	bne.n	800dc4e <USBnoPD_StateMachineRun+0x11e>
           ((USBnoPD_adc_converted_buffer[USBnoPD_ADC_Index_CC2] > USBNOPD_CC_VOLTAGE_MAXRD) ||
 800dc24:	4b5b      	ldr	r3, [pc, #364]	@ (800dd94 <USBnoPD_StateMachineRun+0x264>)
 800dc26:	885b      	ldrh	r3, [r3, #2]
          ((USBnoPD_activeCC == USBnoPD_CC2) &&
 800dc28:	f640 1292 	movw	r2, #2450	@ 0x992
 800dc2c:	4293      	cmp	r3, r2
 800dc2e:	d805      	bhi.n	800dc3c <USBnoPD_StateMachineRun+0x10c>
            (USBnoPD_adc_converted_buffer[USBnoPD_ADC_Index_CC2] < USBNOPD_CC_VOLTAGE_MINRD))))
 800dc30:	4b58      	ldr	r3, [pc, #352]	@ (800dd94 <USBnoPD_StateMachineRun+0x264>)
 800dc32:	885b      	ldrh	r3, [r3, #2]
           ((USBnoPD_adc_converted_buffer[USBnoPD_ADC_Index_CC2] > USBNOPD_CC_VOLTAGE_MAXRD) ||
 800dc34:	f240 3251 	movw	r2, #849	@ 0x351
 800dc38:	4293      	cmp	r3, r2
 800dc3a:	d808      	bhi.n	800dc4e <USBnoPD_StateMachineRun+0x11e>
      {
        /* Reset debouncing counter */
        USBnoPD_debounce_counter = 0u;
 800dc3c:	4b56      	ldr	r3, [pc, #344]	@ (800dd98 <USBnoPD_StateMachineRun+0x268>)
 800dc3e:	2200      	movs	r2, #0
 800dc40:	801a      	strh	r2, [r3, #0]

        /* Stop the debouncing timer */
        TIM_Base_Stop_IT();
 800dc42:	f000 f9c7 	bl	800dfd4 <TIM_Base_Stop_IT>

        /* Go to attaching state */
        USBnoPD_State = USBnoPD_State_DETACHED;
 800dc46:	4b52      	ldr	r3, [pc, #328]	@ (800dd90 <USBnoPD_StateMachineRun+0x260>)
 800dc48:	2200      	movs	r2, #0
 800dc4a:	701a      	strb	r2, [r3, #0]
        BSP_USBPD_PWR_VBUSOn(USBPD_PWR_TYPE_C_PORT_1);

        /* Go to attached state */
        USBnoPD_State = USBnoPD_State_ATTACHED;
      }
      break;
 800dc4c:	e0d3      	b.n	800ddf6 <USBnoPD_StateMachineRun+0x2c6>
      else if (USBnoPD_debounce_counter >= USBNOPD_DEBOUNCE_ATTACH_TICKS)
 800dc4e:	4b52      	ldr	r3, [pc, #328]	@ (800dd98 <USBnoPD_StateMachineRun+0x268>)
 800dc50:	881b      	ldrh	r3, [r3, #0]
 800dc52:	2b77      	cmp	r3, #119	@ 0x77
 800dc54:	f240 80cf 	bls.w	800ddf6 <USBnoPD_StateMachineRun+0x2c6>
        USBnoPD_debounce_counter = 0u;
 800dc58:	4b4f      	ldr	r3, [pc, #316]	@ (800dd98 <USBnoPD_StateMachineRun+0x268>)
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	801a      	strh	r2, [r3, #0]
        TIM_Base_Stop_IT();
 800dc5e:	f000 f9b9 	bl	800dfd4 <TIM_Base_Stop_IT>
        BSP_USBPD_PWR_VBUSDischargeOff(USBPD_PWR_TYPE_C_PORT_1);
 800dc62:	2000      	movs	r0, #0
 800dc64:	f000 fbe2 	bl	800e42c <BSP_USBPD_PWR_VBUSDischargeOff>
        BSP_USBPD_PWR_VBUSOn(USBPD_PWR_TYPE_C_PORT_1);
 800dc68:	2000      	movs	r0, #0
 800dc6a:	f000 fb03 	bl	800e274 <BSP_USBPD_PWR_VBUSOn>
        USBnoPD_State = USBnoPD_State_ATTACHED;
 800dc6e:	4b48      	ldr	r3, [pc, #288]	@ (800dd90 <USBnoPD_StateMachineRun+0x260>)
 800dc70:	2202      	movs	r2, #2
 800dc72:	701a      	strb	r2, [r3, #0]
      break;
 800dc74:	e0bf      	b.n	800ddf6 <USBnoPD_StateMachineRun+0x2c6>

    case USBnoPD_State_ATTACHED:      /* Attached                        */
      /* If we detect a fault on Vbus or Vprov and
         CC voltage still correspond to an attached state */
      if (((USBnoPD_adc_converted_buffer[USBnoPD_ADC_Index_VBUSC]  > USBNOPD_VBUS_VOLTAGE_MAX) ||
 800dc76:	4b47      	ldr	r3, [pc, #284]	@ (800dd94 <USBnoPD_StateMachineRun+0x264>)
 800dc78:	889b      	ldrh	r3, [r3, #4]
 800dc7a:	f241 527c 	movw	r2, #5500	@ 0x157c
 800dc7e:	4293      	cmp	r3, r2
 800dc80:	d805      	bhi.n	800dc8e <USBnoPD_StateMachineRun+0x15e>
           (USBnoPD_adc_converted_buffer[USBnoPD_ADC_Index_VPROV] < USBNOPD_VPROV_VOLTAGE_MIN))&&
 800dc82:	4b44      	ldr	r3, [pc, #272]	@ (800dd94 <USBnoPD_StateMachineRun+0x264>)
 800dc84:	891b      	ldrh	r3, [r3, #8]
      if (((USBnoPD_adc_converted_buffer[USBnoPD_ADC_Index_VBUSC]  > USBNOPD_VBUS_VOLTAGE_MAX) ||
 800dc86:	f241 1293 	movw	r2, #4499	@ 0x1193
 800dc8a:	4293      	cmp	r3, r2
 800dc8c:	d821      	bhi.n	800dcd2 <USBnoPD_StateMachineRun+0x1a2>
          (((USBnoPD_adc_converted_buffer[USBnoPD_ADC_Index_CC1] > USBNOPD_CC_VOLTAGE_MINRD) &&
 800dc8e:	4b41      	ldr	r3, [pc, #260]	@ (800dd94 <USBnoPD_StateMachineRun+0x264>)
 800dc90:	881b      	ldrh	r3, [r3, #0]
           (USBnoPD_adc_converted_buffer[USBnoPD_ADC_Index_VPROV] < USBNOPD_VPROV_VOLTAGE_MIN))&&
 800dc92:	f240 3252 	movw	r2, #850	@ 0x352
 800dc96:	4293      	cmp	r3, r2
 800dc98:	d905      	bls.n	800dca6 <USBnoPD_StateMachineRun+0x176>
            (USBnoPD_adc_converted_buffer[USBnoPD_ADC_Index_CC1] < USBNOPD_CC_VOLTAGE_MAXRD))||
 800dc9a:	4b3e      	ldr	r3, [pc, #248]	@ (800dd94 <USBnoPD_StateMachineRun+0x264>)
 800dc9c:	881b      	ldrh	r3, [r3, #0]
          (((USBnoPD_adc_converted_buffer[USBnoPD_ADC_Index_CC1] > USBNOPD_CC_VOLTAGE_MINRD) &&
 800dc9e:	f640 1291 	movw	r2, #2449	@ 0x991
 800dca2:	4293      	cmp	r3, r2
 800dca4:	d90b      	bls.n	800dcbe <USBnoPD_StateMachineRun+0x18e>
           ((USBnoPD_adc_converted_buffer[USBnoPD_ADC_Index_CC2] > USBNOPD_CC_VOLTAGE_MINRD) &&
 800dca6:	4b3b      	ldr	r3, [pc, #236]	@ (800dd94 <USBnoPD_StateMachineRun+0x264>)
 800dca8:	885b      	ldrh	r3, [r3, #2]
            (USBnoPD_adc_converted_buffer[USBnoPD_ADC_Index_CC1] < USBNOPD_CC_VOLTAGE_MAXRD))||
 800dcaa:	f240 3252 	movw	r2, #850	@ 0x352
 800dcae:	4293      	cmp	r3, r2
 800dcb0:	d90f      	bls.n	800dcd2 <USBnoPD_StateMachineRun+0x1a2>
            (USBnoPD_adc_converted_buffer[USBnoPD_ADC_Index_CC2] < USBNOPD_CC_VOLTAGE_MAXRD))))
 800dcb2:	4b38      	ldr	r3, [pc, #224]	@ (800dd94 <USBnoPD_StateMachineRun+0x264>)
 800dcb4:	885b      	ldrh	r3, [r3, #2]
           ((USBnoPD_adc_converted_buffer[USBnoPD_ADC_Index_CC2] > USBNOPD_CC_VOLTAGE_MINRD) &&
 800dcb6:	f640 1291 	movw	r2, #2449	@ 0x991
 800dcba:	4293      	cmp	r3, r2
 800dcbc:	d809      	bhi.n	800dcd2 <USBnoPD_StateMachineRun+0x1a2>
      {
        /* Cut VBUS */
        BSP_USBPD_PWR_VBUSOff(USBPD_PWR_TYPE_C_PORT_1);
 800dcbe:	2000      	movs	r0, #0
 800dcc0:	f000 fb46 	bl	800e350 <BSP_USBPD_PWR_VBUSOff>
        BSP_USBPD_PWR_VBUSDischargeOn(USBPD_PWR_TYPE_C_PORT_1);
 800dcc4:	2000      	movs	r0, #0
 800dcc6:	f000 fb6f 	bl	800e3a8 <BSP_USBPD_PWR_VBUSDischargeOn>

        /* Go to fault state */
        USBnoPD_State = USBnoPD_State_FAULT;
 800dcca:	4b31      	ldr	r3, [pc, #196]	@ (800dd90 <USBnoPD_StateMachineRun+0x260>)
 800dccc:	2205      	movs	r2, #5
 800dcce:	701a      	strb	r2, [r3, #0]
        TIM_Base_Start_IT();

        /* Go to detaching state */
        USBnoPD_State = USBnoPD_State_DETACHING;
      }
      break;
 800dcd0:	e093      	b.n	800ddfa <USBnoPD_StateMachineRun+0x2ca>
      else if (((USBnoPD_activeCC == USBnoPD_CC1) &&
 800dcd2:	4b32      	ldr	r3, [pc, #200]	@ (800dd9c <USBnoPD_StateMachineRun+0x26c>)
 800dcd4:	781b      	ldrb	r3, [r3, #0]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d105      	bne.n	800dce6 <USBnoPD_StateMachineRun+0x1b6>
                (USBnoPD_adc_converted_buffer[USBnoPD_ADC_Index_CC1] > USBNOPD_CC_VOLTAGE_MAXRD)) ||
 800dcda:	4b2e      	ldr	r3, [pc, #184]	@ (800dd94 <USBnoPD_StateMachineRun+0x264>)
 800dcdc:	881b      	ldrh	r3, [r3, #0]
      else if (((USBnoPD_activeCC == USBnoPD_CC1) &&
 800dcde:	f640 1292 	movw	r2, #2450	@ 0x992
 800dce2:	4293      	cmp	r3, r2
 800dce4:	d80a      	bhi.n	800dcfc <USBnoPD_StateMachineRun+0x1cc>
               ((USBnoPD_activeCC == USBnoPD_CC2) &&
 800dce6:	4b2d      	ldr	r3, [pc, #180]	@ (800dd9c <USBnoPD_StateMachineRun+0x26c>)
 800dce8:	781b      	ldrb	r3, [r3, #0]
                (USBnoPD_adc_converted_buffer[USBnoPD_ADC_Index_CC1] > USBNOPD_CC_VOLTAGE_MAXRD)) ||
 800dcea:	2b01      	cmp	r3, #1
 800dcec:	f040 8085 	bne.w	800ddfa <USBnoPD_StateMachineRun+0x2ca>
                (USBnoPD_adc_converted_buffer[USBnoPD_ADC_Index_CC2] > USBNOPD_CC_VOLTAGE_MAXRD)))
 800dcf0:	4b28      	ldr	r3, [pc, #160]	@ (800dd94 <USBnoPD_StateMachineRun+0x264>)
 800dcf2:	885b      	ldrh	r3, [r3, #2]
               ((USBnoPD_activeCC == USBnoPD_CC2) &&
 800dcf4:	f640 1292 	movw	r2, #2450	@ 0x992
 800dcf8:	4293      	cmp	r3, r2
 800dcfa:	d97e      	bls.n	800ddfa <USBnoPD_StateMachineRun+0x2ca>
        USBnoPD_debounce_counter = 0u;
 800dcfc:	4b26      	ldr	r3, [pc, #152]	@ (800dd98 <USBnoPD_StateMachineRun+0x268>)
 800dcfe:	2200      	movs	r2, #0
 800dd00:	801a      	strh	r2, [r3, #0]
        TIM_Base_Start_IT();
 800dd02:	f000 f95d 	bl	800dfc0 <TIM_Base_Start_IT>
        USBnoPD_State = USBnoPD_State_DETACHING;
 800dd06:	4b22      	ldr	r3, [pc, #136]	@ (800dd90 <USBnoPD_StateMachineRun+0x260>)
 800dd08:	2203      	movs	r2, #3
 800dd0a:	701a      	strb	r2, [r3, #0]
      break;
 800dd0c:	e075      	b.n	800ddfa <USBnoPD_StateMachineRun+0x2ca>

    case USBnoPD_State_DETACHING:     /* Detachment ongoing - debouncing */
      /* Detach abort */
      if (((USBnoPD_activeCC == USBnoPD_CC1) &&
 800dd0e:	4b23      	ldr	r3, [pc, #140]	@ (800dd9c <USBnoPD_StateMachineRun+0x26c>)
 800dd10:	781b      	ldrb	r3, [r3, #0]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d105      	bne.n	800dd22 <USBnoPD_StateMachineRun+0x1f2>
           (USBnoPD_adc_converted_buffer[USBnoPD_ADC_Index_CC1] < USBNOPD_CC_VOLTAGE_MAXRD)) ||
 800dd16:	4b1f      	ldr	r3, [pc, #124]	@ (800dd94 <USBnoPD_StateMachineRun+0x264>)
 800dd18:	881b      	ldrh	r3, [r3, #0]
      if (((USBnoPD_activeCC == USBnoPD_CC1) &&
 800dd1a:	f640 1291 	movw	r2, #2449	@ 0x991
 800dd1e:	4293      	cmp	r3, r2
 800dd20:	d909      	bls.n	800dd36 <USBnoPD_StateMachineRun+0x206>
          ((USBnoPD_activeCC == USBnoPD_CC2) &&
 800dd22:	4b1e      	ldr	r3, [pc, #120]	@ (800dd9c <USBnoPD_StateMachineRun+0x26c>)
 800dd24:	781b      	ldrb	r3, [r3, #0]
           (USBnoPD_adc_converted_buffer[USBnoPD_ADC_Index_CC1] < USBNOPD_CC_VOLTAGE_MAXRD)) ||
 800dd26:	2b01      	cmp	r3, #1
 800dd28:	d10e      	bne.n	800dd48 <USBnoPD_StateMachineRun+0x218>
           (USBnoPD_adc_converted_buffer[USBnoPD_ADC_Index_CC2] < USBNOPD_CC_VOLTAGE_MAXRD)))
 800dd2a:	4b1a      	ldr	r3, [pc, #104]	@ (800dd94 <USBnoPD_StateMachineRun+0x264>)
 800dd2c:	885b      	ldrh	r3, [r3, #2]
          ((USBnoPD_activeCC == USBnoPD_CC2) &&
 800dd2e:	f640 1291 	movw	r2, #2449	@ 0x991
 800dd32:	4293      	cmp	r3, r2
 800dd34:	d808      	bhi.n	800dd48 <USBnoPD_StateMachineRun+0x218>
      {
        /* Reset debouncing counter */
        USBnoPD_debounce_counter = 0u;
 800dd36:	4b18      	ldr	r3, [pc, #96]	@ (800dd98 <USBnoPD_StateMachineRun+0x268>)
 800dd38:	2200      	movs	r2, #0
 800dd3a:	801a      	strh	r2, [r3, #0]

        /* Stop the debouncing timer */
        TIM_Base_Stop_IT();
 800dd3c:	f000 f94a 	bl	800dfd4 <TIM_Base_Stop_IT>

        /* Go back to attached state */
        USBnoPD_State = USBnoPD_State_ATTACHED;
 800dd40:	4b13      	ldr	r3, [pc, #76]	@ (800dd90 <USBnoPD_StateMachineRun+0x260>)
 800dd42:	2202      	movs	r2, #2
 800dd44:	701a      	strb	r2, [r3, #0]
        BSP_USBPD_PWR_VBUSDischargeOn(USBPD_PWR_TYPE_C_PORT_1);

        /* Go to discharging state */
        USBnoPD_State = USBnoPD_State_DISCHARGING;
      }
      break;
 800dd46:	e05a      	b.n	800ddfe <USBnoPD_StateMachineRun+0x2ce>
      else if (USBnoPD_debounce_counter >= USBNOPD_DEBOUNCE_DETACH_TICKS)
 800dd48:	4b13      	ldr	r3, [pc, #76]	@ (800dd98 <USBnoPD_StateMachineRun+0x268>)
 800dd4a:	881b      	ldrh	r3, [r3, #0]
 800dd4c:	2b09      	cmp	r3, #9
 800dd4e:	d956      	bls.n	800ddfe <USBnoPD_StateMachineRun+0x2ce>
        USBnoPD_debounce_counter = 0u;
 800dd50:	4b11      	ldr	r3, [pc, #68]	@ (800dd98 <USBnoPD_StateMachineRun+0x268>)
 800dd52:	2200      	movs	r2, #0
 800dd54:	801a      	strh	r2, [r3, #0]
        TIM_Base_Stop_IT();
 800dd56:	f000 f93d 	bl	800dfd4 <TIM_Base_Stop_IT>
        BSP_USBPD_PWR_VBUSOff(USBPD_PWR_TYPE_C_PORT_1);
 800dd5a:	2000      	movs	r0, #0
 800dd5c:	f000 faf8 	bl	800e350 <BSP_USBPD_PWR_VBUSOff>
        BSP_USBPD_PWR_VBUSDischargeOn(USBPD_PWR_TYPE_C_PORT_1);
 800dd60:	2000      	movs	r0, #0
 800dd62:	f000 fb21 	bl	800e3a8 <BSP_USBPD_PWR_VBUSDischargeOn>
        USBnoPD_State = USBnoPD_State_DISCHARGING;
 800dd66:	4b0a      	ldr	r3, [pc, #40]	@ (800dd90 <USBnoPD_StateMachineRun+0x260>)
 800dd68:	2204      	movs	r2, #4
 800dd6a:	701a      	strb	r2, [r3, #0]
      break;
 800dd6c:	e047      	b.n	800ddfe <USBnoPD_StateMachineRun+0x2ce>

    case USBnoPD_State_DISCHARGING:   /* Vbus discharge after detach ongoing */
      /* If Vbus is considered measured as 0v */
      if (USBnoPD_adc_converted_buffer[USBnoPD_ADC_Index_VBUSC]  < USBNOPD_VSAFE_VOLTAGE_MAX)
 800dd6e:	4b09      	ldr	r3, [pc, #36]	@ (800dd94 <USBnoPD_StateMachineRun+0x264>)
 800dd70:	889b      	ldrh	r3, [r3, #4]
 800dd72:	2b63      	cmp	r3, #99	@ 0x63
 800dd74:	d845      	bhi.n	800de02 <USBnoPD_StateMachineRun+0x2d2>
      {
        /* Reset debouncing counter */
        USBnoPD_debounce_counter = 0u;
 800dd76:	4b08      	ldr	r3, [pc, #32]	@ (800dd98 <USBnoPD_StateMachineRun+0x268>)
 800dd78:	2200      	movs	r2, #0
 800dd7a:	801a      	strh	r2, [r3, #0]

        /* Stop the debouncing timer */
        TIM_Base_Stop_IT();
 800dd7c:	f000 f92a 	bl	800dfd4 <TIM_Base_Stop_IT>

        /* Stop Vbus discharge */
        BSP_USBPD_PWR_VBUSDischargeOff(USBPD_PWR_TYPE_C_PORT_1);
 800dd80:	2000      	movs	r0, #0
 800dd82:	f000 fb53 	bl	800e42c <BSP_USBPD_PWR_VBUSDischargeOff>

        /* Go to detached state */
        USBnoPD_State = USBnoPD_State_DETACHED;
 800dd86:	4b02      	ldr	r3, [pc, #8]	@ (800dd90 <USBnoPD_StateMachineRun+0x260>)
 800dd88:	2200      	movs	r2, #0
 800dd8a:	701a      	strb	r2, [r3, #0]
      }
      break;
 800dd8c:	e039      	b.n	800de02 <USBnoPD_StateMachineRun+0x2d2>
 800dd8e:	bf00      	nop
 800dd90:	24000484 	.word	0x24000484
 800dd94:	240004a0 	.word	0x240004a0
 800dd98:	240004aa 	.word	0x240004aa
 800dd9c:	240004ac 	.word	0x240004ac

    case USBnoPD_State_FAULT:         /* Hardware fault                  */
      /* In case of a fault, do nothing until a detach is detected and Vbus is at 0v */
      if ((((USBnoPD_activeCC == USBnoPD_CC1) &&
 800dda0:	4b1c      	ldr	r3, [pc, #112]	@ (800de14 <USBnoPD_StateMachineRun+0x2e4>)
 800dda2:	781b      	ldrb	r3, [r3, #0]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d105      	bne.n	800ddb4 <USBnoPD_StateMachineRun+0x284>
            (USBnoPD_adc_converted_buffer[USBnoPD_ADC_Index_CC1] > USBNOPD_CC_VOLTAGE_MINOPEN)) ||
 800dda8:	4b1b      	ldr	r3, [pc, #108]	@ (800de18 <USBnoPD_StateMachineRun+0x2e8>)
 800ddaa:	881b      	ldrh	r3, [r3, #0]
      if ((((USBnoPD_activeCC == USBnoPD_CC1) &&
 800ddac:	f640 22be 	movw	r2, #2750	@ 0xabe
 800ddb0:	4293      	cmp	r3, r2
 800ddb2:	d809      	bhi.n	800ddc8 <USBnoPD_StateMachineRun+0x298>
           ((USBnoPD_activeCC == USBnoPD_CC2) &&
 800ddb4:	4b17      	ldr	r3, [pc, #92]	@ (800de14 <USBnoPD_StateMachineRun+0x2e4>)
 800ddb6:	781b      	ldrb	r3, [r3, #0]
            (USBnoPD_adc_converted_buffer[USBnoPD_ADC_Index_CC1] > USBNOPD_CC_VOLTAGE_MINOPEN)) ||
 800ddb8:	2b01      	cmp	r3, #1
 800ddba:	d124      	bne.n	800de06 <USBnoPD_StateMachineRun+0x2d6>
            (USBnoPD_adc_converted_buffer[USBnoPD_ADC_Index_CC2] > USBNOPD_CC_VOLTAGE_MINOPEN))) &&
 800ddbc:	4b16      	ldr	r3, [pc, #88]	@ (800de18 <USBnoPD_StateMachineRun+0x2e8>)
 800ddbe:	885b      	ldrh	r3, [r3, #2]
           ((USBnoPD_activeCC == USBnoPD_CC2) &&
 800ddc0:	f640 22be 	movw	r2, #2750	@ 0xabe
 800ddc4:	4293      	cmp	r3, r2
 800ddc6:	d91e      	bls.n	800de06 <USBnoPD_StateMachineRun+0x2d6>
          (USBnoPD_adc_converted_buffer[USBnoPD_ADC_Index_VBUSC]  < USBNOPD_VSAFE_VOLTAGE_MAX))
 800ddc8:	4b13      	ldr	r3, [pc, #76]	@ (800de18 <USBnoPD_StateMachineRun+0x2e8>)
 800ddca:	889b      	ldrh	r3, [r3, #4]
            (USBnoPD_adc_converted_buffer[USBnoPD_ADC_Index_CC2] > USBNOPD_CC_VOLTAGE_MINOPEN))) &&
 800ddcc:	2b63      	cmp	r3, #99	@ 0x63
 800ddce:	d81a      	bhi.n	800de06 <USBnoPD_StateMachineRun+0x2d6>
      {
        /* Stop Vbus discharge */
        BSP_USBPD_PWR_VBUSDischargeOff(USBPD_PWR_TYPE_C_PORT_1);
 800ddd0:	2000      	movs	r0, #0
 800ddd2:	f000 fb2b 	bl	800e42c <BSP_USBPD_PWR_VBUSDischargeOff>

        /* Go to detached state */
        USBnoPD_State = USBnoPD_State_DETACHED;
 800ddd6:	4b11      	ldr	r3, [pc, #68]	@ (800de1c <USBnoPD_StateMachineRun+0x2ec>)
 800ddd8:	2200      	movs	r2, #0
 800ddda:	701a      	strb	r2, [r3, #0]
      }
      break;
 800dddc:	e013      	b.n	800de06 <USBnoPD_StateMachineRun+0x2d6>

  default:                            /* Should not happen               */
    /* Cut VBUS */
    BSP_USBPD_PWR_VBUSOff(USBPD_PWR_TYPE_C_PORT_1);
 800ddde:	2000      	movs	r0, #0
 800dde0:	f000 fab6 	bl	800e350 <BSP_USBPD_PWR_VBUSOff>
    BSP_USBPD_PWR_VBUSDischargeOn(USBPD_PWR_TYPE_C_PORT_1);
 800dde4:	2000      	movs	r0, #0
 800dde6:	f000 fadf 	bl	800e3a8 <BSP_USBPD_PWR_VBUSDischargeOn>

    /* Go to fault state */
    USBnoPD_State = USBnoPD_State_FAULT;
 800ddea:	4b0c      	ldr	r3, [pc, #48]	@ (800de1c <USBnoPD_StateMachineRun+0x2ec>)
 800ddec:	2205      	movs	r2, #5
 800ddee:	701a      	strb	r2, [r3, #0]
    break;
 800ddf0:	e00a      	b.n	800de08 <USBnoPD_StateMachineRun+0x2d8>
      break;
 800ddf2:	bf00      	nop
 800ddf4:	e008      	b.n	800de08 <USBnoPD_StateMachineRun+0x2d8>
      break;
 800ddf6:	bf00      	nop
 800ddf8:	e006      	b.n	800de08 <USBnoPD_StateMachineRun+0x2d8>
      break;
 800ddfa:	bf00      	nop
 800ddfc:	e004      	b.n	800de08 <USBnoPD_StateMachineRun+0x2d8>
      break;
 800ddfe:	bf00      	nop
 800de00:	e002      	b.n	800de08 <USBnoPD_StateMachineRun+0x2d8>
      break;
 800de02:	bf00      	nop
 800de04:	e000      	b.n	800de08 <USBnoPD_StateMachineRun+0x2d8>
      break;
 800de06:	bf00      	nop
  }
  /* 1ms delay between each state machine iterations */
  HAL_Delay(1);
 800de08:	2001      	movs	r0, #1
 800de0a:	f7f4 f827 	bl	8001e5c <HAL_Delay>
}
 800de0e:	bf00      	nop
 800de10:	bd80      	pop	{r7, pc}
 800de12:	bf00      	nop
 800de14:	240004ac 	.word	0x240004ac
 800de18:	240004a0 	.word	0x240004a0
 800de1c:	24000484 	.word	0x24000484

0800de20 <USBnoPD_TCPP0203_ConvertADCDataToVoltage>:
  * @param  Ra       value of Ra resistance
  * @param  Rb       value of Rb resistance
  * @retval analog voltage (unit: mV)
  */
static uint32_t USBnoPD_TCPP0203_ConvertADCDataToVoltage(uint32_t ADCData, uint32_t Ra, uint32_t Rb)
{
 800de20:	b480      	push	{r7}
 800de22:	b087      	sub	sp, #28
 800de24:	af00      	add	r7, sp, #0
 800de26:	60f8      	str	r0, [r7, #12]
 800de28:	60b9      	str	r1, [r7, #8]
 800de2a:	607a      	str	r2, [r7, #4]
  uint32_t voltage;
  uint32_t vadc;

  /* Convert ADC RAW data to voltage */
  vadc = (ADCData * VDD_VALUE) / ADC_FULL_SCALE;
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	f640 42e4 	movw	r2, #3300	@ 0xce4
 800de32:	fb03 f202 	mul.w	r2, r3, r2
 800de36:	4b14      	ldr	r3, [pc, #80]	@ (800de88 <USBnoPD_TCPP0203_ConvertADCDataToVoltage+0x68>)
 800de38:	fba3 1302 	umull	r1, r3, r3, r2
 800de3c:	1ad2      	subs	r2, r2, r3
 800de3e:	0852      	lsrs	r2, r2, #1
 800de40:	4413      	add	r3, r2
 800de42:	0adb      	lsrs	r3, r3, #11
 800de44:	613b      	str	r3, [r7, #16]

  /* If no Ra or Rb are defined, return vadc directly */
  if ((Ra == 0u) && (Rb == 0u))
 800de46:	68bb      	ldr	r3, [r7, #8]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d105      	bne.n	800de58 <USBnoPD_TCPP0203_ConvertADCDataToVoltage+0x38>
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d102      	bne.n	800de58 <USBnoPD_TCPP0203_ConvertADCDataToVoltage+0x38>
  {
    voltage = vadc;
 800de52:	693b      	ldr	r3, [r7, #16]
 800de54:	617b      	str	r3, [r7, #20]
 800de56:	e00f      	b.n	800de78 <USBnoPD_TCPP0203_ConvertADCDataToVoltage+0x58>
  }
  else
  {
    /* Avoid dividing by zero */
    if (Rb == 0u)
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d102      	bne.n	800de64 <USBnoPD_TCPP0203_ConvertADCDataToVoltage+0x44>
    {
      voltage = 0u;
 800de5e:	2300      	movs	r3, #0
 800de60:	617b      	str	r3, [r7, #20]
 800de62:	e009      	b.n	800de78 <USBnoPD_TCPP0203_ConvertADCDataToVoltage+0x58>
    }
    else
    {
      /* Apply voltage divider */
      voltage = vadc * (Ra + Rb) / Rb;
 800de64:	68ba      	ldr	r2, [r7, #8]
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	4413      	add	r3, r2
 800de6a:	693a      	ldr	r2, [r7, #16]
 800de6c:	fb03 f202 	mul.w	r2, r3, r2
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	fbb2 f3f3 	udiv	r3, r2, r3
 800de76:	617b      	str	r3, [r7, #20]
    }
  }
  return voltage;
 800de78:	697b      	ldr	r3, [r7, #20]
}
 800de7a:	4618      	mov	r0, r3
 800de7c:	371c      	adds	r7, #28
 800de7e:	46bd      	mov	sp, r7
 800de80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de84:	4770      	bx	lr
 800de86:	bf00      	nop
 800de88:	00100101 	.word	0x00100101

0800de8c <USBnoPD_TCPP0203_ConvertADCDataToCurrent>:
  * @param  Ga       value of TCPP0X Iana gain in V/V
  * @param  Rs       value of shunt resistor in milliohm
  * @retval VBUS analog current (unit: mA)
  */
static int32_t USBnoPD_TCPP0203_ConvertADCDataToCurrent(uint32_t ADCData, uint32_t Ga, uint32_t Rs)
{
 800de8c:	b480      	push	{r7}
 800de8e:	b087      	sub	sp, #28
 800de90:	af00      	add	r7, sp, #0
 800de92:	60f8      	str	r0, [r7, #12]
 800de94:	60b9      	str	r1, [r7, #8]
 800de96:	607a      	str	r2, [r7, #4]
  int32_t current;
  uint32_t vadc;

  /* Avoid dividing by zero */
  if ((Ga == 0u) || (Rs == 0u))
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d002      	beq.n	800dea4 <USBnoPD_TCPP0203_ConvertADCDataToCurrent+0x18>
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d102      	bne.n	800deaa <USBnoPD_TCPP0203_ConvertADCDataToCurrent+0x1e>
  {
    current = 0u;
 800dea4:	2300      	movs	r3, #0
 800dea6:	617b      	str	r3, [r7, #20]
 800dea8:	e018      	b.n	800dedc <USBnoPD_TCPP0203_ConvertADCDataToCurrent+0x50>
  }
  else
  {
    vadc = (ADCData * VDD_VALUE) / ADC_FULL_SCALE;
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	f640 42e4 	movw	r2, #3300	@ 0xce4
 800deb0:	fb03 f202 	mul.w	r2, r3, r2
 800deb4:	4b0d      	ldr	r3, [pc, #52]	@ (800deec <USBnoPD_TCPP0203_ConvertADCDataToCurrent+0x60>)
 800deb6:	fba3 1302 	umull	r1, r3, r3, r2
 800deba:	1ad2      	subs	r2, r2, r3
 800debc:	0852      	lsrs	r2, r2, #1
 800debe:	4413      	add	r3, r2
 800dec0:	0adb      	lsrs	r3, r3, #11
 800dec2:	613b      	str	r3, [r7, #16]
    current = (int32_t)((vadc * 1000u) / (Ga * Rs));
 800dec4:	693b      	ldr	r3, [r7, #16]
 800dec6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800deca:	fb03 f202 	mul.w	r2, r3, r2
 800dece:	68bb      	ldr	r3, [r7, #8]
 800ded0:	6879      	ldr	r1, [r7, #4]
 800ded2:	fb01 f303 	mul.w	r3, r1, r3
 800ded6:	fbb2 f3f3 	udiv	r3, r2, r3
 800deda:	617b      	str	r3, [r7, #20]
  }

  return current;
 800dedc:	697b      	ldr	r3, [r7, #20]
}
 800dede:	4618      	mov	r0, r3
 800dee0:	371c      	adds	r7, #28
 800dee2:	46bd      	mov	sp, r7
 800dee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee8:	4770      	bx	lr
 800deea:	bf00      	nop
 800deec:	00100101 	.word	0x00100101

0800def0 <USBnoPD_ProcessADC>:
  * @brief  Process the ADC values and update USBnoPD_adc_converted_buffer with measured values.
  * @param  none
  * @retval none
  */
void USBnoPD_ProcessADC(void)
{
 800def0:	b580      	push	{r7, lr}
 800def2:	b082      	sub	sp, #8
 800def4:	af00      	add	r7, sp, #0
  /* Perform ADC Filtering */
  for (uint8_t i = 0u; i < USBNOPD_ADC_USED_CHANNELS; i++)
 800def6:	2300      	movs	r3, #0
 800def8:	71fb      	strb	r3, [r7, #7]
 800defa:	e012      	b.n	800df22 <USBnoPD_ProcessADC+0x32>
  {
    USBnoPD_adc_buffer_filtered[i] = (USBnoPD_adc_buffer_filtered[i] + USBnoPD_adc_buffer[i]) >> 1u;
 800defc:	79fb      	ldrb	r3, [r7, #7]
 800defe:	4a28      	ldr	r2, [pc, #160]	@ (800dfa0 <USBnoPD_ProcessADC+0xb0>)
 800df00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800df04:	4619      	mov	r1, r3
 800df06:	79fb      	ldrb	r3, [r7, #7]
 800df08:	4a26      	ldr	r2, [pc, #152]	@ (800dfa4 <USBnoPD_ProcessADC+0xb4>)
 800df0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800df0e:	440b      	add	r3, r1
 800df10:	105a      	asrs	r2, r3, #1
 800df12:	79fb      	ldrb	r3, [r7, #7]
 800df14:	b291      	uxth	r1, r2
 800df16:	4a22      	ldr	r2, [pc, #136]	@ (800dfa0 <USBnoPD_ProcessADC+0xb0>)
 800df18:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (uint8_t i = 0u; i < USBNOPD_ADC_USED_CHANNELS; i++)
 800df1c:	79fb      	ldrb	r3, [r7, #7]
 800df1e:	3301      	adds	r3, #1
 800df20:	71fb      	strb	r3, [r7, #7]
 800df22:	79fb      	ldrb	r3, [r7, #7]
 800df24:	2b04      	cmp	r3, #4
 800df26:	d9e9      	bls.n	800defc <USBnoPD_ProcessADC+0xc>
  }
  /* Update the voltage buffer by converting the filtered values */
  USBnoPD_adc_converted_buffer[USBnoPD_ADC_Index_CC1] =
    USBnoPD_TCPP0203_ConvertADCDataToVoltage(USBnoPD_adc_buffer_filtered[USBnoPD_ADC_Index_CC1],USBNOPD_SRC1M1_NORA,USBNOPD_SRC1M1_NORB);
 800df28:	4b1d      	ldr	r3, [pc, #116]	@ (800dfa0 <USBnoPD_ProcessADC+0xb0>)
 800df2a:	881b      	ldrh	r3, [r3, #0]
 800df2c:	2200      	movs	r2, #0
 800df2e:	2100      	movs	r1, #0
 800df30:	4618      	mov	r0, r3
 800df32:	f7ff ff75 	bl	800de20 <USBnoPD_TCPP0203_ConvertADCDataToVoltage>
 800df36:	4603      	mov	r3, r0
  USBnoPD_adc_converted_buffer[USBnoPD_ADC_Index_CC1] =
 800df38:	b29a      	uxth	r2, r3
 800df3a:	4b1b      	ldr	r3, [pc, #108]	@ (800dfa8 <USBnoPD_ProcessADC+0xb8>)
 800df3c:	801a      	strh	r2, [r3, #0]
  USBnoPD_adc_converted_buffer[USBnoPD_ADC_Index_CC2] =
    USBnoPD_TCPP0203_ConvertADCDataToVoltage(USBnoPD_adc_buffer_filtered[USBnoPD_ADC_Index_CC2],USBNOPD_SRC1M1_NORA,USBNOPD_SRC1M1_NORB);
 800df3e:	4b18      	ldr	r3, [pc, #96]	@ (800dfa0 <USBnoPD_ProcessADC+0xb0>)
 800df40:	885b      	ldrh	r3, [r3, #2]
 800df42:	2200      	movs	r2, #0
 800df44:	2100      	movs	r1, #0
 800df46:	4618      	mov	r0, r3
 800df48:	f7ff ff6a 	bl	800de20 <USBnoPD_TCPP0203_ConvertADCDataToVoltage>
 800df4c:	4603      	mov	r3, r0
  USBnoPD_adc_converted_buffer[USBnoPD_ADC_Index_CC2] =
 800df4e:	b29a      	uxth	r2, r3
 800df50:	4b15      	ldr	r3, [pc, #84]	@ (800dfa8 <USBnoPD_ProcessADC+0xb8>)
 800df52:	805a      	strh	r2, [r3, #2]
  USBnoPD_adc_converted_buffer[USBnoPD_ADC_Index_VBUSC] =
    USBnoPD_TCPP0203_ConvertADCDataToVoltage(USBnoPD_adc_buffer_filtered[USBnoPD_ADC_Index_VBUSC],USBPD_PWR_VSENSE_RA,USBPD_PWR_VSENSE_RB);
 800df54:	4b12      	ldr	r3, [pc, #72]	@ (800dfa0 <USBnoPD_ProcessADC+0xb0>)
 800df56:	889b      	ldrh	r3, [r3, #4]
 800df58:	2228      	movs	r2, #40	@ 0x28
 800df5a:	21c8      	movs	r1, #200	@ 0xc8
 800df5c:	4618      	mov	r0, r3
 800df5e:	f7ff ff5f 	bl	800de20 <USBnoPD_TCPP0203_ConvertADCDataToVoltage>
 800df62:	4603      	mov	r3, r0
  USBnoPD_adc_converted_buffer[USBnoPD_ADC_Index_VBUSC] =
 800df64:	b29a      	uxth	r2, r3
 800df66:	4b10      	ldr	r3, [pc, #64]	@ (800dfa8 <USBnoPD_ProcessADC+0xb8>)
 800df68:	809a      	strh	r2, [r3, #4]
  USBnoPD_adc_converted_buffer[USBnoPD_ADC_Index_ISENSE] =
    USBnoPD_TCPP0203_ConvertADCDataToCurrent(USBnoPD_adc_buffer_filtered[USBnoPD_ADC_Index_ISENSE],USBPD_PWR_ISENSE_GA,USBPD_PWR_ISENSE_RS);
 800df6a:	4b0d      	ldr	r3, [pc, #52]	@ (800dfa0 <USBnoPD_ProcessADC+0xb0>)
 800df6c:	88db      	ldrh	r3, [r3, #6]
 800df6e:	2207      	movs	r2, #7
 800df70:	212a      	movs	r1, #42	@ 0x2a
 800df72:	4618      	mov	r0, r3
 800df74:	f7ff ff8a 	bl	800de8c <USBnoPD_TCPP0203_ConvertADCDataToCurrent>
 800df78:	4603      	mov	r3, r0
  USBnoPD_adc_converted_buffer[USBnoPD_ADC_Index_ISENSE] =
 800df7a:	b29a      	uxth	r2, r3
 800df7c:	4b0a      	ldr	r3, [pc, #40]	@ (800dfa8 <USBnoPD_ProcessADC+0xb8>)
 800df7e:	80da      	strh	r2, [r3, #6]
  USBnoPD_adc_converted_buffer[USBnoPD_ADC_Index_VPROV] =
    USBnoPD_TCPP0203_ConvertADCDataToVoltage(USBnoPD_adc_buffer_filtered[USBnoPD_ADC_Index_VPROV],USBPD_PWR_VSENSE_RA,USBPD_PWR_VSENSE_RB);
 800df80:	4b07      	ldr	r3, [pc, #28]	@ (800dfa0 <USBnoPD_ProcessADC+0xb0>)
 800df82:	891b      	ldrh	r3, [r3, #8]
 800df84:	2228      	movs	r2, #40	@ 0x28
 800df86:	21c8      	movs	r1, #200	@ 0xc8
 800df88:	4618      	mov	r0, r3
 800df8a:	f7ff ff49 	bl	800de20 <USBnoPD_TCPP0203_ConvertADCDataToVoltage>
 800df8e:	4603      	mov	r3, r0
  USBnoPD_adc_converted_buffer[USBnoPD_ADC_Index_VPROV] =
 800df90:	b29a      	uxth	r2, r3
 800df92:	4b05      	ldr	r3, [pc, #20]	@ (800dfa8 <USBnoPD_ProcessADC+0xb8>)
 800df94:	811a      	strh	r2, [r3, #8]
}
 800df96:	bf00      	nop
 800df98:	3708      	adds	r7, #8
 800df9a:	46bd      	mov	sp, r7
 800df9c:	bd80      	pop	{r7, pc}
 800df9e:	bf00      	nop
 800dfa0:	24000494 	.word	0x24000494
 800dfa4:	24000488 	.word	0x24000488
 800dfa8:	240004a0 	.word	0x240004a0

0800dfac <HAL_ADC_ConvCpltCallback>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b082      	sub	sp, #8
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
  USBnoPD_ProcessADC();
 800dfb4:	f7ff ff9c 	bl	800def0 <USBnoPD_ProcessADC>
}
 800dfb8:	bf00      	nop
 800dfba:	3708      	adds	r7, #8
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	bd80      	pop	{r7, pc}

0800dfc0 <TIM_Base_Start_IT>:
#endif

extern TIM_HandleTypeDef htim1;

void TIM_Base_Start_IT()
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	af00      	add	r7, sp, #0
  HAL_TIM_Base_Start_IT(&htim1);
 800dfc4:	4802      	ldr	r0, [pc, #8]	@ (800dfd0 <TIM_Base_Start_IT+0x10>)
 800dfc6:	f7fb fbd9 	bl	800977c <HAL_TIM_Base_Start_IT>
}
 800dfca:	bf00      	nop
 800dfcc:	bd80      	pop	{r7, pc}
 800dfce:	bf00      	nop
 800dfd0:	2400039c 	.word	0x2400039c

0800dfd4 <TIM_Base_Stop_IT>:

void TIM_Base_Stop_IT()
{
 800dfd4:	b580      	push	{r7, lr}
 800dfd6:	af00      	add	r7, sp, #0
  HAL_TIM_Base_Stop_IT(&htim1);
 800dfd8:	4802      	ldr	r0, [pc, #8]	@ (800dfe4 <TIM_Base_Stop_IT+0x10>)
 800dfda:	f7fb fc45 	bl	8009868 <HAL_TIM_Base_Stop_IT>
}
 800dfde:	bf00      	nop
 800dfe0:	bd80      	pop	{r7, pc}
 800dfe2:	bf00      	nop
 800dfe4:	2400039c 	.word	0x2400039c

0800dfe8 <BSP_USBPD_PWR_Init>:
  * @brief  Global initialization of PWR resource used by USB-PD
  * @param  PortNum Type-C port identifier
  * @retval BSP status
  */
int32_t BSP_USBPD_PWR_Init(uint32_t PortNum)
{
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b084      	sub	sp, #16
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800dff0:	2300      	movs	r3, #0
 800dff2:	60fb      	str	r3, [r7, #12]

  /* Check if instance is valid */
  if (PortNum >= USBPD_PWR_INSTANCES_NBR)
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d003      	beq.n	800e002 <BSP_USBPD_PWR_Init+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800dffa:	f06f 0301 	mvn.w	r3, #1
 800dffe:	60fb      	str	r3, [r7, #12]
 800e000:	e053      	b.n	800e0aa <BSP_USBPD_PWR_Init+0xc2>
  }
  else
  {
    BSP_USBPD_PWR_TRACE(PortNum, "-- BSP_USBPD_PWR_Init --");

    if (USBPD_PWR_Port_Status[PortNum].IsInitialized == 0U)
 800e002:	492c      	ldr	r1, [pc, #176]	@ (800e0b4 <BSP_USBPD_PWR_Init+0xcc>)
 800e004:	687a      	ldr	r2, [r7, #4]
 800e006:	4613      	mov	r3, r2
 800e008:	005b      	lsls	r3, r3, #1
 800e00a:	4413      	add	r3, r2
 800e00c:	009b      	lsls	r3, r3, #2
 800e00e:	440b      	add	r3, r1
 800e010:	781b      	ldrb	r3, [r3, #0]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d149      	bne.n	800e0aa <BSP_USBPD_PWR_Init+0xc2>
    {
      /* Initialisation according to HW configuration type of port */
      switch (USBPD_PWR_Port_Configs[PortNum].Type)
 800e016:	4a28      	ldr	r2, [pc, #160]	@ (800e0b8 <BSP_USBPD_PWR_Init+0xd0>)
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e01e:	3b02      	subs	r3, #2
 800e020:	2b01      	cmp	r3, #1
 800e022:	d832      	bhi.n	800e08a <BSP_USBPD_PWR_Init+0xa2>
      {
        case USBPD_PWR_HW_CONFIG_TYPE_TCPP02:
        case USBPD_PWR_HW_CONFIG_TYPE_TCPP03:

          USBPD_PWR_Port_Status[PortNum].PwrRole = POWER_ROLE_SOURCE;
 800e024:	4923      	ldr	r1, [pc, #140]	@ (800e0b4 <BSP_USBPD_PWR_Init+0xcc>)
 800e026:	687a      	ldr	r2, [r7, #4]
 800e028:	4613      	mov	r3, r2
 800e02a:	005b      	lsls	r3, r3, #1
 800e02c:	4413      	add	r3, r2
 800e02e:	009b      	lsls	r3, r3, #2
 800e030:	440b      	add	r3, r1
 800e032:	3302      	adds	r3, #2
 800e034:	2200      	movs	r2, #0
 800e036:	701a      	strb	r2, [r3, #0]

          /* Set default Power Mode to Hibernate */
          USBPD_PWR_Port_Status[PortNum].PwrSavingMode = USBPD_PWR_MODE_HIBERNATE;
 800e038:	491e      	ldr	r1, [pc, #120]	@ (800e0b4 <BSP_USBPD_PWR_Init+0xcc>)
 800e03a:	687a      	ldr	r2, [r7, #4]
 800e03c:	4613      	mov	r3, r2
 800e03e:	005b      	lsls	r3, r3, #1
 800e040:	4413      	add	r3, r2
 800e042:	009b      	lsls	r3, r3, #2
 800e044:	440b      	add	r3, r1
 800e046:	3303      	adds	r3, #3
 800e048:	2201      	movs	r2, #1
 800e04a:	701a      	strb	r2, [r3, #0]

          /* Reset port callback for VBUS detection event */
          USBPD_PWR_Port_Status[PortNum].VBUSDetectCallback = NULL;
 800e04c:	4919      	ldr	r1, [pc, #100]	@ (800e0b4 <BSP_USBPD_PWR_Init+0xcc>)
 800e04e:	687a      	ldr	r2, [r7, #4]
 800e050:	4613      	mov	r3, r2
 800e052:	005b      	lsls	r3, r3, #1
 800e054:	4413      	add	r3, r2
 800e056:	009b      	lsls	r3, r3, #2
 800e058:	440b      	add	r3, r1
 800e05a:	3308      	adds	r3, #8
 800e05c:	2200      	movs	r2, #0
 800e05e:	601a      	str	r2, [r3, #0]

          /* Reset last detected fault Tick */
          USBPD_PWR_Port_Status[PortNum].LastFaultTick = 0;
 800e060:	4914      	ldr	r1, [pc, #80]	@ (800e0b4 <BSP_USBPD_PWR_Init+0xcc>)
 800e062:	687a      	ldr	r2, [r7, #4]
 800e064:	4613      	mov	r3, r2
 800e066:	005b      	lsls	r3, r3, #1
 800e068:	4413      	add	r3, r2
 800e06a:	009b      	lsls	r3, r3, #2
 800e06c:	440b      	add	r3, r1
 800e06e:	3304      	adds	r3, #4
 800e070:	2200      	movs	r2, #0
 800e072:	601a      	str	r2, [r3, #0]

          /* Initialize required BUS for communication */
          ret = PWR_TCPP0203_BUSConfigInit(PortNum, USBPD_PWR_Port_Configs[PortNum].Address);
 800e074:	4a10      	ldr	r2, [pc, #64]	@ (800e0b8 <BSP_USBPD_PWR_Init+0xd0>)
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	005b      	lsls	r3, r3, #1
 800e07a:	4413      	add	r3, r2
 800e07c:	785b      	ldrb	r3, [r3, #1]
 800e07e:	4619      	mov	r1, r3
 800e080:	6878      	ldr	r0, [r7, #4]
 800e082:	f000 f9ff 	bl	800e484 <PWR_TCPP0203_BUSConfigInit>
 800e086:	60f8      	str	r0, [r7, #12]
          break;
 800e088:	e003      	b.n	800e092 <BSP_USBPD_PWR_Init+0xaa>

        case USBPD_PWR_HW_CONFIG_TYPE_DEFAULT:
        case USBPD_PWR_HW_CONFIG_TYPE_TCPP01:
        default:
          ret = BSP_ERROR_WRONG_PARAM;
 800e08a:	f06f 0301 	mvn.w	r3, #1
 800e08e:	60fb      	str	r3, [r7, #12]
          break;
 800e090:	bf00      	nop
      }

      if (ret == BSP_ERROR_NONE)
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d108      	bne.n	800e0aa <BSP_USBPD_PWR_Init+0xc2>
      {
        /* Set Initialisation flag */
        USBPD_PWR_Port_Status[PortNum].IsInitialized = 1U;
 800e098:	4906      	ldr	r1, [pc, #24]	@ (800e0b4 <BSP_USBPD_PWR_Init+0xcc>)
 800e09a:	687a      	ldr	r2, [r7, #4]
 800e09c:	4613      	mov	r3, r2
 800e09e:	005b      	lsls	r3, r3, #1
 800e0a0:	4413      	add	r3, r2
 800e0a2:	009b      	lsls	r3, r3, #2
 800e0a4:	440b      	add	r3, r1
 800e0a6:	2201      	movs	r2, #1
 800e0a8:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  return ret;
 800e0aa:	68fb      	ldr	r3, [r7, #12]
}
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	3710      	adds	r7, #16
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	bd80      	pop	{r7, pc}
 800e0b4:	240004b0 	.word	0x240004b0
 800e0b8:	24000094 	.word	0x24000094

0800e0bc <BSP_USBPD_PWR_SetPowerMode>:
  *         @arg @ref USBPD_PWR_MODE_LOWPOWER
  *         @arg @ref USBPD_PWR_MODE_NORMAL
  * @retval BSP status
  */
int32_t BSP_USBPD_PWR_SetPowerMode(uint32_t PortNum, USBPD_PWR_PowerModeTypeDef PwrMode)
{
 800e0bc:	b590      	push	{r4, r7, lr}
 800e0be:	b085      	sub	sp, #20
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
 800e0c4:	460b      	mov	r3, r1
 800e0c6:	70fb      	strb	r3, [r7, #3]
  uint8_t flg_reg;
  int32_t ret = BSP_ERROR_NONE;
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	60fb      	str	r3, [r7, #12]

  /* Check if instance is valid */
  if (PortNum >= USBPD_PWR_INSTANCES_NBR)
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d003      	beq.n	800e0da <BSP_USBPD_PWR_SetPowerMode+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800e0d2:	f06f 0301 	mvn.w	r3, #1
 800e0d6:	60fb      	str	r3, [r7, #12]
 800e0d8:	e0c0      	b.n	800e25c <BSP_USBPD_PWR_SetPowerMode+0x1a0>
  else
  {
    BSP_USBPD_PWR_TRACE(PortNum, "-- BSP_USBPD_PWR_SetPowerMode --");

    /* Evaluate requested Power config for port */
    switch (PwrMode)
 800e0da:	78fb      	ldrb	r3, [r7, #3]
 800e0dc:	2b03      	cmp	r3, #3
 800e0de:	f200 80a8 	bhi.w	800e232 <BSP_USBPD_PWR_SetPowerMode+0x176>
 800e0e2:	a201      	add	r2, pc, #4	@ (adr r2, 800e0e8 <BSP_USBPD_PWR_SetPowerMode+0x2c>)
 800e0e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0e8:	0800e0f9 	.word	0x0800e0f9
 800e0ec:	0800e125 	.word	0x0800e125
 800e0f0:	0800e1db 	.word	0x0800e1db
 800e0f4:	0800e207 	.word	0x0800e207
    {
      case USBPD_PWR_MODE_OFF:
        /* Port should enter OFF mode : Reset TCPP0203 Reg0 */
        if (USBPD_PWR_PortCompDrv[PortNum]->Reset(&USBPD_PWR_PortCompObj[PortNum]) != TCPP0203_OK)
 800e0f8:	4a5b      	ldr	r2, [pc, #364]	@ (800e268 <BSP_USBPD_PWR_SetPowerMode+0x1ac>)
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e100:	6899      	ldr	r1, [r3, #8]
 800e102:	687a      	ldr	r2, [r7, #4]
 800e104:	4613      	mov	r3, r2
 800e106:	009b      	lsls	r3, r3, #2
 800e108:	4413      	add	r3, r2
 800e10a:	00db      	lsls	r3, r3, #3
 800e10c:	4a57      	ldr	r2, [pc, #348]	@ (800e26c <BSP_USBPD_PWR_SetPowerMode+0x1b0>)
 800e10e:	4413      	add	r3, r2
 800e110:	4618      	mov	r0, r3
 800e112:	4788      	blx	r1
 800e114:	4603      	mov	r3, r0
 800e116:	2b00      	cmp	r3, #0
 800e118:	f000 808f 	beq.w	800e23a <BSP_USBPD_PWR_SetPowerMode+0x17e>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800e11c:	f06f 0304 	mvn.w	r3, #4
 800e120:	60fb      	str	r3, [r7, #12]
        }
        break;
 800e122:	e08a      	b.n	800e23a <BSP_USBPD_PWR_SetPowerMode+0x17e>
             - Dead Batteries Enabled,
             - Gate Driver Consumer controlled by I2C, Gate Driver Provider OFF
             - waiting for VBUS_OK in FLGn (interrupt)
        */
        BSP_USBPD_PWR_TRACE(PortNum, "-- Hibernate --");
        if (USBPD_PWR_PortCompDrv[PortNum]->SetPowerMode(&USBPD_PWR_PortCompObj[PortNum],
 800e124:	4a50      	ldr	r2, [pc, #320]	@ (800e268 <BSP_USBPD_PWR_SetPowerMode+0x1ac>)
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e12c:	699c      	ldr	r4, [r3, #24]
 800e12e:	687a      	ldr	r2, [r7, #4]
 800e130:	4613      	mov	r3, r2
 800e132:	009b      	lsls	r3, r3, #2
 800e134:	4413      	add	r3, r2
 800e136:	00db      	lsls	r3, r3, #3
 800e138:	4a4c      	ldr	r2, [pc, #304]	@ (800e26c <BSP_USBPD_PWR_SetPowerMode+0x1b0>)
 800e13a:	4413      	add	r3, r2
 800e13c:	2100      	movs	r1, #0
 800e13e:	4618      	mov	r0, r3
 800e140:	47a0      	blx	r4
 800e142:	4603      	mov	r3, r0
 800e144:	2b00      	cmp	r3, #0
 800e146:	d002      	beq.n	800e14e <BSP_USBPD_PWR_SetPowerMode+0x92>
                                                         TCPP0203_POWER_MODE_HIBERNATE) != TCPP0203_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800e148:	f06f 0304 	mvn.w	r3, #4
 800e14c:	60fb      	str	r3, [r7, #12]
        }

        /* Check if VBUS is present (in case of SNK VBUS powered device) */
        /* Read Flags register (FLGn) */
        if (USBPD_PWR_PortCompDrv[PortNum]->ReadFlagRegister(&USBPD_PWR_PortCompObj[PortNum], &flg_reg) == TCPP0203_OK)
 800e14e:	4a46      	ldr	r2, [pc, #280]	@ (800e268 <BSP_USBPD_PWR_SetPowerMode+0x1ac>)
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e156:	6e5c      	ldr	r4, [r3, #100]	@ 0x64
 800e158:	687a      	ldr	r2, [r7, #4]
 800e15a:	4613      	mov	r3, r2
 800e15c:	009b      	lsls	r3, r3, #2
 800e15e:	4413      	add	r3, r2
 800e160:	00db      	lsls	r3, r3, #3
 800e162:	4a42      	ldr	r2, [pc, #264]	@ (800e26c <BSP_USBPD_PWR_SetPowerMode+0x1b0>)
 800e164:	4413      	add	r3, r2
 800e166:	f107 020b 	add.w	r2, r7, #11
 800e16a:	4611      	mov	r1, r2
 800e16c:	4618      	mov	r0, r3
 800e16e:	47a0      	blx	r4
 800e170:	4603      	mov	r3, r0
 800e172:	2b00      	cmp	r3, #0
 800e174:	d163      	bne.n	800e23e <BSP_USBPD_PWR_SetPowerMode+0x182>
        {
          /* If FLGn has been set to 0 in LOW POWER or HIBERNATE mode,
             it is expected that a VBUS_OK condition is detected.
             In this case, if any, vBus Detection callback could be called */
          if ((flg_reg & TCPP0203_FLAG_VBUS_OK_SET) == TCPP0203_FLAG_VBUS_OK_SET)
 800e176:	7afb      	ldrb	r3, [r7, #11]
 800e178:	f003 0320 	and.w	r3, r3, #32
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d05e      	beq.n	800e23e <BSP_USBPD_PWR_SetPowerMode+0x182>
          {
            if (USBPD_PWR_Port_Status[PortNum].VBUSDetectCallback != NULL)
 800e180:	493b      	ldr	r1, [pc, #236]	@ (800e270 <BSP_USBPD_PWR_SetPowerMode+0x1b4>)
 800e182:	687a      	ldr	r2, [r7, #4]
 800e184:	4613      	mov	r3, r2
 800e186:	005b      	lsls	r3, r3, #1
 800e188:	4413      	add	r3, r2
 800e18a:	009b      	lsls	r3, r3, #2
 800e18c:	440b      	add	r3, r1
 800e18e:	3308      	adds	r3, #8
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d053      	beq.n	800e23e <BSP_USBPD_PWR_SetPowerMode+0x182>
            {
              /* In case of TCPP03 in Hibernate Mode (SNK config),
                 Mode is set to Low power to enable TCPP03 behavior on CC lines */
              /* Switch to Low Power mode */
              BSP_USBPD_PWR_TRACE(PortNum, "-- Low Power --");
              if (USBPD_PWR_PortCompDrv[PortNum]->SetPowerMode(&USBPD_PWR_PortCompObj[PortNum],
 800e196:	4a34      	ldr	r2, [pc, #208]	@ (800e268 <BSP_USBPD_PWR_SetPowerMode+0x1ac>)
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e19e:	699c      	ldr	r4, [r3, #24]
 800e1a0:	687a      	ldr	r2, [r7, #4]
 800e1a2:	4613      	mov	r3, r2
 800e1a4:	009b      	lsls	r3, r3, #2
 800e1a6:	4413      	add	r3, r2
 800e1a8:	00db      	lsls	r3, r3, #3
 800e1aa:	4a30      	ldr	r2, [pc, #192]	@ (800e26c <BSP_USBPD_PWR_SetPowerMode+0x1b0>)
 800e1ac:	4413      	add	r3, r2
 800e1ae:	2120      	movs	r1, #32
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	47a0      	blx	r4
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d002      	beq.n	800e1c0 <BSP_USBPD_PWR_SetPowerMode+0x104>
                                                               TCPP0203_POWER_MODE_LOWPOWER) != TCPP0203_OK)
              {
                ret = BSP_ERROR_COMPONENT_FAILURE;
 800e1ba:	f06f 0304 	mvn.w	r3, #4
 800e1be:	60fb      	str	r3, [r7, #12]
              }

              USBPD_PWR_Port_Status[PortNum].VBUSDetectCallback(PortNum, VBUS_CONNECTED);
 800e1c0:	492b      	ldr	r1, [pc, #172]	@ (800e270 <BSP_USBPD_PWR_SetPowerMode+0x1b4>)
 800e1c2:	687a      	ldr	r2, [r7, #4]
 800e1c4:	4613      	mov	r3, r2
 800e1c6:	005b      	lsls	r3, r3, #1
 800e1c8:	4413      	add	r3, r2
 800e1ca:	009b      	lsls	r3, r3, #2
 800e1cc:	440b      	add	r3, r1
 800e1ce:	3308      	adds	r3, #8
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	2100      	movs	r1, #0
 800e1d4:	6878      	ldr	r0, [r7, #4]
 800e1d6:	4798      	blx	r3
          else
          {
            /* VBUS indication not present in FLGn flags : nothing more to be done */
          }
        }
        break;
 800e1d8:	e031      	b.n	800e23e <BSP_USBPD_PWR_SetPowerMode+0x182>
             - Dead Batteries Disabled,
             - Gate Driver Consumer or Provider controlled by I2C
             - waiting for VBUS_OK in FLGn (interrupt)
        */
        BSP_USBPD_PWR_TRACE(PortNum, "-- Low Power --");
        if (USBPD_PWR_PortCompDrv[PortNum]->SetPowerMode(&USBPD_PWR_PortCompObj[PortNum],
 800e1da:	4a23      	ldr	r2, [pc, #140]	@ (800e268 <BSP_USBPD_PWR_SetPowerMode+0x1ac>)
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e1e2:	699c      	ldr	r4, [r3, #24]
 800e1e4:	687a      	ldr	r2, [r7, #4]
 800e1e6:	4613      	mov	r3, r2
 800e1e8:	009b      	lsls	r3, r3, #2
 800e1ea:	4413      	add	r3, r2
 800e1ec:	00db      	lsls	r3, r3, #3
 800e1ee:	4a1f      	ldr	r2, [pc, #124]	@ (800e26c <BSP_USBPD_PWR_SetPowerMode+0x1b0>)
 800e1f0:	4413      	add	r3, r2
 800e1f2:	2120      	movs	r1, #32
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	47a0      	blx	r4
 800e1f8:	4603      	mov	r3, r0
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d021      	beq.n	800e242 <BSP_USBPD_PWR_SetPowerMode+0x186>
                                                         TCPP0203_POWER_MODE_LOWPOWER) != TCPP0203_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800e1fe:	f06f 0304 	mvn.w	r3, #4
 800e202:	60fb      	str	r3, [r7, #12]
        }
        break;
 800e204:	e01d      	b.n	800e242 <BSP_USBPD_PWR_SetPowerMode+0x186>

      case USBPD_PWR_MODE_NORMAL:
        /* Port Mode is Normal : No power saving measure (Explicit contract in place) */
        BSP_USBPD_PWR_TRACE(PortNum, "-- Normal --");
        if (USBPD_PWR_PortCompDrv[PortNum]->SetPowerMode(&USBPD_PWR_PortCompObj[PortNum],
 800e206:	4a18      	ldr	r2, [pc, #96]	@ (800e268 <BSP_USBPD_PWR_SetPowerMode+0x1ac>)
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e20e:	699c      	ldr	r4, [r3, #24]
 800e210:	687a      	ldr	r2, [r7, #4]
 800e212:	4613      	mov	r3, r2
 800e214:	009b      	lsls	r3, r3, #2
 800e216:	4413      	add	r3, r2
 800e218:	00db      	lsls	r3, r3, #3
 800e21a:	4a14      	ldr	r2, [pc, #80]	@ (800e26c <BSP_USBPD_PWR_SetPowerMode+0x1b0>)
 800e21c:	4413      	add	r3, r2
 800e21e:	2110      	movs	r1, #16
 800e220:	4618      	mov	r0, r3
 800e222:	47a0      	blx	r4
 800e224:	4603      	mov	r3, r0
 800e226:	2b00      	cmp	r3, #0
 800e228:	d00d      	beq.n	800e246 <BSP_USBPD_PWR_SetPowerMode+0x18a>
                                                         TCPP0203_POWER_MODE_NORMAL) != TCPP0203_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800e22a:	f06f 0304 	mvn.w	r3, #4
 800e22e:	60fb      	str	r3, [r7, #12]
        }
        break;
 800e230:	e009      	b.n	800e246 <BSP_USBPD_PWR_SetPowerMode+0x18a>

      default:
        ret = BSP_ERROR_WRONG_PARAM;
 800e232:	f06f 0301 	mvn.w	r3, #1
 800e236:	60fb      	str	r3, [r7, #12]
        break;
 800e238:	e006      	b.n	800e248 <BSP_USBPD_PWR_SetPowerMode+0x18c>
        break;
 800e23a:	bf00      	nop
 800e23c:	e004      	b.n	800e248 <BSP_USBPD_PWR_SetPowerMode+0x18c>
        break;
 800e23e:	bf00      	nop
 800e240:	e002      	b.n	800e248 <BSP_USBPD_PWR_SetPowerMode+0x18c>
        break;
 800e242:	bf00      	nop
 800e244:	e000      	b.n	800e248 <BSP_USBPD_PWR_SetPowerMode+0x18c>
        break;
 800e246:	bf00      	nop
    }

    /* Set port low power operating mode */
    USBPD_PWR_Port_Status[PortNum].PwrSavingMode = PwrMode;
 800e248:	4909      	ldr	r1, [pc, #36]	@ (800e270 <BSP_USBPD_PWR_SetPowerMode+0x1b4>)
 800e24a:	687a      	ldr	r2, [r7, #4]
 800e24c:	4613      	mov	r3, r2
 800e24e:	005b      	lsls	r3, r3, #1
 800e250:	4413      	add	r3, r2
 800e252:	009b      	lsls	r3, r3, #2
 800e254:	440b      	add	r3, r1
 800e256:	3303      	adds	r3, #3
 800e258:	78fa      	ldrb	r2, [r7, #3]
 800e25a:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800e25c:	68fb      	ldr	r3, [r7, #12]
}
 800e25e:	4618      	mov	r0, r3
 800e260:	3714      	adds	r7, #20
 800e262:	46bd      	mov	sp, r7
 800e264:	bd90      	pop	{r4, r7, pc}
 800e266:	bf00      	nop
 800e268:	240004e4 	.word	0x240004e4
 800e26c:	240004bc 	.word	0x240004bc
 800e270:	240004b0 	.word	0x240004b0

0800e274 <BSP_USBPD_PWR_VBUSOn>:
  *         This parameter can take one of the following values:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @retval BSP status
  */
int32_t BSP_USBPD_PWR_VBUSOn(uint32_t PortNum)
{
 800e274:	b590      	push	{r4, r7, lr}
 800e276:	b085      	sub	sp, #20
 800e278:	af00      	add	r7, sp, #0
 800e27a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800e27c:	2300      	movs	r3, #0
 800e27e:	60fb      	str	r3, [r7, #12]

  /* Check if instance is valid */
  if (PortNum >= USBPD_PWR_INSTANCES_NBR)
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d003      	beq.n	800e28e <BSP_USBPD_PWR_VBUSOn+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800e286:	f06f 0301 	mvn.w	r3, #1
 800e28a:	60fb      	str	r3, [r7, #12]
 800e28c:	e053      	b.n	800e336 <BSP_USBPD_PWR_VBUSOn+0xc2>
  else
  {
    BSP_USBPD_PWR_TRACE(PortNum, "-- BSP_USBPD_PWR_VBUSOn --");

    /* Port Role is now SRC : Close Gate Driver Provider */
    if (USBPD_PWR_Port_Status[PortNum].PwrRole == POWER_ROLE_SOURCE)
 800e28e:	492c      	ldr	r1, [pc, #176]	@ (800e340 <BSP_USBPD_PWR_VBUSOn+0xcc>)
 800e290:	687a      	ldr	r2, [r7, #4]
 800e292:	4613      	mov	r3, r2
 800e294:	005b      	lsls	r3, r3, #1
 800e296:	4413      	add	r3, r2
 800e298:	009b      	lsls	r3, r3, #2
 800e29a:	440b      	add	r3, r1
 800e29c:	3302      	adds	r3, #2
 800e29e:	781b      	ldrb	r3, [r3, #0]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d145      	bne.n	800e330 <BSP_USBPD_PWR_VBUSOn+0xbc>
    {
      /* Only for TCPP03 */
      if (USBPD_PWR_HW_CONFIG_TYPE_TCPP03 == USBPD_PWR_Port_Configs[PortNum].Type)
 800e2a4:	4a27      	ldr	r2, [pc, #156]	@ (800e344 <BSP_USBPD_PWR_VBUSOn+0xd0>)
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e2ac:	2b03      	cmp	r3, #3
 800e2ae:	d116      	bne.n	800e2de <BSP_USBPD_PWR_VBUSOn+0x6a>
      {
        /* Open Gate Driver Consumer, only for TCPP03 */
        if (USBPD_PWR_PortCompDrv[PortNum]->SetGateDriverConsumer(&USBPD_PWR_PortCompObj[PortNum],
 800e2b0:	4a25      	ldr	r2, [pc, #148]	@ (800e348 <BSP_USBPD_PWR_VBUSOn+0xd4>)
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e2b8:	695c      	ldr	r4, [r3, #20]
 800e2ba:	687a      	ldr	r2, [r7, #4]
 800e2bc:	4613      	mov	r3, r2
 800e2be:	009b      	lsls	r3, r3, #2
 800e2c0:	4413      	add	r3, r2
 800e2c2:	00db      	lsls	r3, r3, #3
 800e2c4:	4a21      	ldr	r2, [pc, #132]	@ (800e34c <BSP_USBPD_PWR_VBUSOn+0xd8>)
 800e2c6:	4413      	add	r3, r2
 800e2c8:	2108      	movs	r1, #8
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	47a0      	blx	r4
 800e2ce:	4603      	mov	r3, r0
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d004      	beq.n	800e2de <BSP_USBPD_PWR_VBUSOn+0x6a>
                                                                  TCPP0203_GD_CONSUMER_SWITCH_OPEN) != TCPP0203_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800e2d4:	f06f 0304 	mvn.w	r3, #4
 800e2d8:	60fb      	str	r3, [r7, #12]
          return ret;
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	e02c      	b.n	800e338 <BSP_USBPD_PWR_VBUSOn+0xc4>
        }
      }

      /* Common for TCPP02 / TCPP03 */
      if ((USBPD_PWR_HW_CONFIG_TYPE_TCPP02 == USBPD_PWR_Port_Configs[PortNum].Type) ||
 800e2de:	4a19      	ldr	r2, [pc, #100]	@ (800e344 <BSP_USBPD_PWR_VBUSOn+0xd0>)
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e2e6:	2b02      	cmp	r3, #2
 800e2e8:	d005      	beq.n	800e2f6 <BSP_USBPD_PWR_VBUSOn+0x82>
          (USBPD_PWR_HW_CONFIG_TYPE_TCPP03 == USBPD_PWR_Port_Configs[PortNum].Type))
 800e2ea:	4a16      	ldr	r2, [pc, #88]	@ (800e344 <BSP_USBPD_PWR_VBUSOn+0xd0>)
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
      if ((USBPD_PWR_HW_CONFIG_TYPE_TCPP02 == USBPD_PWR_Port_Configs[PortNum].Type) ||
 800e2f2:	2b03      	cmp	r3, #3
 800e2f4:	d118      	bne.n	800e328 <BSP_USBPD_PWR_VBUSOn+0xb4>
      {
        HAL_Delay(2);
 800e2f6:	2002      	movs	r0, #2
 800e2f8:	f7f3 fdb0 	bl	8001e5c <HAL_Delay>

        if (USBPD_PWR_PortCompDrv[PortNum]->SetGateDriverProvider(&USBPD_PWR_PortCompObj[PortNum],
 800e2fc:	4a12      	ldr	r2, [pc, #72]	@ (800e348 <BSP_USBPD_PWR_VBUSOn+0xd4>)
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e304:	691c      	ldr	r4, [r3, #16]
 800e306:	687a      	ldr	r2, [r7, #4]
 800e308:	4613      	mov	r3, r2
 800e30a:	009b      	lsls	r3, r3, #2
 800e30c:	4413      	add	r3, r2
 800e30e:	00db      	lsls	r3, r3, #3
 800e310:	4a0e      	ldr	r2, [pc, #56]	@ (800e34c <BSP_USBPD_PWR_VBUSOn+0xd8>)
 800e312:	4413      	add	r3, r2
 800e314:	2104      	movs	r1, #4
 800e316:	4618      	mov	r0, r3
 800e318:	47a0      	blx	r4
 800e31a:	4603      	mov	r3, r0
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d00a      	beq.n	800e336 <BSP_USBPD_PWR_VBUSOn+0xc2>
                                                                  TCPP0203_GD_PROVIDER_SWITCH_CLOSED) != TCPP0203_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800e320:	f06f 0304 	mvn.w	r3, #4
 800e324:	60fb      	str	r3, [r7, #12]
        if (USBPD_PWR_PortCompDrv[PortNum]->SetGateDriverProvider(&USBPD_PWR_PortCompObj[PortNum],
 800e326:	e006      	b.n	800e336 <BSP_USBPD_PWR_VBUSOn+0xc2>
        }
        BSP_USBPD_PWR_TRACE(PortNum, "-- GDP/GDC setting : SRC --");
      }
      else
      {
        ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800e328:	f06f 030a 	mvn.w	r3, #10
 800e32c:	60fb      	str	r3, [r7, #12]
 800e32e:	e002      	b.n	800e336 <BSP_USBPD_PWR_VBUSOn+0xc2>
      }
    }
    else
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800e330:	f06f 0304 	mvn.w	r3, #4
 800e334:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 800e336:	68fb      	ldr	r3, [r7, #12]
}
 800e338:	4618      	mov	r0, r3
 800e33a:	3714      	adds	r7, #20
 800e33c:	46bd      	mov	sp, r7
 800e33e:	bd90      	pop	{r4, r7, pc}
 800e340:	240004b0 	.word	0x240004b0
 800e344:	24000094 	.word	0x24000094
 800e348:	240004e4 	.word	0x240004e4
 800e34c:	240004bc 	.word	0x240004bc

0800e350 <BSP_USBPD_PWR_VBUSOff>:
  *         This parameter can take one of the following values:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @retval BSP status
  */
int32_t BSP_USBPD_PWR_VBUSOff(uint32_t PortNum)
{
 800e350:	b590      	push	{r4, r7, lr}
 800e352:	b085      	sub	sp, #20
 800e354:	af00      	add	r7, sp, #0
 800e356:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800e358:	2300      	movs	r3, #0
 800e35a:	60fb      	str	r3, [r7, #12]
#if (BSP_USBPD_PWR_DONT_WAIT_VBUSOFF_DISCHARGE == 0)
  uint32_t vbus;
#endif /* BSP_USBPD_PWR_DONT_WAIT_VBUSOFF_DISCHARGE == 0 */

  /* Check if instance is valid */
  if (PortNum >= USBPD_PWR_INSTANCES_NBR)
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d003      	beq.n	800e36a <BSP_USBPD_PWR_VBUSOff+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800e362:	f06f 0301 	mvn.w	r3, #1
 800e366:	60fb      	str	r3, [r7, #12]
 800e368:	e014      	b.n	800e394 <BSP_USBPD_PWR_VBUSOff+0x44>
  }
  else
  {
    /* Open Gate driver provider */
    BSP_USBPD_PWR_TRACE(PortNum, "-- BSP_USBPD_PWR_VBUSOff --");
    if (USBPD_PWR_PortCompDrv[PortNum]->SetGateDriverProvider(&USBPD_PWR_PortCompObj[PortNum],
 800e36a:	4a0d      	ldr	r2, [pc, #52]	@ (800e3a0 <BSP_USBPD_PWR_VBUSOff+0x50>)
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e372:	691c      	ldr	r4, [r3, #16]
 800e374:	687a      	ldr	r2, [r7, #4]
 800e376:	4613      	mov	r3, r2
 800e378:	009b      	lsls	r3, r3, #2
 800e37a:	4413      	add	r3, r2
 800e37c:	00db      	lsls	r3, r3, #3
 800e37e:	4a09      	ldr	r2, [pc, #36]	@ (800e3a4 <BSP_USBPD_PWR_VBUSOff+0x54>)
 800e380:	4413      	add	r3, r2
 800e382:	2100      	movs	r1, #0
 800e384:	4618      	mov	r0, r3
 800e386:	47a0      	blx	r4
 800e388:	4603      	mov	r3, r0
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d002      	beq.n	800e394 <BSP_USBPD_PWR_VBUSOff+0x44>
                                                              TCPP0203_GD_PROVIDER_SWITCH_OPEN) != TCPP0203_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800e38e:	f06f 0304 	mvn.w	r3, #4
 800e392:	60fb      	str	r3, [r7, #12]
        HAL_Delay(30);
      }
    }
#endif /* BSP_USBPD_PWR_DONT_WAIT_VBUSOFF_DISCHARGE == 0 */
  }
  return ret;
 800e394:	68fb      	ldr	r3, [r7, #12]
}
 800e396:	4618      	mov	r0, r3
 800e398:	3714      	adds	r7, #20
 800e39a:	46bd      	mov	sp, r7
 800e39c:	bd90      	pop	{r4, r7, pc}
 800e39e:	bf00      	nop
 800e3a0:	240004e4 	.word	0x240004e4
 800e3a4:	240004bc 	.word	0x240004bc

0800e3a8 <BSP_USBPD_PWR_VBUSDischargeOn>:
  *         This parameter can take one of the following values:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @retval BSP status
  */
int32_t BSP_USBPD_PWR_VBUSDischargeOn(uint32_t PortNum)
{
 800e3a8:	b590      	push	{r4, r7, lr}
 800e3aa:	b085      	sub	sp, #20
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	60fb      	str	r3, [r7, #12]

  /* Check if instance is valid */
  if (PortNum >= USBPD_PWR_INSTANCES_NBR)
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d003      	beq.n	800e3c2 <BSP_USBPD_PWR_VBUSDischargeOn+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800e3ba:	f06f 0301 	mvn.w	r3, #1
 800e3be:	60fb      	str	r3, [r7, #12]
 800e3c0:	e02a      	b.n	800e418 <BSP_USBPD_PWR_VBUSDischargeOn+0x70>
  }
  else
  {
    BSP_USBPD_PWR_TRACE(PortNum, "-- BSP_USBPD_PWR_VBUSDischargeOn --");

    if (USBPD_PWR_PortCompDrv[PortNum]->SetGateDriverProvider(&USBPD_PWR_PortCompObj[PortNum],
 800e3c2:	4a18      	ldr	r2, [pc, #96]	@ (800e424 <BSP_USBPD_PWR_VBUSDischargeOn+0x7c>)
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e3ca:	691c      	ldr	r4, [r3, #16]
 800e3cc:	687a      	ldr	r2, [r7, #4]
 800e3ce:	4613      	mov	r3, r2
 800e3d0:	009b      	lsls	r3, r3, #2
 800e3d2:	4413      	add	r3, r2
 800e3d4:	00db      	lsls	r3, r3, #3
 800e3d6:	4a14      	ldr	r2, [pc, #80]	@ (800e428 <BSP_USBPD_PWR_VBUSDischargeOn+0x80>)
 800e3d8:	4413      	add	r3, r2
 800e3da:	2100      	movs	r1, #0
 800e3dc:	4618      	mov	r0, r3
 800e3de:	47a0      	blx	r4
 800e3e0:	4603      	mov	r3, r0
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d003      	beq.n	800e3ee <BSP_USBPD_PWR_VBUSDischargeOn+0x46>
                                                              TCPP0203_GD_PROVIDER_SWITCH_OPEN) != TCPP0203_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800e3e6:	f06f 0304 	mvn.w	r3, #4
 800e3ea:	60fb      	str	r3, [r7, #12]
 800e3ec:	e014      	b.n	800e418 <BSP_USBPD_PWR_VBUSDischargeOn+0x70>
    }
    else
    {
      if (USBPD_PWR_PortCompDrv[PortNum]->SetVBusDischarge(&USBPD_PWR_PortCompObj[PortNum],
 800e3ee:	4a0d      	ldr	r2, [pc, #52]	@ (800e424 <BSP_USBPD_PWR_VBUSDischargeOn+0x7c>)
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e3f6:	69dc      	ldr	r4, [r3, #28]
 800e3f8:	687a      	ldr	r2, [r7, #4]
 800e3fa:	4613      	mov	r3, r2
 800e3fc:	009b      	lsls	r3, r3, #2
 800e3fe:	4413      	add	r3, r2
 800e400:	00db      	lsls	r3, r3, #3
 800e402:	4a09      	ldr	r2, [pc, #36]	@ (800e428 <BSP_USBPD_PWR_VBUSDischargeOn+0x80>)
 800e404:	4413      	add	r3, r2
 800e406:	2140      	movs	r1, #64	@ 0x40
 800e408:	4618      	mov	r0, r3
 800e40a:	47a0      	blx	r4
 800e40c:	4603      	mov	r3, r0
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d002      	beq.n	800e418 <BSP_USBPD_PWR_VBUSDischargeOn+0x70>
                                                           TCPP0203_VBUS_DISCHARGE_ON) != TCPP0203_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800e412:	f06f 0304 	mvn.w	r3, #4
 800e416:	60fb      	str	r3, [r7, #12]
      }
    }
  }
  return ret;
 800e418:	68fb      	ldr	r3, [r7, #12]
}
 800e41a:	4618      	mov	r0, r3
 800e41c:	3714      	adds	r7, #20
 800e41e:	46bd      	mov	sp, r7
 800e420:	bd90      	pop	{r4, r7, pc}
 800e422:	bf00      	nop
 800e424:	240004e4 	.word	0x240004e4
 800e428:	240004bc 	.word	0x240004bc

0800e42c <BSP_USBPD_PWR_VBUSDischargeOff>:
  *         This parameter can take one of the following values:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @retval BSP status
  */
int32_t BSP_USBPD_PWR_VBUSDischargeOff(uint32_t PortNum)
{
 800e42c:	b590      	push	{r4, r7, lr}
 800e42e:	b085      	sub	sp, #20
 800e430:	af00      	add	r7, sp, #0
 800e432:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800e434:	2300      	movs	r3, #0
 800e436:	60fb      	str	r3, [r7, #12]

  /* Check if instance is valid */
  if (PortNum >= USBPD_PWR_INSTANCES_NBR)
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d003      	beq.n	800e446 <BSP_USBPD_PWR_VBUSDischargeOff+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800e43e:	f06f 0301 	mvn.w	r3, #1
 800e442:	60fb      	str	r3, [r7, #12]
 800e444:	e014      	b.n	800e470 <BSP_USBPD_PWR_VBUSDischargeOff+0x44>
  }
  else
  {
    BSP_USBPD_PWR_TRACE(PortNum, "-- BSP_USBPD_PWR_VBUSDischargeOff --");

    if (USBPD_PWR_PortCompDrv[PortNum]->SetVBusDischarge(&USBPD_PWR_PortCompObj[PortNum],
 800e446:	4a0d      	ldr	r2, [pc, #52]	@ (800e47c <BSP_USBPD_PWR_VBUSDischargeOff+0x50>)
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e44e:	69dc      	ldr	r4, [r3, #28]
 800e450:	687a      	ldr	r2, [r7, #4]
 800e452:	4613      	mov	r3, r2
 800e454:	009b      	lsls	r3, r3, #2
 800e456:	4413      	add	r3, r2
 800e458:	00db      	lsls	r3, r3, #3
 800e45a:	4a09      	ldr	r2, [pc, #36]	@ (800e480 <BSP_USBPD_PWR_VBUSDischargeOff+0x54>)
 800e45c:	4413      	add	r3, r2
 800e45e:	2100      	movs	r1, #0
 800e460:	4618      	mov	r0, r3
 800e462:	47a0      	blx	r4
 800e464:	4603      	mov	r3, r0
 800e466:	2b00      	cmp	r3, #0
 800e468:	d002      	beq.n	800e470 <BSP_USBPD_PWR_VBUSDischargeOff+0x44>
                                                         TCPP0203_VBUS_DISCHARGE_OFF) != TCPP0203_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800e46a:	f06f 0304 	mvn.w	r3, #4
 800e46e:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 800e470:	68fb      	ldr	r3, [r7, #12]
}
 800e472:	4618      	mov	r0, r3
 800e474:	3714      	adds	r7, #20
 800e476:	46bd      	mov	sp, r7
 800e478:	bd90      	pop	{r4, r7, pc}
 800e47a:	bf00      	nop
 800e47c:	240004e4 	.word	0x240004e4
 800e480:	240004bc 	.word	0x240004bc

0800e484 <PWR_TCPP0203_BUSConfigInit>:
  * @param  PortNum   Port number
  * @param  Address   I2C Address
  * @retval BSP status
  */
static int32_t PWR_TCPP0203_BUSConfigInit(uint32_t PortNum, uint16_t Address)
{
 800e484:	b590      	push	{r4, r7, lr}
 800e486:	b08b      	sub	sp, #44	@ 0x2c
 800e488:	af00      	add	r7, sp, #0
 800e48a:	6078      	str	r0, [r7, #4]
 800e48c:	460b      	mov	r3, r1
 800e48e:	807b      	strh	r3, [r7, #2]
  int32_t                  ret = BSP_ERROR_NONE;
 800e490:	2300      	movs	r3, #0
 800e492:	627b      	str	r3, [r7, #36]	@ 0x24
  TCPP0203_IO_t            TCPP0203IOCtx;
  uint8_t                  tcpp_type;

  /* Configure the TCPP0203 I2C driver */
  TCPP0203IOCtx.Address     = Address;
 800e494:	887b      	ldrh	r3, [r7, #2]
 800e496:	82bb      	strh	r3, [r7, #20]
  TCPP0203IOCtx.Init        = TCPP0203_I2C_Init;
 800e498:	4b44      	ldr	r3, [pc, #272]	@ (800e5ac <PWR_TCPP0203_BUSConfigInit+0x128>)
 800e49a:	60fb      	str	r3, [r7, #12]
  TCPP0203IOCtx.DeInit      = TCPP0203_I2C_DeInit;
 800e49c:	4b44      	ldr	r3, [pc, #272]	@ (800e5b0 <PWR_TCPP0203_BUSConfigInit+0x12c>)
 800e49e:	613b      	str	r3, [r7, #16]
  TCPP0203IOCtx.ReadReg     = TCPP0203_I2C_ReadReg;
 800e4a0:	4b44      	ldr	r3, [pc, #272]	@ (800e5b4 <PWR_TCPP0203_BUSConfigInit+0x130>)
 800e4a2:	61fb      	str	r3, [r7, #28]
  TCPP0203IOCtx.WriteReg    = TCPP0203_I2C_WriteReg;
 800e4a4:	4b44      	ldr	r3, [pc, #272]	@ (800e5b8 <PWR_TCPP0203_BUSConfigInit+0x134>)
 800e4a6:	61bb      	str	r3, [r7, #24]
  TCPP0203IOCtx.GetTick     = TCPP0203_GetTick;
 800e4a8:	4b44      	ldr	r3, [pc, #272]	@ (800e5bc <PWR_TCPP0203_BUSConfigInit+0x138>)
 800e4aa:	623b      	str	r3, [r7, #32]

  /* Register the component on BUS IO */
  if (TCPP0203_RegisterBusIO(&USBPD_PWR_PortCompObj[PortNum], &TCPP0203IOCtx) != TCPP0203_OK)
 800e4ac:	687a      	ldr	r2, [r7, #4]
 800e4ae:	4613      	mov	r3, r2
 800e4b0:	009b      	lsls	r3, r3, #2
 800e4b2:	4413      	add	r3, r2
 800e4b4:	00db      	lsls	r3, r3, #3
 800e4b6:	4a42      	ldr	r2, [pc, #264]	@ (800e5c0 <PWR_TCPP0203_BUSConfigInit+0x13c>)
 800e4b8:	4413      	add	r3, r2
 800e4ba:	f107 020c 	add.w	r2, r7, #12
 800e4be:	4611      	mov	r1, r2
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	f7f3 f86f 	bl	80015a4 <TCPP0203_RegisterBusIO>
 800e4c6:	4603      	mov	r3, r0
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d003      	beq.n	800e4d4 <PWR_TCPP0203_BUSConfigInit+0x50>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800e4cc:	f06f 0307 	mvn.w	r3, #7
 800e4d0:	627b      	str	r3, [r7, #36]	@ 0x24
 800e4d2:	e065      	b.n	800e5a0 <PWR_TCPP0203_BUSConfigInit+0x11c>
  }
  else
  {
    /* Initialisation step */
    USBPD_PWR_PortCompDrv[PortNum] = &TCPP0203_Driver;
 800e4d4:	4a3b      	ldr	r2, [pc, #236]	@ (800e5c4 <PWR_TCPP0203_BUSConfigInit+0x140>)
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	493b      	ldr	r1, [pc, #236]	@ (800e5c8 <PWR_TCPP0203_BUSConfigInit+0x144>)
 800e4da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    if (USBPD_PWR_PortCompDrv[PortNum]->Init(&USBPD_PWR_PortCompObj[PortNum]) != TCPP0203_OK)
 800e4de:	4a39      	ldr	r2, [pc, #228]	@ (800e5c4 <PWR_TCPP0203_BUSConfigInit+0x140>)
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e4e6:	6819      	ldr	r1, [r3, #0]
 800e4e8:	687a      	ldr	r2, [r7, #4]
 800e4ea:	4613      	mov	r3, r2
 800e4ec:	009b      	lsls	r3, r3, #2
 800e4ee:	4413      	add	r3, r2
 800e4f0:	00db      	lsls	r3, r3, #3
 800e4f2:	4a33      	ldr	r2, [pc, #204]	@ (800e5c0 <PWR_TCPP0203_BUSConfigInit+0x13c>)
 800e4f4:	4413      	add	r3, r2
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	4788      	blx	r1
 800e4fa:	4603      	mov	r3, r0
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d002      	beq.n	800e506 <PWR_TCPP0203_BUSConfigInit+0x82>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800e500:	f06f 0304 	mvn.w	r3, #4
 800e504:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* Read the component type */
    if (USBPD_PWR_PortCompDrv[PortNum]->ReadTCPPType(&USBPD_PWR_PortCompObj[PortNum], &tcpp_type) != TCPP0203_OK)
 800e506:	4a2f      	ldr	r2, [pc, #188]	@ (800e5c4 <PWR_TCPP0203_BUSConfigInit+0x140>)
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e50e:	6d5c      	ldr	r4, [r3, #84]	@ 0x54
 800e510:	687a      	ldr	r2, [r7, #4]
 800e512:	4613      	mov	r3, r2
 800e514:	009b      	lsls	r3, r3, #2
 800e516:	4413      	add	r3, r2
 800e518:	00db      	lsls	r3, r3, #3
 800e51a:	4a29      	ldr	r2, [pc, #164]	@ (800e5c0 <PWR_TCPP0203_BUSConfigInit+0x13c>)
 800e51c:	4413      	add	r3, r2
 800e51e:	f107 020b 	add.w	r2, r7, #11
 800e522:	4611      	mov	r1, r2
 800e524:	4618      	mov	r0, r3
 800e526:	47a0      	blx	r4
 800e528:	4603      	mov	r3, r0
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d003      	beq.n	800e536 <PWR_TCPP0203_BUSConfigInit+0xb2>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800e52e:	f06f 0304 	mvn.w	r3, #4
 800e532:	627b      	str	r3, [r7, #36]	@ 0x24
 800e534:	e034      	b.n	800e5a0 <PWR_TCPP0203_BUSConfigInit+0x11c>
    }
    /* Check the component type */
    else if ((tcpp_type != TCPP0203_DEVICE_TYPE_02)
 800e536:	7afb      	ldrb	r3, [r7, #11]
 800e538:	2b80      	cmp	r3, #128	@ 0x80
 800e53a:	d006      	beq.n	800e54a <PWR_TCPP0203_BUSConfigInit+0xc6>
             && (tcpp_type != TCPP0203_DEVICE_TYPE_03))
 800e53c:	7afb      	ldrb	r3, [r7, #11]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d003      	beq.n	800e54a <PWR_TCPP0203_BUSConfigInit+0xc6>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800e542:	f06f 0306 	mvn.w	r3, #6
 800e546:	627b      	str	r3, [r7, #36]	@ 0x24
 800e548:	e02a      	b.n	800e5a0 <PWR_TCPP0203_BUSConfigInit+0x11c>
    }
    /* Reset TCPP0203 Reg0 register */
    else if (USBPD_PWR_PortCompDrv[PortNum]->Reset(&USBPD_PWR_PortCompObj[PortNum]) != TCPP0203_OK)
 800e54a:	4a1e      	ldr	r2, [pc, #120]	@ (800e5c4 <PWR_TCPP0203_BUSConfigInit+0x140>)
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e552:	6899      	ldr	r1, [r3, #8]
 800e554:	687a      	ldr	r2, [r7, #4]
 800e556:	4613      	mov	r3, r2
 800e558:	009b      	lsls	r3, r3, #2
 800e55a:	4413      	add	r3, r2
 800e55c:	00db      	lsls	r3, r3, #3
 800e55e:	4a18      	ldr	r2, [pc, #96]	@ (800e5c0 <PWR_TCPP0203_BUSConfigInit+0x13c>)
 800e560:	4413      	add	r3, r2
 800e562:	4618      	mov	r0, r3
 800e564:	4788      	blx	r1
 800e566:	4603      	mov	r3, r0
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d003      	beq.n	800e574 <PWR_TCPP0203_BUSConfigInit+0xf0>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800e56c:	f06f 0304 	mvn.w	r3, #4
 800e570:	627b      	str	r3, [r7, #36]	@ 0x24
 800e572:	e015      	b.n	800e5a0 <PWR_TCPP0203_BUSConfigInit+0x11c>
    }
    else
    {
      /* Check the component type and update config accordingly */
      USBPD_PWR_Port_Configs[PortNum].Type = tcpp_type;
 800e574:	7af9      	ldrb	r1, [r7, #11]
 800e576:	4a15      	ldr	r2, [pc, #84]	@ (800e5cc <PWR_TCPP0203_BUSConfigInit+0x148>)
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]

      /* Update Port Config */
      if (TCPP0203_DEVICE_TYPE_02 == tcpp_type)
 800e57e:	7afb      	ldrb	r3, [r7, #11]
 800e580:	2b80      	cmp	r3, #128	@ 0x80
 800e582:	d105      	bne.n	800e590 <PWR_TCPP0203_BUSConfigInit+0x10c>
      {
        USBPD_PWR_Port_Configs[PortNum].Type = USBPD_PWR_HW_CONFIG_TYPE_TCPP02;
 800e584:	4a11      	ldr	r2, [pc, #68]	@ (800e5cc <PWR_TCPP0203_BUSConfigInit+0x148>)
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	2102      	movs	r1, #2
 800e58a:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
 800e58e:	e007      	b.n	800e5a0 <PWR_TCPP0203_BUSConfigInit+0x11c>
        BSP_USBPD_PWR_TRACE(PortNum, "-- TCPP02 detected");
      }
      else if (TCPP0203_DEVICE_TYPE_03 == tcpp_type)
 800e590:	7afb      	ldrb	r3, [r7, #11]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d104      	bne.n	800e5a0 <PWR_TCPP0203_BUSConfigInit+0x11c>
      {
        USBPD_PWR_Port_Configs[PortNum].Type = USBPD_PWR_HW_CONFIG_TYPE_TCPP03;
 800e596:	4a0d      	ldr	r2, [pc, #52]	@ (800e5cc <PWR_TCPP0203_BUSConfigInit+0x148>)
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	2103      	movs	r1, #3
 800e59c:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
      }

      /* Registration completed */
    }
  }
  return ret;
 800e5a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	372c      	adds	r7, #44	@ 0x2c
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	bd90      	pop	{r4, r7, pc}
 800e5aa:	bf00      	nop
 800e5ac:	08000de9 	.word	0x08000de9
 800e5b0:	08000e65 	.word	0x08000e65
 800e5b4:	08000f19 	.word	0x08000f19
 800e5b8:	08000eb5 	.word	0x08000eb5
 800e5bc:	08000f7d 	.word	0x08000f7d
 800e5c0:	240004bc 	.word	0x240004bc
 800e5c4:	240004e4 	.word	0x240004e4
 800e5c8:	24000004 	.word	0x24000004
 800e5cc:	24000094 	.word	0x24000094

0800e5d0 <ADC_Start>:


}

void ADC_Start(void)
{
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	af00      	add	r7, sp, #0
  //HAL_ADC_Start_DMA(&h,(uint32_t *)&USBnoPD_adc_buffer, USBNOPD_ADC_USED_CHANNELS);
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800e5d4:	217f      	movs	r1, #127	@ 0x7f
 800e5d6:	4808      	ldr	r0, [pc, #32]	@ (800e5f8 <ADC_Start+0x28>)
 800e5d8:	f7f4 febc 	bl	8003354 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 800e5dc:	217f      	movs	r1, #127	@ 0x7f
 800e5de:	4807      	ldr	r0, [pc, #28]	@ (800e5fc <ADC_Start+0x2c>)
 800e5e0:	f7f4 feb8 	bl	8003354 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start(&hadc2);
 800e5e4:	4805      	ldr	r0, [pc, #20]	@ (800e5fc <ADC_Start+0x2c>)
 800e5e6:	f7f4 f807 	bl	80025f8 <HAL_ADC_Start>
	HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t *)&USBnoPD_adc_buffer, USBNOPD_ADC_USED_CHANNELS);
 800e5ea:	2205      	movs	r2, #5
 800e5ec:	4904      	ldr	r1, [pc, #16]	@ (800e600 <ADC_Start+0x30>)
 800e5ee:	4802      	ldr	r0, [pc, #8]	@ (800e5f8 <ADC_Start+0x28>)
 800e5f0:	f7f4 ff12 	bl	8003418 <HAL_ADCEx_MultiModeStart_DMA>
}
 800e5f4:	bf00      	nop
 800e5f6:	bd80      	pop	{r7, pc}
 800e5f8:	24000104 	.word	0x24000104
 800e5fc:	2400016c 	.word	0x2400016c
 800e600:	24000488 	.word	0x24000488

0800e604 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800e604:	b580      	push	{r7, lr}
 800e606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800e608:	2200      	movs	r2, #0
 800e60a:	490e      	ldr	r1, [pc, #56]	@ (800e644 <MX_USB_HOST_Init+0x40>)
 800e60c:	480e      	ldr	r0, [pc, #56]	@ (800e648 <MX_USB_HOST_Init+0x44>)
 800e60e:	f7fd fd83 	bl	800c118 <USBH_Init>
 800e612:	4603      	mov	r3, r0
 800e614:	2b00      	cmp	r3, #0
 800e616:	d001      	beq.n	800e61c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800e618:	f7f2 fb8c 	bl	8000d34 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800e61c:	490b      	ldr	r1, [pc, #44]	@ (800e64c <MX_USB_HOST_Init+0x48>)
 800e61e:	480a      	ldr	r0, [pc, #40]	@ (800e648 <MX_USB_HOST_Init+0x44>)
 800e620:	f7fd fe27 	bl	800c272 <USBH_RegisterClass>
 800e624:	4603      	mov	r3, r0
 800e626:	2b00      	cmp	r3, #0
 800e628:	d001      	beq.n	800e62e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800e62a:	f7f2 fb83 	bl	8000d34 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800e62e:	4806      	ldr	r0, [pc, #24]	@ (800e648 <MX_USB_HOST_Init+0x44>)
 800e630:	f7fd feab 	bl	800c38a <USBH_Start>
 800e634:	4603      	mov	r3, r0
 800e636:	2b00      	cmp	r3, #0
 800e638:	d001      	beq.n	800e63e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800e63a:	f7f2 fb7b 	bl	8000d34 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800e63e:	bf00      	nop
 800e640:	bd80      	pop	{r7, pc}
 800e642:	bf00      	nop
 800e644:	0800e665 	.word	0x0800e665
 800e648:	240004e8 	.word	0x240004e8
 800e64c:	24000074 	.word	0x24000074

0800e650 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800e650:	b580      	push	{r7, lr}
 800e652:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 800e654:	4802      	ldr	r0, [pc, #8]	@ (800e660 <MX_USB_HOST_Process+0x10>)
 800e656:	f7fd fea9 	bl	800c3ac <USBH_Process>
}
 800e65a:	bf00      	nop
 800e65c:	bd80      	pop	{r7, pc}
 800e65e:	bf00      	nop
 800e660:	240004e8 	.word	0x240004e8

0800e664 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800e664:	b480      	push	{r7}
 800e666:	b083      	sub	sp, #12
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
 800e66c:	460b      	mov	r3, r1
 800e66e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800e670:	78fb      	ldrb	r3, [r7, #3]
 800e672:	3b01      	subs	r3, #1
 800e674:	2b04      	cmp	r3, #4
 800e676:	d819      	bhi.n	800e6ac <USBH_UserProcess+0x48>
 800e678:	a201      	add	r2, pc, #4	@ (adr r2, 800e680 <USBH_UserProcess+0x1c>)
 800e67a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e67e:	bf00      	nop
 800e680:	0800e6ad 	.word	0x0800e6ad
 800e684:	0800e69d 	.word	0x0800e69d
 800e688:	0800e6ad 	.word	0x0800e6ad
 800e68c:	0800e6a5 	.word	0x0800e6a5
 800e690:	0800e695 	.word	0x0800e695
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800e694:	4b09      	ldr	r3, [pc, #36]	@ (800e6bc <USBH_UserProcess+0x58>)
 800e696:	2203      	movs	r2, #3
 800e698:	701a      	strb	r2, [r3, #0]
  break;
 800e69a:	e008      	b.n	800e6ae <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800e69c:	4b07      	ldr	r3, [pc, #28]	@ (800e6bc <USBH_UserProcess+0x58>)
 800e69e:	2202      	movs	r2, #2
 800e6a0:	701a      	strb	r2, [r3, #0]
  break;
 800e6a2:	e004      	b.n	800e6ae <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800e6a4:	4b05      	ldr	r3, [pc, #20]	@ (800e6bc <USBH_UserProcess+0x58>)
 800e6a6:	2201      	movs	r2, #1
 800e6a8:	701a      	strb	r2, [r3, #0]
  break;
 800e6aa:	e000      	b.n	800e6ae <USBH_UserProcess+0x4a>

  default:
  break;
 800e6ac:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800e6ae:	bf00      	nop
 800e6b0:	370c      	adds	r7, #12
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b8:	4770      	bx	lr
 800e6ba:	bf00      	nop
 800e6bc:	240008c0 	.word	0x240008c0

0800e6c0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b0a6      	sub	sp, #152	@ 0x98
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800e6c8:	f107 0314 	add.w	r3, r7, #20
 800e6cc:	2284      	movs	r2, #132	@ 0x84
 800e6ce:	2100      	movs	r1, #0
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	f000 fb2d 	bl	800ed30 <memset>
  if(hcdHandle->Instance==USB_OTG_HS)
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	4a1e      	ldr	r2, [pc, #120]	@ (800e754 <HAL_HCD_MspInit+0x94>)
 800e6dc:	4293      	cmp	r3, r2
 800e6de:	d134      	bne.n	800e74a <HAL_HCD_MspInit+0x8a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USBPHYC;
 800e6e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e6e4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbPhycClockSelection = RCC_USBPHYCCLKSOURCE_PLL3Q;
 800e6e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800e6ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800e6ee:	f107 0314 	add.w	r3, r7, #20
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	f7fa f93e 	bl	8008974 <HAL_RCCEx_PeriphCLKConfig>
 800e6f8:	4603      	mov	r3, r0
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d001      	beq.n	800e702 <HAL_HCD_MspInit+0x42>
    {
      Error_Handler();
 800e6fe:	f7f2 fb19 	bl	8000d34 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800e702:	f7f9 fdf9 	bl	80082f8 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800e706:	4b14      	ldr	r3, [pc, #80]	@ (800e758 <HAL_HCD_MspInit+0x98>)
 800e708:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800e70c:	4a12      	ldr	r2, [pc, #72]	@ (800e758 <HAL_HCD_MspInit+0x98>)
 800e70e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800e712:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 800e716:	4b10      	ldr	r3, [pc, #64]	@ (800e758 <HAL_HCD_MspInit+0x98>)
 800e718:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800e71c:	613b      	str	r3, [r7, #16]
 800e71e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USBPHYC_CLK_ENABLE();
 800e720:	4b0d      	ldr	r3, [pc, #52]	@ (800e758 <HAL_HCD_MspInit+0x98>)
 800e722:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800e726:	4a0c      	ldr	r2, [pc, #48]	@ (800e758 <HAL_HCD_MspInit+0x98>)
 800e728:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e72c:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 800e730:	4b09      	ldr	r3, [pc, #36]	@ (800e758 <HAL_HCD_MspInit+0x98>)
 800e732:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800e736:	60fb      	str	r3, [r7, #12]
 800e738:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800e73a:	2200      	movs	r2, #0
 800e73c:	2100      	movs	r1, #0
 800e73e:	205b      	movs	r0, #91	@ 0x5b
 800e740:	f7f5 f8fd 	bl	800393e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800e744:	205b      	movs	r0, #91	@ 0x5b
 800e746:	f7f5 f914 	bl	8003972 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800e74a:	bf00      	nop
 800e74c:	3798      	adds	r7, #152	@ 0x98
 800e74e:	46bd      	mov	sp, r7
 800e750:	bd80      	pop	{r7, pc}
 800e752:	bf00      	nop
 800e754:	40040000 	.word	0x40040000
 800e758:	58024400 	.word	0x58024400

0800e75c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b082      	sub	sp, #8
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800e76a:	4618      	mov	r0, r3
 800e76c:	f7fe f9f5 	bl	800cb5a <USBH_LL_IncTimer>
}
 800e770:	bf00      	nop
 800e772:	3708      	adds	r7, #8
 800e774:	46bd      	mov	sp, r7
 800e776:	bd80      	pop	{r7, pc}

0800e778 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e778:	b580      	push	{r7, lr}
 800e77a:	b082      	sub	sp, #8
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800e786:	4618      	mov	r0, r3
 800e788:	f7fe fa2d 	bl	800cbe6 <USBH_LL_Connect>
}
 800e78c:	bf00      	nop
 800e78e:	3708      	adds	r7, #8
 800e790:	46bd      	mov	sp, r7
 800e792:	bd80      	pop	{r7, pc}

0800e794 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e794:	b580      	push	{r7, lr}
 800e796:	b082      	sub	sp, #8
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	f7fe fa36 	bl	800cc14 <USBH_LL_Disconnect>
}
 800e7a8:	bf00      	nop
 800e7aa:	3708      	adds	r7, #8
 800e7ac:	46bd      	mov	sp, r7
 800e7ae:	bd80      	pop	{r7, pc}

0800e7b0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800e7b0:	b480      	push	{r7}
 800e7b2:	b083      	sub	sp, #12
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
 800e7b8:	460b      	mov	r3, r1
 800e7ba:	70fb      	strb	r3, [r7, #3]
 800e7bc:	4613      	mov	r3, r2
 800e7be:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800e7c0:	bf00      	nop
 800e7c2:	370c      	adds	r7, #12
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ca:	4770      	bx	lr

0800e7cc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b082      	sub	sp, #8
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800e7da:	4618      	mov	r0, r3
 800e7dc:	f7fe f9e7 	bl	800cbae <USBH_LL_PortEnabled>
}
 800e7e0:	bf00      	nop
 800e7e2:	3708      	adds	r7, #8
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	bd80      	pop	{r7, pc}

0800e7e8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b082      	sub	sp, #8
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	f7fe f9e7 	bl	800cbca <USBH_LL_PortDisabled>
}
 800e7fc:	bf00      	nop
 800e7fe:	3708      	adds	r7, #8
 800e800:	46bd      	mov	sp, r7
 800e802:	bd80      	pop	{r7, pc}

0800e804 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800e804:	b580      	push	{r7, lr}
 800e806:	b082      	sub	sp, #8
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800e812:	2b00      	cmp	r3, #0
 800e814:	d12f      	bne.n	800e876 <USBH_LL_Init+0x72>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800e816:	4a1a      	ldr	r2, [pc, #104]	@ (800e880 <USBH_LL_Init+0x7c>)
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_HS;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	4a17      	ldr	r2, [pc, #92]	@ (800e880 <USBH_LL_Init+0x7c>)
 800e822:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800e826:	4b16      	ldr	r3, [pc, #88]	@ (800e880 <USBH_LL_Init+0x7c>)
 800e828:	4a16      	ldr	r2, [pc, #88]	@ (800e884 <USBH_LL_Init+0x80>)
 800e82a:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 16;
 800e82c:	4b14      	ldr	r3, [pc, #80]	@ (800e880 <USBH_LL_Init+0x7c>)
 800e82e:	2210      	movs	r2, #16
 800e830:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_HIGH;
 800e832:	4b13      	ldr	r3, [pc, #76]	@ (800e880 <USBH_LL_Init+0x7c>)
 800e834:	2200      	movs	r2, #0
 800e836:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800e838:	4b11      	ldr	r3, [pc, #68]	@ (800e880 <USBH_LL_Init+0x7c>)
 800e83a:	2200      	movs	r2, #0
 800e83c:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_HS_EMBEDDED_PHY;
 800e83e:	4b10      	ldr	r3, [pc, #64]	@ (800e880 <USBH_LL_Init+0x7c>)
 800e840:	2203      	movs	r2, #3
 800e842:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800e844:	4b0e      	ldr	r3, [pc, #56]	@ (800e880 <USBH_LL_Init+0x7c>)
 800e846:	2200      	movs	r2, #0
 800e848:	729a      	strb	r2, [r3, #10]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800e84a:	4b0d      	ldr	r3, [pc, #52]	@ (800e880 <USBH_LL_Init+0x7c>)
 800e84c:	2200      	movs	r2, #0
 800e84e:	72da      	strb	r2, [r3, #11]
  hhcd_USB_OTG_HS.Init.use_external_vbus = ENABLE;
 800e850:	4b0b      	ldr	r3, [pc, #44]	@ (800e880 <USBH_LL_Init+0x7c>)
 800e852:	2201      	movs	r2, #1
 800e854:	741a      	strb	r2, [r3, #16]
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800e856:	480a      	ldr	r0, [pc, #40]	@ (800e880 <USBH_LL_Init+0x7c>)
 800e858:	f7f6 fdae 	bl	80053b8 <HAL_HCD_Init>
 800e85c:	4603      	mov	r3, r0
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d001      	beq.n	800e866 <USBH_LL_Init+0x62>
  {
    Error_Handler();
 800e862:	f7f2 fa67 	bl	8000d34 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800e866:	4806      	ldr	r0, [pc, #24]	@ (800e880 <USBH_LL_Init+0x7c>)
 800e868:	f7f7 fa12 	bl	8005c90 <HAL_HCD_GetCurrentFrame>
 800e86c:	4603      	mov	r3, r0
 800e86e:	4619      	mov	r1, r3
 800e870:	6878      	ldr	r0, [r7, #4]
 800e872:	f7fe f963 	bl	800cb3c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800e876:	2300      	movs	r3, #0
}
 800e878:	4618      	mov	r0, r3
 800e87a:	3708      	adds	r7, #8
 800e87c:	46bd      	mov	sp, r7
 800e87e:	bd80      	pop	{r7, pc}
 800e880:	240008c4 	.word	0x240008c4
 800e884:	40040000 	.word	0x40040000

0800e888 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b084      	sub	sp, #16
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e890:	2300      	movs	r3, #0
 800e892:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e894:	2300      	movs	r3, #0
 800e896:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800e89e:	4618      	mov	r0, r3
 800e8a0:	f7f7 f97e 	bl	8005ba0 <HAL_HCD_Start>
 800e8a4:	4603      	mov	r3, r0
 800e8a6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e8a8:	7bfb      	ldrb	r3, [r7, #15]
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	f000 f956 	bl	800eb5c <USBH_Get_USB_Status>
 800e8b0:	4603      	mov	r3, r0
 800e8b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e8b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	3710      	adds	r7, #16
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	bd80      	pop	{r7, pc}

0800e8be <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800e8be:	b580      	push	{r7, lr}
 800e8c0:	b084      	sub	sp, #16
 800e8c2:	af00      	add	r7, sp, #0
 800e8c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	f7f7 f986 	bl	8005be6 <HAL_HCD_Stop>
 800e8da:	4603      	mov	r3, r0
 800e8dc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e8de:	7bfb      	ldrb	r3, [r7, #15]
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	f000 f93b 	bl	800eb5c <USBH_Get_USB_Status>
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e8ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	3710      	adds	r7, #16
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	bd80      	pop	{r7, pc}

0800e8f4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b084      	sub	sp, #16
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800e8fc:	2301      	movs	r3, #1
 800e8fe:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800e906:	4618      	mov	r0, r3
 800e908:	f7f7 f9d0 	bl	8005cac <HAL_HCD_GetCurrentSpeed>
 800e90c:	4603      	mov	r3, r0
 800e90e:	2b02      	cmp	r3, #2
 800e910:	d00c      	beq.n	800e92c <USBH_LL_GetSpeed+0x38>
 800e912:	2b02      	cmp	r3, #2
 800e914:	d80d      	bhi.n	800e932 <USBH_LL_GetSpeed+0x3e>
 800e916:	2b00      	cmp	r3, #0
 800e918:	d002      	beq.n	800e920 <USBH_LL_GetSpeed+0x2c>
 800e91a:	2b01      	cmp	r3, #1
 800e91c:	d003      	beq.n	800e926 <USBH_LL_GetSpeed+0x32>
 800e91e:	e008      	b.n	800e932 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800e920:	2300      	movs	r3, #0
 800e922:	73fb      	strb	r3, [r7, #15]
    break;
 800e924:	e008      	b.n	800e938 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800e926:	2301      	movs	r3, #1
 800e928:	73fb      	strb	r3, [r7, #15]
    break;
 800e92a:	e005      	b.n	800e938 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800e92c:	2302      	movs	r3, #2
 800e92e:	73fb      	strb	r3, [r7, #15]
    break;
 800e930:	e002      	b.n	800e938 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800e932:	2301      	movs	r3, #1
 800e934:	73fb      	strb	r3, [r7, #15]
    break;
 800e936:	bf00      	nop
  }
  return  speed;
 800e938:	7bfb      	ldrb	r3, [r7, #15]
}
 800e93a:	4618      	mov	r0, r3
 800e93c:	3710      	adds	r7, #16
 800e93e:	46bd      	mov	sp, r7
 800e940:	bd80      	pop	{r7, pc}

0800e942 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800e942:	b580      	push	{r7, lr}
 800e944:	b084      	sub	sp, #16
 800e946:	af00      	add	r7, sp, #0
 800e948:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e94a:	2300      	movs	r3, #0
 800e94c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e94e:	2300      	movs	r3, #0
 800e950:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800e958:	4618      	mov	r0, r3
 800e95a:	f7f7 f961 	bl	8005c20 <HAL_HCD_ResetPort>
 800e95e:	4603      	mov	r3, r0
 800e960:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e962:	7bfb      	ldrb	r3, [r7, #15]
 800e964:	4618      	mov	r0, r3
 800e966:	f000 f8f9 	bl	800eb5c <USBH_Get_USB_Status>
 800e96a:	4603      	mov	r3, r0
 800e96c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e96e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e970:	4618      	mov	r0, r3
 800e972:	3710      	adds	r7, #16
 800e974:	46bd      	mov	sp, r7
 800e976:	bd80      	pop	{r7, pc}

0800e978 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b082      	sub	sp, #8
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
 800e980:	460b      	mov	r3, r1
 800e982:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800e98a:	78fa      	ldrb	r2, [r7, #3]
 800e98c:	4611      	mov	r1, r2
 800e98e:	4618      	mov	r0, r3
 800e990:	f7f7 f969 	bl	8005c66 <HAL_HCD_HC_GetXferCount>
 800e994:	4603      	mov	r3, r0
}
 800e996:	4618      	mov	r0, r3
 800e998:	3708      	adds	r7, #8
 800e99a:	46bd      	mov	sp, r7
 800e99c:	bd80      	pop	{r7, pc}

0800e99e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e99e:	b590      	push	{r4, r7, lr}
 800e9a0:	b089      	sub	sp, #36	@ 0x24
 800e9a2:	af04      	add	r7, sp, #16
 800e9a4:	6078      	str	r0, [r7, #4]
 800e9a6:	4608      	mov	r0, r1
 800e9a8:	4611      	mov	r1, r2
 800e9aa:	461a      	mov	r2, r3
 800e9ac:	4603      	mov	r3, r0
 800e9ae:	70fb      	strb	r3, [r7, #3]
 800e9b0:	460b      	mov	r3, r1
 800e9b2:	70bb      	strb	r3, [r7, #2]
 800e9b4:	4613      	mov	r3, r2
 800e9b6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e9bc:	2300      	movs	r3, #0
 800e9be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800e9c6:	787c      	ldrb	r4, [r7, #1]
 800e9c8:	78ba      	ldrb	r2, [r7, #2]
 800e9ca:	78f9      	ldrb	r1, [r7, #3]
 800e9cc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e9ce:	9302      	str	r3, [sp, #8]
 800e9d0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e9d4:	9301      	str	r3, [sp, #4]
 800e9d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e9da:	9300      	str	r3, [sp, #0]
 800e9dc:	4623      	mov	r3, r4
 800e9de:	f7f6 fd55 	bl	800548c <HAL_HCD_HC_Init>
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800e9e6:	7bfb      	ldrb	r3, [r7, #15]
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	f000 f8b7 	bl	800eb5c <USBH_Get_USB_Status>
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e9f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	3714      	adds	r7, #20
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	bd90      	pop	{r4, r7, pc}

0800e9fc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b084      	sub	sp, #16
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
 800ea04:	460b      	mov	r3, r1
 800ea06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea08:	2300      	movs	r3, #0
 800ea0a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ea16:	78fa      	ldrb	r2, [r7, #3]
 800ea18:	4611      	mov	r1, r2
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	f7f6 fdee 	bl	80055fc <HAL_HCD_HC_Halt>
 800ea20:	4603      	mov	r3, r0
 800ea22:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ea24:	7bfb      	ldrb	r3, [r7, #15]
 800ea26:	4618      	mov	r0, r3
 800ea28:	f000 f898 	bl	800eb5c <USBH_Get_USB_Status>
 800ea2c:	4603      	mov	r3, r0
 800ea2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ea30:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea32:	4618      	mov	r0, r3
 800ea34:	3710      	adds	r7, #16
 800ea36:	46bd      	mov	sp, r7
 800ea38:	bd80      	pop	{r7, pc}

0800ea3a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ea3a:	b590      	push	{r4, r7, lr}
 800ea3c:	b089      	sub	sp, #36	@ 0x24
 800ea3e:	af04      	add	r7, sp, #16
 800ea40:	6078      	str	r0, [r7, #4]
 800ea42:	4608      	mov	r0, r1
 800ea44:	4611      	mov	r1, r2
 800ea46:	461a      	mov	r2, r3
 800ea48:	4603      	mov	r3, r0
 800ea4a:	70fb      	strb	r3, [r7, #3]
 800ea4c:	460b      	mov	r3, r1
 800ea4e:	70bb      	strb	r3, [r7, #2]
 800ea50:	4613      	mov	r3, r2
 800ea52:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea54:	2300      	movs	r3, #0
 800ea56:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ea58:	2300      	movs	r3, #0
 800ea5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800ea62:	787c      	ldrb	r4, [r7, #1]
 800ea64:	78ba      	ldrb	r2, [r7, #2]
 800ea66:	78f9      	ldrb	r1, [r7, #3]
 800ea68:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800ea6c:	9303      	str	r3, [sp, #12]
 800ea6e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ea70:	9302      	str	r3, [sp, #8]
 800ea72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea74:	9301      	str	r3, [sp, #4]
 800ea76:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ea7a:	9300      	str	r3, [sp, #0]
 800ea7c:	4623      	mov	r3, r4
 800ea7e:	f7f6 fde1 	bl	8005644 <HAL_HCD_HC_SubmitRequest>
 800ea82:	4603      	mov	r3, r0
 800ea84:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ea86:	7bfb      	ldrb	r3, [r7, #15]
 800ea88:	4618      	mov	r0, r3
 800ea8a:	f000 f867 	bl	800eb5c <USBH_Get_USB_Status>
 800ea8e:	4603      	mov	r3, r0
 800ea90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ea92:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea94:	4618      	mov	r0, r3
 800ea96:	3714      	adds	r7, #20
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	bd90      	pop	{r4, r7, pc}

0800ea9c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b082      	sub	sp, #8
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
 800eaa4:	460b      	mov	r3, r1
 800eaa6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800eaae:	78fa      	ldrb	r2, [r7, #3]
 800eab0:	4611      	mov	r1, r2
 800eab2:	4618      	mov	r0, r3
 800eab4:	f7f7 f8c2 	bl	8005c3c <HAL_HCD_HC_GetURBState>
 800eab8:	4603      	mov	r3, r0
}
 800eaba:	4618      	mov	r0, r3
 800eabc:	3708      	adds	r7, #8
 800eabe:	46bd      	mov	sp, r7
 800eac0:	bd80      	pop	{r7, pc}

0800eac2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800eac2:	b580      	push	{r7, lr}
 800eac4:	b082      	sub	sp, #8
 800eac6:	af00      	add	r7, sp, #0
 800eac8:	6078      	str	r0, [r7, #4]
 800eaca:	460b      	mov	r3, r1
 800eacc:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_HS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_HS */
    }
  }
  HAL_Delay(200);
 800eace:	20c8      	movs	r0, #200	@ 0xc8
 800ead0:	f7f3 f9c4 	bl	8001e5c <HAL_Delay>
  return USBH_OK;
 800ead4:	2300      	movs	r3, #0
}
 800ead6:	4618      	mov	r0, r3
 800ead8:	3708      	adds	r7, #8
 800eada:	46bd      	mov	sp, r7
 800eadc:	bd80      	pop	{r7, pc}

0800eade <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800eade:	b480      	push	{r7}
 800eae0:	b085      	sub	sp, #20
 800eae2:	af00      	add	r7, sp, #0
 800eae4:	6078      	str	r0, [r7, #4]
 800eae6:	460b      	mov	r3, r1
 800eae8:	70fb      	strb	r3, [r7, #3]
 800eaea:	4613      	mov	r3, r2
 800eaec:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800eaf4:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800eaf6:	78fa      	ldrb	r2, [r7, #3]
 800eaf8:	68f9      	ldr	r1, [r7, #12]
 800eafa:	4613      	mov	r3, r2
 800eafc:	011b      	lsls	r3, r3, #4
 800eafe:	1a9b      	subs	r3, r3, r2
 800eb00:	009b      	lsls	r3, r3, #2
 800eb02:	440b      	add	r3, r1
 800eb04:	3317      	adds	r3, #23
 800eb06:	781b      	ldrb	r3, [r3, #0]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d00a      	beq.n	800eb22 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800eb0c:	78fa      	ldrb	r2, [r7, #3]
 800eb0e:	68f9      	ldr	r1, [r7, #12]
 800eb10:	4613      	mov	r3, r2
 800eb12:	011b      	lsls	r3, r3, #4
 800eb14:	1a9b      	subs	r3, r3, r2
 800eb16:	009b      	lsls	r3, r3, #2
 800eb18:	440b      	add	r3, r1
 800eb1a:	333c      	adds	r3, #60	@ 0x3c
 800eb1c:	78ba      	ldrb	r2, [r7, #2]
 800eb1e:	701a      	strb	r2, [r3, #0]
 800eb20:	e009      	b.n	800eb36 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800eb22:	78fa      	ldrb	r2, [r7, #3]
 800eb24:	68f9      	ldr	r1, [r7, #12]
 800eb26:	4613      	mov	r3, r2
 800eb28:	011b      	lsls	r3, r3, #4
 800eb2a:	1a9b      	subs	r3, r3, r2
 800eb2c:	009b      	lsls	r3, r3, #2
 800eb2e:	440b      	add	r3, r1
 800eb30:	333d      	adds	r3, #61	@ 0x3d
 800eb32:	78ba      	ldrb	r2, [r7, #2]
 800eb34:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800eb36:	2300      	movs	r3, #0
}
 800eb38:	4618      	mov	r0, r3
 800eb3a:	3714      	adds	r7, #20
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb42:	4770      	bx	lr

0800eb44 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b082      	sub	sp, #8
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800eb4c:	6878      	ldr	r0, [r7, #4]
 800eb4e:	f7f3 f985 	bl	8001e5c <HAL_Delay>
}
 800eb52:	bf00      	nop
 800eb54:	3708      	adds	r7, #8
 800eb56:	46bd      	mov	sp, r7
 800eb58:	bd80      	pop	{r7, pc}
	...

0800eb5c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800eb5c:	b480      	push	{r7}
 800eb5e:	b085      	sub	sp, #20
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	4603      	mov	r3, r0
 800eb64:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800eb66:	2300      	movs	r3, #0
 800eb68:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800eb6a:	79fb      	ldrb	r3, [r7, #7]
 800eb6c:	2b03      	cmp	r3, #3
 800eb6e:	d817      	bhi.n	800eba0 <USBH_Get_USB_Status+0x44>
 800eb70:	a201      	add	r2, pc, #4	@ (adr r2, 800eb78 <USBH_Get_USB_Status+0x1c>)
 800eb72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb76:	bf00      	nop
 800eb78:	0800eb89 	.word	0x0800eb89
 800eb7c:	0800eb8f 	.word	0x0800eb8f
 800eb80:	0800eb95 	.word	0x0800eb95
 800eb84:	0800eb9b 	.word	0x0800eb9b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800eb88:	2300      	movs	r3, #0
 800eb8a:	73fb      	strb	r3, [r7, #15]
    break;
 800eb8c:	e00b      	b.n	800eba6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800eb8e:	2302      	movs	r3, #2
 800eb90:	73fb      	strb	r3, [r7, #15]
    break;
 800eb92:	e008      	b.n	800eba6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800eb94:	2301      	movs	r3, #1
 800eb96:	73fb      	strb	r3, [r7, #15]
    break;
 800eb98:	e005      	b.n	800eba6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800eb9a:	2302      	movs	r3, #2
 800eb9c:	73fb      	strb	r3, [r7, #15]
    break;
 800eb9e:	e002      	b.n	800eba6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800eba0:	2302      	movs	r3, #2
 800eba2:	73fb      	strb	r3, [r7, #15]
    break;
 800eba4:	bf00      	nop
  }
  return usb_status;
 800eba6:	7bfb      	ldrb	r3, [r7, #15]
}
 800eba8:	4618      	mov	r0, r3
 800ebaa:	3714      	adds	r7, #20
 800ebac:	46bd      	mov	sp, r7
 800ebae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb2:	4770      	bx	lr

0800ebb4 <malloc>:
 800ebb4:	4b02      	ldr	r3, [pc, #8]	@ (800ebc0 <malloc+0xc>)
 800ebb6:	4601      	mov	r1, r0
 800ebb8:	6818      	ldr	r0, [r3, #0]
 800ebba:	f000 b82d 	b.w	800ec18 <_malloc_r>
 800ebbe:	bf00      	nop
 800ebc0:	24000098 	.word	0x24000098

0800ebc4 <free>:
 800ebc4:	4b02      	ldr	r3, [pc, #8]	@ (800ebd0 <free+0xc>)
 800ebc6:	4601      	mov	r1, r0
 800ebc8:	6818      	ldr	r0, [r3, #0]
 800ebca:	f000 b8f5 	b.w	800edb8 <_free_r>
 800ebce:	bf00      	nop
 800ebd0:	24000098 	.word	0x24000098

0800ebd4 <sbrk_aligned>:
 800ebd4:	b570      	push	{r4, r5, r6, lr}
 800ebd6:	4e0f      	ldr	r6, [pc, #60]	@ (800ec14 <sbrk_aligned+0x40>)
 800ebd8:	460c      	mov	r4, r1
 800ebda:	6831      	ldr	r1, [r6, #0]
 800ebdc:	4605      	mov	r5, r0
 800ebde:	b911      	cbnz	r1, 800ebe6 <sbrk_aligned+0x12>
 800ebe0:	f000 f8ae 	bl	800ed40 <_sbrk_r>
 800ebe4:	6030      	str	r0, [r6, #0]
 800ebe6:	4621      	mov	r1, r4
 800ebe8:	4628      	mov	r0, r5
 800ebea:	f000 f8a9 	bl	800ed40 <_sbrk_r>
 800ebee:	1c43      	adds	r3, r0, #1
 800ebf0:	d103      	bne.n	800ebfa <sbrk_aligned+0x26>
 800ebf2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800ebf6:	4620      	mov	r0, r4
 800ebf8:	bd70      	pop	{r4, r5, r6, pc}
 800ebfa:	1cc4      	adds	r4, r0, #3
 800ebfc:	f024 0403 	bic.w	r4, r4, #3
 800ec00:	42a0      	cmp	r0, r4
 800ec02:	d0f8      	beq.n	800ebf6 <sbrk_aligned+0x22>
 800ec04:	1a21      	subs	r1, r4, r0
 800ec06:	4628      	mov	r0, r5
 800ec08:	f000 f89a 	bl	800ed40 <_sbrk_r>
 800ec0c:	3001      	adds	r0, #1
 800ec0e:	d1f2      	bne.n	800ebf6 <sbrk_aligned+0x22>
 800ec10:	e7ef      	b.n	800ebf2 <sbrk_aligned+0x1e>
 800ec12:	bf00      	nop
 800ec14:	24000ca4 	.word	0x24000ca4

0800ec18 <_malloc_r>:
 800ec18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec1c:	1ccd      	adds	r5, r1, #3
 800ec1e:	f025 0503 	bic.w	r5, r5, #3
 800ec22:	3508      	adds	r5, #8
 800ec24:	2d0c      	cmp	r5, #12
 800ec26:	bf38      	it	cc
 800ec28:	250c      	movcc	r5, #12
 800ec2a:	2d00      	cmp	r5, #0
 800ec2c:	4606      	mov	r6, r0
 800ec2e:	db01      	blt.n	800ec34 <_malloc_r+0x1c>
 800ec30:	42a9      	cmp	r1, r5
 800ec32:	d904      	bls.n	800ec3e <_malloc_r+0x26>
 800ec34:	230c      	movs	r3, #12
 800ec36:	6033      	str	r3, [r6, #0]
 800ec38:	2000      	movs	r0, #0
 800ec3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ed14 <_malloc_r+0xfc>
 800ec42:	f000 f869 	bl	800ed18 <__malloc_lock>
 800ec46:	f8d8 3000 	ldr.w	r3, [r8]
 800ec4a:	461c      	mov	r4, r3
 800ec4c:	bb44      	cbnz	r4, 800eca0 <_malloc_r+0x88>
 800ec4e:	4629      	mov	r1, r5
 800ec50:	4630      	mov	r0, r6
 800ec52:	f7ff ffbf 	bl	800ebd4 <sbrk_aligned>
 800ec56:	1c43      	adds	r3, r0, #1
 800ec58:	4604      	mov	r4, r0
 800ec5a:	d158      	bne.n	800ed0e <_malloc_r+0xf6>
 800ec5c:	f8d8 4000 	ldr.w	r4, [r8]
 800ec60:	4627      	mov	r7, r4
 800ec62:	2f00      	cmp	r7, #0
 800ec64:	d143      	bne.n	800ecee <_malloc_r+0xd6>
 800ec66:	2c00      	cmp	r4, #0
 800ec68:	d04b      	beq.n	800ed02 <_malloc_r+0xea>
 800ec6a:	6823      	ldr	r3, [r4, #0]
 800ec6c:	4639      	mov	r1, r7
 800ec6e:	4630      	mov	r0, r6
 800ec70:	eb04 0903 	add.w	r9, r4, r3
 800ec74:	f000 f864 	bl	800ed40 <_sbrk_r>
 800ec78:	4581      	cmp	r9, r0
 800ec7a:	d142      	bne.n	800ed02 <_malloc_r+0xea>
 800ec7c:	6821      	ldr	r1, [r4, #0]
 800ec7e:	1a6d      	subs	r5, r5, r1
 800ec80:	4629      	mov	r1, r5
 800ec82:	4630      	mov	r0, r6
 800ec84:	f7ff ffa6 	bl	800ebd4 <sbrk_aligned>
 800ec88:	3001      	adds	r0, #1
 800ec8a:	d03a      	beq.n	800ed02 <_malloc_r+0xea>
 800ec8c:	6823      	ldr	r3, [r4, #0]
 800ec8e:	442b      	add	r3, r5
 800ec90:	6023      	str	r3, [r4, #0]
 800ec92:	f8d8 3000 	ldr.w	r3, [r8]
 800ec96:	685a      	ldr	r2, [r3, #4]
 800ec98:	bb62      	cbnz	r2, 800ecf4 <_malloc_r+0xdc>
 800ec9a:	f8c8 7000 	str.w	r7, [r8]
 800ec9e:	e00f      	b.n	800ecc0 <_malloc_r+0xa8>
 800eca0:	6822      	ldr	r2, [r4, #0]
 800eca2:	1b52      	subs	r2, r2, r5
 800eca4:	d420      	bmi.n	800ece8 <_malloc_r+0xd0>
 800eca6:	2a0b      	cmp	r2, #11
 800eca8:	d917      	bls.n	800ecda <_malloc_r+0xc2>
 800ecaa:	1961      	adds	r1, r4, r5
 800ecac:	42a3      	cmp	r3, r4
 800ecae:	6025      	str	r5, [r4, #0]
 800ecb0:	bf18      	it	ne
 800ecb2:	6059      	strne	r1, [r3, #4]
 800ecb4:	6863      	ldr	r3, [r4, #4]
 800ecb6:	bf08      	it	eq
 800ecb8:	f8c8 1000 	streq.w	r1, [r8]
 800ecbc:	5162      	str	r2, [r4, r5]
 800ecbe:	604b      	str	r3, [r1, #4]
 800ecc0:	4630      	mov	r0, r6
 800ecc2:	f000 f82f 	bl	800ed24 <__malloc_unlock>
 800ecc6:	f104 000b 	add.w	r0, r4, #11
 800ecca:	1d23      	adds	r3, r4, #4
 800eccc:	f020 0007 	bic.w	r0, r0, #7
 800ecd0:	1ac2      	subs	r2, r0, r3
 800ecd2:	bf1c      	itt	ne
 800ecd4:	1a1b      	subne	r3, r3, r0
 800ecd6:	50a3      	strne	r3, [r4, r2]
 800ecd8:	e7af      	b.n	800ec3a <_malloc_r+0x22>
 800ecda:	6862      	ldr	r2, [r4, #4]
 800ecdc:	42a3      	cmp	r3, r4
 800ecde:	bf0c      	ite	eq
 800ece0:	f8c8 2000 	streq.w	r2, [r8]
 800ece4:	605a      	strne	r2, [r3, #4]
 800ece6:	e7eb      	b.n	800ecc0 <_malloc_r+0xa8>
 800ece8:	4623      	mov	r3, r4
 800ecea:	6864      	ldr	r4, [r4, #4]
 800ecec:	e7ae      	b.n	800ec4c <_malloc_r+0x34>
 800ecee:	463c      	mov	r4, r7
 800ecf0:	687f      	ldr	r7, [r7, #4]
 800ecf2:	e7b6      	b.n	800ec62 <_malloc_r+0x4a>
 800ecf4:	461a      	mov	r2, r3
 800ecf6:	685b      	ldr	r3, [r3, #4]
 800ecf8:	42a3      	cmp	r3, r4
 800ecfa:	d1fb      	bne.n	800ecf4 <_malloc_r+0xdc>
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	6053      	str	r3, [r2, #4]
 800ed00:	e7de      	b.n	800ecc0 <_malloc_r+0xa8>
 800ed02:	230c      	movs	r3, #12
 800ed04:	6033      	str	r3, [r6, #0]
 800ed06:	4630      	mov	r0, r6
 800ed08:	f000 f80c 	bl	800ed24 <__malloc_unlock>
 800ed0c:	e794      	b.n	800ec38 <_malloc_r+0x20>
 800ed0e:	6005      	str	r5, [r0, #0]
 800ed10:	e7d6      	b.n	800ecc0 <_malloc_r+0xa8>
 800ed12:	bf00      	nop
 800ed14:	24000ca8 	.word	0x24000ca8

0800ed18 <__malloc_lock>:
 800ed18:	4801      	ldr	r0, [pc, #4]	@ (800ed20 <__malloc_lock+0x8>)
 800ed1a:	f000 b84b 	b.w	800edb4 <__retarget_lock_acquire_recursive>
 800ed1e:	bf00      	nop
 800ed20:	24000de8 	.word	0x24000de8

0800ed24 <__malloc_unlock>:
 800ed24:	4801      	ldr	r0, [pc, #4]	@ (800ed2c <__malloc_unlock+0x8>)
 800ed26:	f000 b846 	b.w	800edb6 <__retarget_lock_release_recursive>
 800ed2a:	bf00      	nop
 800ed2c:	24000de8 	.word	0x24000de8

0800ed30 <memset>:
 800ed30:	4402      	add	r2, r0
 800ed32:	4603      	mov	r3, r0
 800ed34:	4293      	cmp	r3, r2
 800ed36:	d100      	bne.n	800ed3a <memset+0xa>
 800ed38:	4770      	bx	lr
 800ed3a:	f803 1b01 	strb.w	r1, [r3], #1
 800ed3e:	e7f9      	b.n	800ed34 <memset+0x4>

0800ed40 <_sbrk_r>:
 800ed40:	b538      	push	{r3, r4, r5, lr}
 800ed42:	4d06      	ldr	r5, [pc, #24]	@ (800ed5c <_sbrk_r+0x1c>)
 800ed44:	2300      	movs	r3, #0
 800ed46:	4604      	mov	r4, r0
 800ed48:	4608      	mov	r0, r1
 800ed4a:	602b      	str	r3, [r5, #0]
 800ed4c:	f7f2 f9ce 	bl	80010ec <_sbrk>
 800ed50:	1c43      	adds	r3, r0, #1
 800ed52:	d102      	bne.n	800ed5a <_sbrk_r+0x1a>
 800ed54:	682b      	ldr	r3, [r5, #0]
 800ed56:	b103      	cbz	r3, 800ed5a <_sbrk_r+0x1a>
 800ed58:	6023      	str	r3, [r4, #0]
 800ed5a:	bd38      	pop	{r3, r4, r5, pc}
 800ed5c:	24000de4 	.word	0x24000de4

0800ed60 <__errno>:
 800ed60:	4b01      	ldr	r3, [pc, #4]	@ (800ed68 <__errno+0x8>)
 800ed62:	6818      	ldr	r0, [r3, #0]
 800ed64:	4770      	bx	lr
 800ed66:	bf00      	nop
 800ed68:	24000098 	.word	0x24000098

0800ed6c <__libc_init_array>:
 800ed6c:	b570      	push	{r4, r5, r6, lr}
 800ed6e:	4d0d      	ldr	r5, [pc, #52]	@ (800eda4 <__libc_init_array+0x38>)
 800ed70:	4c0d      	ldr	r4, [pc, #52]	@ (800eda8 <__libc_init_array+0x3c>)
 800ed72:	1b64      	subs	r4, r4, r5
 800ed74:	10a4      	asrs	r4, r4, #2
 800ed76:	2600      	movs	r6, #0
 800ed78:	42a6      	cmp	r6, r4
 800ed7a:	d109      	bne.n	800ed90 <__libc_init_array+0x24>
 800ed7c:	4d0b      	ldr	r5, [pc, #44]	@ (800edac <__libc_init_array+0x40>)
 800ed7e:	4c0c      	ldr	r4, [pc, #48]	@ (800edb0 <__libc_init_array+0x44>)
 800ed80:	f000 f864 	bl	800ee4c <_init>
 800ed84:	1b64      	subs	r4, r4, r5
 800ed86:	10a4      	asrs	r4, r4, #2
 800ed88:	2600      	movs	r6, #0
 800ed8a:	42a6      	cmp	r6, r4
 800ed8c:	d105      	bne.n	800ed9a <__libc_init_array+0x2e>
 800ed8e:	bd70      	pop	{r4, r5, r6, pc}
 800ed90:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed94:	4798      	blx	r3
 800ed96:	3601      	adds	r6, #1
 800ed98:	e7ee      	b.n	800ed78 <__libc_init_array+0xc>
 800ed9a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed9e:	4798      	blx	r3
 800eda0:	3601      	adds	r6, #1
 800eda2:	e7f2      	b.n	800ed8a <__libc_init_array+0x1e>
 800eda4:	0800eea0 	.word	0x0800eea0
 800eda8:	0800eea0 	.word	0x0800eea0
 800edac:	0800eea0 	.word	0x0800eea0
 800edb0:	0800eea4 	.word	0x0800eea4

0800edb4 <__retarget_lock_acquire_recursive>:
 800edb4:	4770      	bx	lr

0800edb6 <__retarget_lock_release_recursive>:
 800edb6:	4770      	bx	lr

0800edb8 <_free_r>:
 800edb8:	b538      	push	{r3, r4, r5, lr}
 800edba:	4605      	mov	r5, r0
 800edbc:	2900      	cmp	r1, #0
 800edbe:	d041      	beq.n	800ee44 <_free_r+0x8c>
 800edc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800edc4:	1f0c      	subs	r4, r1, #4
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	bfb8      	it	lt
 800edca:	18e4      	addlt	r4, r4, r3
 800edcc:	f7ff ffa4 	bl	800ed18 <__malloc_lock>
 800edd0:	4a1d      	ldr	r2, [pc, #116]	@ (800ee48 <_free_r+0x90>)
 800edd2:	6813      	ldr	r3, [r2, #0]
 800edd4:	b933      	cbnz	r3, 800ede4 <_free_r+0x2c>
 800edd6:	6063      	str	r3, [r4, #4]
 800edd8:	6014      	str	r4, [r2, #0]
 800edda:	4628      	mov	r0, r5
 800eddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ede0:	f7ff bfa0 	b.w	800ed24 <__malloc_unlock>
 800ede4:	42a3      	cmp	r3, r4
 800ede6:	d908      	bls.n	800edfa <_free_r+0x42>
 800ede8:	6820      	ldr	r0, [r4, #0]
 800edea:	1821      	adds	r1, r4, r0
 800edec:	428b      	cmp	r3, r1
 800edee:	bf01      	itttt	eq
 800edf0:	6819      	ldreq	r1, [r3, #0]
 800edf2:	685b      	ldreq	r3, [r3, #4]
 800edf4:	1809      	addeq	r1, r1, r0
 800edf6:	6021      	streq	r1, [r4, #0]
 800edf8:	e7ed      	b.n	800edd6 <_free_r+0x1e>
 800edfa:	461a      	mov	r2, r3
 800edfc:	685b      	ldr	r3, [r3, #4]
 800edfe:	b10b      	cbz	r3, 800ee04 <_free_r+0x4c>
 800ee00:	42a3      	cmp	r3, r4
 800ee02:	d9fa      	bls.n	800edfa <_free_r+0x42>
 800ee04:	6811      	ldr	r1, [r2, #0]
 800ee06:	1850      	adds	r0, r2, r1
 800ee08:	42a0      	cmp	r0, r4
 800ee0a:	d10b      	bne.n	800ee24 <_free_r+0x6c>
 800ee0c:	6820      	ldr	r0, [r4, #0]
 800ee0e:	4401      	add	r1, r0
 800ee10:	1850      	adds	r0, r2, r1
 800ee12:	4283      	cmp	r3, r0
 800ee14:	6011      	str	r1, [r2, #0]
 800ee16:	d1e0      	bne.n	800edda <_free_r+0x22>
 800ee18:	6818      	ldr	r0, [r3, #0]
 800ee1a:	685b      	ldr	r3, [r3, #4]
 800ee1c:	6053      	str	r3, [r2, #4]
 800ee1e:	4408      	add	r0, r1
 800ee20:	6010      	str	r0, [r2, #0]
 800ee22:	e7da      	b.n	800edda <_free_r+0x22>
 800ee24:	d902      	bls.n	800ee2c <_free_r+0x74>
 800ee26:	230c      	movs	r3, #12
 800ee28:	602b      	str	r3, [r5, #0]
 800ee2a:	e7d6      	b.n	800edda <_free_r+0x22>
 800ee2c:	6820      	ldr	r0, [r4, #0]
 800ee2e:	1821      	adds	r1, r4, r0
 800ee30:	428b      	cmp	r3, r1
 800ee32:	bf04      	itt	eq
 800ee34:	6819      	ldreq	r1, [r3, #0]
 800ee36:	685b      	ldreq	r3, [r3, #4]
 800ee38:	6063      	str	r3, [r4, #4]
 800ee3a:	bf04      	itt	eq
 800ee3c:	1809      	addeq	r1, r1, r0
 800ee3e:	6021      	streq	r1, [r4, #0]
 800ee40:	6054      	str	r4, [r2, #4]
 800ee42:	e7ca      	b.n	800edda <_free_r+0x22>
 800ee44:	bd38      	pop	{r3, r4, r5, pc}
 800ee46:	bf00      	nop
 800ee48:	24000ca8 	.word	0x24000ca8

0800ee4c <_init>:
 800ee4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee4e:	bf00      	nop
 800ee50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee52:	bc08      	pop	{r3}
 800ee54:	469e      	mov	lr, r3
 800ee56:	4770      	bx	lr

0800ee58 <_fini>:
 800ee58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee5a:	bf00      	nop
 800ee5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee5e:	bc08      	pop	{r3}
 800ee60:	469e      	mov	lr, r3
 800ee62:	4770      	bx	lr
